// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	ast "github.com/GuanceCloud/platypus/pkg/v2/ast"
)

//line gram.y:15
type yySymType struct {
	yys      int
	aststmts ast.Stmts
	astblock *ast.BlockStmt

	classbody any
	fnparams  any

	ifitem    *ast.IfStmtElem
	iflist    []*ast.IfStmtElem
	node      ast.Node
	nodes     []ast.Node
	map_nodes [][2]ast.Node
	item      Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const EOF = 57349
const ERROR = 57350
const ID = 57351
const NUMBER = 57352
const LEFT_PAREN = 57353
const LEFT_BRACKET = 57354
const LEFT_BRACE = 57355
const RIGHT_BRACE = 57356
const RIGHT_PAREN = 57357
const RIGHT_BRACKET = 57358
const STRING = 57359
const QUOTED_STRING = 57360
const MULTILINE_STRING = 57361
const COLON = 57362
const EOL = 57363
const operatorsStart = 57364
const ADD = 57365
const SUB = 57366
const MUL = 57367
const DIV = 57368
const MOD = 57369
const EQ = 57370
const GTE = 57371
const GT = 57372
const LT = 57373
const LTE = 57374
const NEQ = 57375
const EQEQ = 57376
const ADD_EQ = 57377
const SUB_EQ = 57378
const DIV_EQ = 57379
const MUL_EQ = 57380
const MOD_EQ = 57381
const AND = 57382
const OR = 57383
const NOT = 57384
const DOT = 57385
const operatorsEnd = 57386
const keywordsStart = 57387
const TRUE = 57388
const FALSE = 57389
const CLASS = 57390
const NIL = 57391
const NULL = 57392
const IF = 57393
const ELIF = 57394
const ELSE = 57395
const STR = 57396
const INT = 57397
const FLOAT = 57398
const BOOL = 57399
const LIST = 57400
const MAP = 57401
const ANY = 57402
const FOR = 57403
const IN = 57404
const WHILE = 57405
const BREAK = 57406
const CONTINUE = 57407
const RETURN = 57408
const SWITCH = 57409
const CASE = 57410
const GOTO = 57411
const FN = 57412
const LET = 57413
const VAR = 57414
const VAR_ARG = 57415
const FN_RET = 57416
const IMPORT = 57417
const AS = 57418
const TYPE = 57419
const NEW = 57420
const MAKE = 57421
const INTERFACE = 57422
const CONST = 57423
const keywordsEnd = 57424
const startSymbolsStart = 57425
const START_STMTS = 57426
const startSymbolsEnd = 57427
const UMINUS = 57428

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"COLON",
	"EOL",
	"operatorsStart",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"EQ",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"NEQ",
	"EQEQ",
	"ADD_EQ",
	"SUB_EQ",
	"DIV_EQ",
	"MUL_EQ",
	"MOD_EQ",
	"AND",
	"OR",
	"NOT",
	"DOT",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"CLASS",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"ANY",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"SWITCH",
	"CASE",
	"GOTO",
	"FN",
	"LET",
	"VAR",
	"VAR_ARG",
	"FN_RET",
	"IMPORT",
	"AS",
	"TYPE",
	"NEW",
	"MAKE",
	"INTERFACE",
	"CONST",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:910

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	5, 94,
	28, 94,
	-2, 36,
	-1, 81,
	4, 106,
	-2, 94,
	-1, 201,
	13, 109,
	-2, 94,
	-1, 232,
	1, 127,
	4, 127,
	7, 127,
	14, 127,
	21, 127,
	-2, 165,
	-1, 233,
	5, 94,
	28, 94,
	-2, 36,
}

const yyPrivate = 57344

const yyLast = 1549

var yyAct = [...]int16{
	37, 216, 23, 145, 199, 217, 186, 162, 35, 180,
	3, 131, 131, 131, 131, 51, 293, 289, 175, 279,
	70, 77, 75, 168, 52, 129, 204, 113, 17, 82,
	209, 106, 108, 206, 110, 90, 104, 48, 67, 24,
	127, 278, 9, 111, 51, 53, 62, 60, 61, 232,
	114, 71, 56, 52, 57, 83, 257, 128, 63, 64,
	256, 166, 167, 169, 78, 176, 170, 105, 72, 116,
	250, 294, 318, 309, 286, 275, 177, 65, 66, 266,
	74, 54, 55, 208, 58, 59, 50, 185, 109, 51,
	126, 147, 2, 51, 258, 281, 26, 73, 52, 28,
	27, 34, 52, 9, 133, 31, 30, 174, 178, 51,
	32, 174, 33, 51, 302, 244, 51, 302, 52, 215,
	107, 221, 52, 183, 328, 52, 211, 324, 237, 80,
	310, 90, 104, 300, 51, 53, 62, 60, 61, 202,
	280, 184, 56, 52, 57, 101, 102, 103, 63, 64,
	205, 302, 276, 271, 302, 302, 302, 262, 195, 248,
	248, 314, 200, 105, 313, 306, 303, 65, 66, 291,
	260, 54, 55, 248, 58, 59, 188, 246, 164, 214,
	218, 219, 181, 249, 225, 189, 131, 301, 290, 51,
	272, 323, 175, 113, 264, 259, 30, 168, 52, 247,
	202, 202, 227, 229, 212, 147, 90, 104, 235, 125,
	273, 213, 174, 174, 218, 245, 239, 179, 99, 100,
	101, 102, 103, 228, 230, 231, 8, 4, 134, 202,
	187, 252, 10, 6, 69, 166, 167, 169, 105, 176,
	170, 193, 1, 22, 5, 21, 20, 261, 68, 218,
	177, 174, 253, 254, 263, 255, 18, 19, 172, 174,
	171, 173, 47, 79, 269, 38, 39, 174, 16, 40,
	45, 46, 41, 44, 218, 282, 174, 43, 268, 42,
	174, 49, 11, 242, 243, 174, 15, 174, 274, 174,
	174, 14, 13, 12, 119, 143, 25, 174, 76, 36,
	174, 7, 285, 174, 130, 297, 0, 0, 0, 292,
	174, 0, 0, 305, 0, 0, 307, 174, 0, 174,
	0, 304, 265, 0, 174, 0, 308, 0, 0, 312,
	270, 0, 29, 321, 0, 0, 317, 0, 277, 319,
	326, 320, 0, 0, 0, 0, 0, 283, 325, 0,
	327, 287, 0, 0, 329, 0, 0, 0, 295, 81,
	0, 298, 0, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 315, 0, 115, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 112, 120, 121, 122, 123, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 135, 0, 0, 0, 137, 138, 139,
	140, 141, 142, 146, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 163, 0,
	51, 53, 62, 60, 61, 0, 182, 112, 56, 52,
	57, 0, 0, 0, 63, 64, 0, 0, 192, 0,
	0, 0, 0, 51, 0, 316, 175, 196, 0, 201,
	0, 168, 52, 65, 66, 0, 0, 54, 55, 0,
	58, 59, 50, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 26, 0, 0, 28, 27, 34, 210, 0,
	0, 31, 30, 0, 0, 0, 32, 0, 33, 166,
	167, 169, 0, 176, 170, 0, 0, 0, 182, 0,
	0, 222, 0, 223, 177, 0, 0, 0, 0, 0,
	201, 201, 0, 0, 0, 0, 233, 234, 0, 238,
	0, 240, 241, 0, 0, 0, 0, 0, 24, 0,
	0, 0, 0, 51, 53, 62, 60, 61, 194, 201,
	0, 56, 52, 57, 0, 0, 0, 63, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 65, 66, 0, 240,
	54, 55, 0, 58, 59, 50, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 26, 0, 0, 28, 27,
	34, 0, 0, 0, 31, 30, 0, 24, 0, 32,
	0, 33, 51, 53, 62, 60, 61, 0, 0, 0,
	56, 52, 57, 0, 67, 0, 63, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 66, 0, 0, 54,
	55, 0, 58, 59, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 26, 0, 0, 28, 27, 34,
	0, 0, 0, 31, 30, 0, 24, 0, 32, 0,
	33, 51, 53, 62, 60, 61, 0, 0, 0, 56,
	52, 57, 0, 9, 0, 63, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 66, 0, 0, 54, 55,
	0, 58, 59, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 26, 0, 0, 28, 27, 34, 90,
	104, 0, 31, 30, 0, 0, 0, 32, 190, 33,
	0, 99, 100, 101, 102, 103, 0, 91, 92, 95,
	96, 97, 98, 84, 85, 87, 86, 88, 94, 93,
	0, 105, 0, 90, 104, 51, 0, 299, 175, 0,
	0, 0, 0, 168, 52, 99, 100, 101, 102, 103,
	89, 91, 92, 95, 96, 97, 98, 84, 85, 87,
	86, 88, 94, 93, 51, 105, 296, 175, 0, 0,
	0, 0, 168, 52, 0, 0, 0, 0, 0, 0,
	0, 166, 167, 169, 89, 176, 170, 0, 0, 51,
	0, 288, 175, 0, 0, 0, 177, 168, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 167, 169, 0, 176, 170, 0, 0, 51, 0,
	284, 175, 0, 0, 0, 177, 168, 52, 0, 0,
	0, 0, 0, 0, 0, 166, 167, 169, 51, 176,
	170, 175, 0, 0, 0, 51, 168, 52, 175, 0,
	177, 0, 0, 168, 52, 0, 0, 165, 0, 0,
	0, 0, 0, 0, 166, 167, 169, 0, 176, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 166, 167, 169, 0, 176, 170,
	0, 166, 167, 169, 0, 176, 170, 0, 0, 177,
	90, 104, 0, 0, 0, 0, 177, 0, 0, 251,
	0, 0, 99, 100, 101, 102, 103, 226, 91, 92,
	95, 96, 97, 98, 90, 104, 0, 0, 0, 94,
	93, 0, 105, 0, 0, 0, 99, 100, 101, 102,
	103, 0, 91, 92, 95, 96, 97, 98, 0, 0,
	0, 89, 0, 94, 93, 0, 105, 0, 90, 104,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	99, 100, 101, 102, 103, 89, 91, 92, 95, 96,
	97, 98, 0, 0, 90, 104, 0, 94, 93, 207,
	105, 0, 0, 0, 0, 0, 99, 100, 101, 102,
	103, 0, 91, 92, 95, 96, 97, 98, 0, 89,
	0, 198, 0, 94, 93, 0, 105, 0, 90, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 101, 102, 103, 89, 91, 92, 95, 96,
	97, 98, 90, 104, 131, 0, 0, 94, 93, 0,
	105, 0, 0, 0, 99, 100, 101, 102, 103, 0,
	91, 92, 95, 96, 97, 98, 90, 104, 0, 89,
	191, 94, 93, 0, 105, 0, 0, 0, 99, 100,
	101, 102, 103, 0, 91, 92, 95, 96, 97, 98,
	90, 104, 0, 89, 0, 94, 93, 0, 105, 190,
	0, 0, 99, 100, 101, 102, 103, 0, 91, 92,
	95, 96, 97, 98, 90, 104, 0, 89, 0, 94,
	93, 0, 105, 0, 0, 0, 99, 100, 101, 102,
	103, 0, 91, 92, 95, 96, 97, 98, 90, 104,
	0, 89, 0, 94, 93, 0, 105, 0, 0, 0,
	99, 100, 101, 102, 103, 0, 91, 92, 95, 96,
	97, 98, 90, 104, 0, 89, 0, 94, 0, 0,
	105, 0, 0, 0, 99, 100, 101, 102, 103, 0,
	91, 92, 95, 96, 97, 98, 0, 0, 0, 89,
	0, 0, 0, 0, 105, 51, 53, 62, 60, 61,
	0, 236, 0, 56, 52, 57, 0, 0, 0, 63,
	64, 0, 0, 89, 0, 0, 51, 53, 62, 60,
	61, 0, 0, 220, 56, 52, 57, 0, 65, 66,
	63, 64, 54, 55, 0, 58, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	66, 0, 0, 54, 55, 197, 58, 59, 0, 0,
	51, 53, 62, 60, 61, 0, 0, 0, 56, 52,
	57, 0, 0, 0, 63, 64, 51, 53, 62, 60,
	61, 0, 144, 0, 56, 52, 57, 0, 0, 0,
	63, 64, 0, 65, 66, 0, 0, 54, 55, 0,
	58, 59, 0, 0, 0, 0, 0, 0, 0, 65,
	66, 0, 0, 54, 55, 136, 58, 59, 0, 0,
	51, 53, 62, 60, 61, 0, 0, 0, 56, 52,
	57, 0, 0, 0, 63, 64, 51, 53, 62, 60,
	61, 118, 0, 0, 56, 52, 57, 0, 0, 0,
	63, 64, 0, 65, 66, 0, 0, 54, 55, 0,
	58, 59, 0, 0, 0, 0, 0, 0, 0, 65,
	66, 0, 0, 54, 55, 0, 58, 59, 51, 53,
	62, 60, 61, 0, 0, 117, 56, 52, 57, 0,
	0, 0, 63, 64, 51, 53, 62, 60, 61, 0,
	0, 0, 56, 52, 57, 0, 0, 0, 63, 64,
	0, 65, 66, 0, 0, 54, 55, 0, 58, 59,
	0, 0, 0, 0, 0, 0, 0, 65, 66, 0,
	0, 54, 55, 0, 58, 59, 51, 53, 62, 60,
	203, 0, 0, 0, 56, 52, 57, 0, 0, 0,
	63, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 104, 0, 65,
	66, 0, 0, 54, 55, 0, 58, 59, 99, 100,
	101, 102, 103, 0, 91, 92, 95, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 105,
}

var yyPact = [...]int16{
	8, 220, 682, -1000, -1000, -1000, 613, 431, 47, -1000,
	76, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -31, 125, -1000, -1000, 772,
	84, 107, 71, 84, 1435, 22, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1435, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1419, 1377, 1435, 1435, 1435, 1435, 197, -1000, -1000, 47,
	36, -1000, -1000, -1000, -1000, 173, -1000, 1435, 173, 224,
	1361, 772, -1000, -1000, 1435, 1435, 1435, 1435, 1435, 1435,
	1317, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
	1435, 1435, 1435, 1435, 1435, 1435, 879, 84, 206, -67,
	886, 188, 1153, 1435, 1435, 1081, 82, -1000, -1000, 171,
	1129, 1105, 24, 24, 24, 1435, 36, -1000, -1000, -1000,
	-1000, 544, 1081, -1000, 1301, 1057, 1477, 1153, 1153, 1153,
	1153, 1153, 1505, 21, -1000, -1000, 1153, 5, 195, 195,
	1177, 1201, 195, 195, 195, 195, 120, 120, 24, 24,
	24, 1023, 63, -1000, 2, 1435, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 110, 192, 200, 84, 104,
	84, -1000, 1153, 188, -1000, 1257, 105, 17, 1435, -1000,
	1435, -1000, 997, 170, -1000, -1000, 963, 1477, 1477, 173,
	-1000, 772, -1000, 35, 1236, 113, 1435, -1000, 1435, 1435,
	1153, 886, 886, 100, 163, 186, 168, -1000, 50, -1000,
	-1000, -1000, 939, 1153, -1000, -1000, 1477, 173, -1000, 173,
	-1000, -1000, -1000, 738, 1153, -1000, -1000, -1000, 1153, 40,
	1153, 1153, -1000, 78, 182, 155, 84, 143, 84, 181,
	6, 1435, 173, -1000, -1000, -1000, 1435, -1000, 886, 139,
	177, 199, 1, -1000, 138, -1000, 886, 1153, -1000, 25,
	-1000, -55, 126, 80, -1000, 859, 0, -1000, -1000, 830,
	-57, 175, 154, 173, 886, -1000, 805, -1000, 886, 776,
	119, 174, -1000, 151, -1000, 173, 886, 150, -1000, 886,
	-1, 116, 886, 173, -1000, 149, -1000, 146, -1000, 454,
	-2, -1000, -1000, 173, -1000, 173, 886, -1000, 180, -1000,
	-1000, 112, 173, 886, 173, -1000, 109, -1000, 173, -1000,
}

var yyPgo = [...]int16{
	0, 25, 304, 241, 301, 299, 298, 296, 295, 8,
	294, 226, 2, 293, 292, 291, 286, 282, 281, 3,
	0, 279, 277, 273, 272, 271, 270, 37, 332, 269,
	268, 7, 266, 265, 263, 4, 262, 71, 261, 260,
	258, 28, 257, 256, 246, 245, 243, 1, 5, 242,
	20, 232, 230, 6, 16,
}

var yyR1 = [...]int8{
	0, 50, 50, 50, 50, 51, 51, 51, 52, 52,
	53, 53, 49, 49, 49, 49, 49, 3, 3, 3,
	4, 4, 4, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 30, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 39,
	40, 41, 41, 41, 38, 38, 38, 38, 38, 38,
	44, 44, 45, 48, 48, 48, 46, 46, 47, 47,
	54, 54, 42, 42, 42, 42, 42, 42, 43, 43,
	43, 43, 43, 43, 9, 9, 12, 12, 12, 12,
	12, 12, 27, 16, 15, 13, 34, 34, 34, 35,
	35, 14, 14, 14, 14, 14, 14, 14, 14, 17,
	17, 5, 7, 7, 6, 1, 1, 2, 8, 8,
	8, 8, 19, 18, 18, 18, 21, 21, 21, 22,
	22, 22, 22, 22, 22, 22, 22, 23, 23, 23,
	23, 23, 24, 25, 25, 26, 31, 31, 36, 36,
	32, 32, 32, 10, 10, 29, 29, 20, 20, 33,
	33, 33, 33, 33, 33, 33,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 1, 2, 2, 1, 2,
	1, 0, 2, 2, 3, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 5, 3, 4, 5, 7, 9, 6, 8, 10,
	2, 4, 3, 1, 3, 4, 1, 2, 1, 3,
	1, 3, 11, 13, 15, 12, 14, 16, 7, 9,
	11, 8, 10, 12, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 3, 1, 1, 1, 1,
	1, 7, 6, 6, 5, 6, 5, 5, 4, 1,
	3, 3, 1, 2, 3, 1, 3, 2, 3, 3,
	1, 1, 3, 5, 5, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 3, 1, 0, 8, 6,
	4, 4, 2, 3, 5, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -49, 84, 2, 7, -3, -52, -4, -11, 21,
	-51, -17, -13, -14, -15, -16, -30, -41, -43, -42,
	-44, -45, -46, -12, 4, -7, 61, 65, 64, -28,
	71, 70, 75, 77, 66, -9, -5, -20, -33, -32,
	-29, -24, -21, -22, -23, -26, -25, -36, -27, -18,
	51, 9, 18, 10, 46, 47, 17, 19, 49, 50,
	12, 13, 11, 23, 24, 42, 43, 21, -3, -11,
	-50, 4, 21, 21, 4, 53, -6, 52, -27, -34,
	4, -28, -12, -41, 35, 36, 38, 37, 39, 62,
	11, 29, 30, 41, 40, 31, 32, 33, 34, 23,
	24, 25, 26, 27, 12, 43, -20, 13, -20, 17,
	-20, -9, -28, 5, 28, -28, -9, 16, 14, -10,
	-28, -28, -28, -28, -28, 12, -50, 4, 21, -1,
	-2, 13, -28, -1, 4, -28, 4, -28, -28, -28,
	-28, -28, -28, -8, 15, -19, -28, -20, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, -31, -28, -37, 28, 55, 56, 17, 57,
	60, -39, -40, -38, -20, 12, 59, 70, -20, 11,
	76, -37, -28, -9, -1, 5, -53, -52, 5, 14,
	20, 15, -28, -3, 14, -1, -28, 4, 4, -35,
	-1, -28, -12, 13, 5, -53, 28, 16, 20, 28,
	-28, 16, 12, 11, -20, 15, -47, -48, -20, -20,
	16, 16, -28, -28, 16, 14, 4, -35, -1, -35,
	-1, -1, 14, -28, -28, -19, 15, 15, -28, -31,
	-28, -28, -37, -37, 15, -47, 14, 13, 5, 15,
	20, 20, -35, -1, -1, -1, 20, 16, 16, 13,
	15, -20, 14, -48, 13, -37, 73, -28, -1, -31,
	-37, 14, 13, 11, -1, 74, 14, -37, 16, 74,
	14, 15, -47, -37, 11, -1, 74, -37, 11, 74,
	13, 15, -1, -54, -37, -37, 11, -54, -37, 11,
	14, 13, 5, 15, -1, -54, 15, -54, -1, 74,
	14, -37, -1, 15, 15, -37, 11, -1, 74, -1,
	-1, -54, -37, 11, 15, -1, -54, -1, 15, -1,
}

var yyDef = [...]int16{
	0, -2, 0, 16, 15, 12, 13, 18, 19, 8,
	21, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 5, 119, 0, 104, 103, -2,
	0, 0, 0, 0, 76, 0, 122, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	0, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	0, 0, 0, 0, 0, 0, 0, 9, 14, 17,
	20, 1, 2, 6, 7, 0, 123, 0, 48, 0,
	0, -2, 107, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 70,
	0, 77, 94, 0, 0, 0, 11, 162, 165, 0,
	0, 0, 136, 137, 138, 0, 22, 3, 4, 120,
	125, 0, 0, 105, 0, 0, 0, 97, 98, 99,
	100, 101, 102, 11, 135, 130, 131, 37, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 156, 0, 155, 62, 0, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 0, 0, 0, 0,
	0, 72, 95, 96, 121, 0, 0, 10, 0, 166,
	0, 152, 0, 0, 127, 124, 0, 0, 0, 0,
	118, -2, 110, 0, 0, 0, 0, 153, 157, 0,
	63, 0, 0, 0, 0, 0, 0, 78, 73, 71,
	161, 160, 0, 163, 154, 126, 0, 0, 114, 0,
	116, 117, -2, -2, 128, 129, 134, 133, 132, 0,
	156, 61, 59, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 113, 115, 157, 159, 0, 0,
	0, 0, 0, 79, 0, 74, 0, 164, 111, 0,
	60, 64, 0, 0, 88, 0, 0, 75, 158, 0,
	67, 0, 0, 0, 0, 91, 0, 65, 0, 0,
	0, 0, 89, 0, 80, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 92, 0, 66, 0, 82, 0,
	0, 81, 90, 0, 69, 0, 0, 85, 0, 93,
	83, 0, 0, 0, 0, 86, 0, 84, 0, 87,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:176
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:180
		{
			yylex.(*parser).parseResult = ast.Stmts{}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:184
		{
			yylex.(*parser).parseResult = yyDollar[3].aststmts
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:189
		{
			yylex.(*parser).unexpected("", "")
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:199
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:206
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:212
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:216
		{
			yyVAL.aststmts = ast.Stmts{}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:220
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:269
		{
			yyVAL.node = nil
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:273
		{
			yyVAL.node = nil
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:277
		{
			yyVAL.node = nil
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:281
		{
			yyVAL.node = nil
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:285
		{
			yyVAL.node = nil
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:296
		{
			yyVAL.node = nil
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:302
		{
			yyVAL.node = nil
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:308
		{
			yyVAL.node = nil
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:312
		{
			yyVAL.node = nil
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:316
		{
			yyVAL.node = nil
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:323
		{
			yyVAL.node = nil
		}
	case 65:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:327
		{
			yyVAL.node = nil
		}
	case 66:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:331
		{
			yyVAL.node = nil
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:335
		{
			yyVAL.node = nil
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:339
		{
			yyVAL.node = nil
		}
	case 69:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:343
		{
			yyVAL.node = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:354
		{
			yyVAL.node = nil
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:358
		{
			yyVAL.node = nil
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:365
		{
			yyVAL.node = nil
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:372
		{
			yyVAL.fnparams = nil
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:376
		{
			yyVAL.fnparams = nil
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:380
		{
			yyVAL.fnparams = nil
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:399
		{
			yyVAL.node = nil
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:403
		{
			yyVAL.node = nil
		}
	case 82:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:420
		{
			yyVAL.node = nil
		}
	case 83:
		yyDollar = yyS[yypt-13 : yypt+1]
//line gram.y:424
		{
			yyVAL.node = nil
		}
	case 84:
		yyDollar = yyS[yypt-15 : yypt+1]
//line gram.y:428
		{
			yyVAL.node = nil
		}
	case 85:
		yyDollar = yyS[yypt-12 : yypt+1]
//line gram.y:432
		{
			yyVAL.node = nil
		}
	case 86:
		yyDollar = yyS[yypt-14 : yypt+1]
//line gram.y:436
		{
			yyVAL.node = nil
		}
	case 87:
		yyDollar = yyS[yypt-16 : yypt+1]
//line gram.y:440
		{
			yyVAL.node = nil
		}
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:448
		{
			yyVAL.node = nil
		}
	case 89:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:452
		{
			yyVAL.node = nil
		}
	case 90:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:456
		{
			yyVAL.node = nil
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:460
		{
			yyVAL.node = nil
		}
	case 92:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:464
		{
			yyVAL.node = nil
		}
	case 93:
		yyDollar = yyS[yypt-12 : yypt+1]
//line gram.y:468
		{
			yyVAL.node = nil
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:474
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:478
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:485
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				yyDollar[1].nodes, yyDollar[3].nodes, yyDollar[2].item)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:490
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:495
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:500
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:505
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:510
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:518
		{
			yyVAL.node = yylex.(*parser).newInExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:525
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:532
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:543
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 111:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:562
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:566
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:570
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:574
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:578
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[3].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:582
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[3].node, nil, nil, yyDollar[5].astblock)
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:586
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:590
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, nil, nil, nil, yyDollar[4].astblock)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:597
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:601
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:607
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:613
		{
			yyVAL.iflist = []*ast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:617
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:623
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:631
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[3].item, yyDollar[2].aststmts)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:638
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:649
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:653
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:657
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:661
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:667
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt([]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:674
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:678
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:682
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[3].item, yyDollar[1].node, nil)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:688
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:692
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:696
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:702
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:706
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:710
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:714
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:718
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:722
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:726
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:730
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:737
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:741
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:745
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:749
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:753
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:760
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[3].item, yyDollar[2].node)
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:767
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[2].item, yyDollar[4].item, yyDollar[1].node, yyDollar[3].node)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:771
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[2].item, yyDollar[4].item, nil, yyDollar[3].node, yyDollar[1].item)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:778
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:785
		{
			yyVAL.node = yyDollar[1].node
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:789
		{
			yyVAL.node = nil
		}
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:796
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[2].item, yyDollar[8].item, yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:800
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[2].item, yyDollar[6].item, yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:833
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[4].item, yyDollar[2].nodes)
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:837
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[4].item, yyDollar[2].nodes)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:841
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:847
		{
			yyVAL.map_nodes = [][2]ast.Node{[2]ast.Node{yyDollar[1].node, yyDollar[2].item}}
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:851
		{
			yyVAL.map_nodes = append(yyVAL.map_nodes, [2]ast.Node{yyDollar[3].node, yyDollar[5].node})
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:857
		{
			yyVAL.node = yylex.(*parser).newMapLiteral(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:861
		{
			yyVAL.node = yylex.(*parser).newMapLiteral(yyDollar[1].item, yyDollar[3].item, yyDollar[2].map_nodes)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:868
		{
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:872
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:879
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:883
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:887
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:891
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:896
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:901
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:905
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
