// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	ast "github.com/GuanceCloud/platypus/pkg/v2/ast"
)

//line gram.y:15
type yySymType struct {
	yys      int
	aststmts ast.Stmts
	astblock *ast.BlockStmt

	classbody any
	fnparams  any

	ifitem    *ast.IfStmtElem
	iflist    []*ast.IfStmtElem
	node      ast.Node
	nodes     []ast.Node
	map_nodes [][2]ast.Node
	item      Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const EOF = 57349
const ERROR = 57350
const ID = 57351
const NUMBER = 57352
const LEFT_PAREN = 57353
const LEFT_BRACKET = 57354
const LEFT_BRACE = 57355
const RIGHT_BRACE = 57356
const RIGHT_PAREN = 57357
const RIGHT_BRACKET = 57358
const STRING = 57359
const QUOTED_STRING = 57360
const MULTILINE_STRING = 57361
const COLON = 57362
const EOL = 57363
const operatorsStart = 57364
const ADD = 57365
const SUB = 57366
const MUL = 57367
const DIV = 57368
const MOD = 57369
const EQ = 57370
const GTE = 57371
const GT = 57372
const LT = 57373
const LTE = 57374
const NEQ = 57375
const EQEQ = 57376
const ADD_EQ = 57377
const SUB_EQ = 57378
const DIV_EQ = 57379
const MUL_EQ = 57380
const MOD_EQ = 57381
const AND = 57382
const OR = 57383
const NOT = 57384
const DOT = 57385
const operatorsEnd = 57386
const keywordsStart = 57387
const TRUE = 57388
const FALSE = 57389
const CLASS = 57390
const NIL = 57391
const NULL = 57392
const IF = 57393
const ELIF = 57394
const ELSE = 57395
const STR = 57396
const INT = 57397
const FLOAT = 57398
const BOOL = 57399
const LIST = 57400
const MAP = 57401
const ANY = 57402
const FOR = 57403
const IN = 57404
const WHILE = 57405
const BREAK = 57406
const CONTINUE = 57407
const RETURN = 57408
const SWITCH = 57409
const CASE = 57410
const GOTO = 57411
const FN = 57412
const LET = 57413
const VAR = 57414
const VAR_ARG = 57415
const FN_RET = 57416
const IMPORT = 57417
const AS = 57418
const TYPE = 57419
const NEW = 57420
const MAKE = 57421
const INTERFACE = 57422
const CONST = 57423
const keywordsEnd = 57424
const startSymbolsStart = 57425
const START_STMTS = 57426
const startSymbolsEnd = 57427
const UMINUS = 57428

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"COLON",
	"EOL",
	"operatorsStart",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"EQ",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"NEQ",
	"EQEQ",
	"ADD_EQ",
	"SUB_EQ",
	"DIV_EQ",
	"MUL_EQ",
	"MOD_EQ",
	"AND",
	"OR",
	"NOT",
	"DOT",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"CLASS",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"ANY",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"SWITCH",
	"CASE",
	"GOTO",
	"FN",
	"LET",
	"VAR",
	"VAR_ARG",
	"FN_RET",
	"IMPORT",
	"AS",
	"TYPE",
	"NEW",
	"MAKE",
	"INTERFACE",
	"CONST",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:934

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 78,
	4, 109,
	-2, 97,
	-1, 242,
	1, 128,
	4, 128,
	7, 128,
	14, 128,
	21, 128,
	-2, 171,
}

const yyPrivate = 57344

const yyLast = 1744

var yyAct = [...]int16{
	34, 157, 168, 225, 140, 224, 81, 111, 178, 3,
	124, 49, 51, 62, 58, 59, 310, 124, 299, 54,
	50, 55, 173, 135, 124, 63, 64, 74, 72, 99,
	101, 122, 103, 8, 216, 124, 263, 83, 97, 104,
	314, 69, 106, 70, 65, 66, 136, 49, 52, 53,
	172, 56, 57, 48, 215, 163, 50, 213, 21, 102,
	71, 67, 15, 24, 298, 109, 26, 25, 32, 98,
	135, 339, 29, 28, 46, 22, 234, 30, 330, 31,
	49, 184, 344, 172, 142, 307, 174, 80, 163, 50,
	61, 2, 218, 161, 162, 164, 295, 67, 165, 75,
	170, 176, 121, 277, 170, 331, 49, 126, 173, 170,
	278, 285, 271, 321, 180, 50, 270, 300, 175, 174,
	188, 170, 190, 49, 296, 323, 161, 162, 164, 302,
	67, 165, 50, 83, 97, 349, 124, 49, 60, 182,
	172, 173, 323, 210, 289, 163, 50, 94, 95, 96,
	323, 175, 345, 49, 83, 97, 160, 197, 275, 322,
	335, 202, 50, 323, 323, 98, 92, 93, 94, 95,
	96, 49, 323, 334, 327, 100, 174, 222, 226, 227,
	50, 311, 324, 161, 162, 164, 98, 67, 165, 281,
	167, 49, 49, 261, 167, 261, 256, 254, 173, 167,
	50, 50, 290, 312, 49, 273, 259, 235, 175, 49,
	251, 167, 142, 50, 261, 223, 245, 248, 50, 170,
	226, 255, 258, 315, 262, 252, 211, 283, 185, 272,
	135, 238, 240, 241, 120, 170, 212, 232, 166, 231,
	260, 49, 166, 337, 172, 119, 185, 166, 185, 163,
	50, 221, 220, 114, 274, 228, 170, 186, 113, 166,
	280, 279, 226, 106, 170, 282, 293, 219, 267, 268,
	177, 269, 288, 4, 7, 170, 135, 127, 1, 292,
	174, 68, 195, 257, 253, 5, 170, 161, 162, 164,
	20, 67, 165, 19, 226, 301, 170, 18, 287, 303,
	170, 16, 173, 17, 169, 45, 170, 171, 170, 167,
	170, 170, 175, 294, 76, 35, 36, 38, 170, 14,
	37, 170, 43, 159, 170, 167, 44, 179, 306, 39,
	42, 170, 183, 41, 40, 47, 313, 9, 170, 13,
	170, 12, 11, 10, 194, 170, 167, 79, 325, 138,
	318, 23, 73, 329, 167, 33, 333, 166, 326, 6,
	123, 328, 0, 338, 0, 167, 340, 0, 341, 0,
	0, 0, 0, 166, 0, 346, 167, 348, 342, 0,
	0, 350, 0, 0, 0, 347, 167, 0, 0, 0,
	167, 0, 0, 0, 166, 0, 167, 0, 167, 0,
	167, 167, 166, 0, 0, 0, 0, 0, 167, 0,
	0, 167, 0, 166, 167, 0, 0, 0, 0, 0,
	0, 167, 0, 0, 166, 0, 0, 0, 167, 0,
	167, 0, 0, 0, 166, 167, 0, 0, 166, 0,
	0, 0, 183, 0, 166, 0, 166, 0, 166, 166,
	0, 0, 0, 0, 0, 49, 166, 0, 265, 166,
	0, 0, 166, 163, 50, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 0, 166, 0, 166, 276,
	0, 0, 49, 166, 320, 172, 105, 284, 0, 27,
	163, 50, 0, 27, 174, 0, 0, 0, 291, 0,
	0, 161, 162, 164, 0, 67, 165, 0, 0, 297,
	0, 78, 0, 0, 0, 0, 173, 0, 0, 304,
	0, 174, 0, 308, 0, 0, 175, 0, 161, 162,
	164, 316, 67, 165, 319, 107, 0, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 112, 332, 0, 115,
	116, 117, 118, 175, 336, 0, 0, 0, 0, 0,
	0, 125, 0, 343, 128, 0, 0, 0, 0, 137,
	141, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 158, 0, 49, 0, 317,
	172, 0, 0, 112, 0, 163, 50, 0, 0, 0,
	0, 112, 0, 0, 49, 0, 193, 172, 0, 0,
	0, 27, 163, 50, 198, 0, 201, 204, 205, 206,
	207, 208, 209, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 161, 162, 164, 0, 67, 165, 0,
	0, 0, 0, 174, 0, 0, 0, 217, 173, 0,
	161, 162, 164, 0, 67, 165, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 0,
	0, 0, 229, 0, 230, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 237, 239, 0, 0,
	243, 0, 0, 0, 0, 0, 0, 0, 244, 21,
	247, 0, 249, 250, 49, 51, 62, 58, 59, 242,
	0, 0, 54, 50, 55, 0, 22, 0, 63, 64,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 66, 0,
	0, 52, 53, 0, 56, 57, 48, 0, 0, 0,
	0, 286, 0, 0, 67, 0, 24, 249, 0, 26,
	25, 32, 0, 0, 0, 29, 28, 0, 21, 0,
	30, 0, 31, 49, 51, 62, 58, 59, 196, 0,
	0, 54, 50, 55, 0, 22, 0, 63, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 66, 0, 0,
	52, 53, 0, 56, 57, 48, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 24, 0, 0, 26, 25,
	32, 0, 0, 0, 29, 28, 0, 21, 0, 30,
	0, 31, 49, 51, 62, 58, 59, 0, 0, 0,
	54, 50, 55, 0, 22, 0, 63, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 66, 0, 0, 52,
	53, 0, 56, 57, 48, 0, 0, 49, 0, 309,
	172, 0, 67, 0, 24, 163, 50, 26, 25, 32,
	0, 0, 0, 29, 28, 0, 0, 0, 30, 0,
	31, 0, 0, 49, 0, 305, 172, 0, 0, 0,
	0, 163, 50, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 161, 162, 164, 0, 67, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 175, 161,
	162, 164, 77, 67, 165, 0, 0, 49, 51, 62,
	58, 59, 0, 0, 173, 54, 50, 55, 0, 0,
	0, 63, 64, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 66, 0, 0, 52, 53, 0, 56, 57, 0,
	0, 0, 83, 97, 0, 0, 0, 67, 0, 0,
	0, 0, 0, 0, 92, 93, 94, 95, 96, 28,
	84, 85, 88, 89, 90, 91, 130, 131, 133, 132,
	134, 87, 86, 0, 98, 0, 83, 97, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 82, 84, 85, 88, 89, 90, 91,
	83, 97, 0, 0, 0, 87, 86, 0, 98, 187,
	0, 0, 92, 93, 94, 95, 96, 0, 84, 85,
	88, 89, 90, 91, 83, 97, 0, 82, 0, 87,
	86, 0, 98, 264, 0, 0, 92, 93, 94, 95,
	96, 236, 84, 85, 88, 89, 90, 91, 83, 97,
	0, 82, 0, 87, 86, 0, 98, 0, 0, 0,
	92, 93, 94, 95, 96, 0, 84, 85, 88, 89,
	90, 91, 0, 0, 0, 82, 0, 87, 86, 0,
	98, 0, 83, 97, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 0, 92, 93, 94, 95, 96, 82,
	84, 85, 88, 89, 90, 91, 0, 0, 83, 97,
	0, 87, 86, 214, 98, 0, 0, 0, 0, 0,
	92, 93, 94, 95, 96, 0, 84, 85, 88, 89,
	90, 91, 0, 82, 0, 200, 0, 87, 86, 0,
	98, 0, 83, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 94, 95, 96, 82,
	84, 85, 88, 89, 90, 91, 83, 97, 0, 0,
	192, 87, 86, 0, 98, 0, 0, 0, 92, 93,
	94, 95, 96, 0, 84, 85, 88, 89, 90, 91,
	83, 97, 0, 82, 0, 87, 86, 0, 98, 0,
	0, 0, 92, 93, 94, 95, 96, 0, 84, 85,
	88, 89, 90, 91, 83, 97, 0, 82, 0, 87,
	86, 0, 98, 0, 0, 0, 92, 93, 94, 95,
	96, 0, 84, 85, 88, 89, 90, 91, 0, 0,
	0, 82, 0, 87, 0, 0, 98, 49, 51, 62,
	58, 59, 0, 246, 0, 54, 50, 55, 0, 0,
	0, 63, 64, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 66, 0, 0, 52, 53, 0, 56, 57, 83,
	97, 0, 0, 0, 0, 0, 0, 67, 0, 0,
	0, 92, 93, 94, 95, 96, 0, 84, 85, 88,
	89, 90, 91, 0, 0, 0, 0, 199, 0, 0,
	0, 98, 49, 51, 62, 58, 59, 0, 0, 0,
	54, 50, 55, 0, 0, 0, 63, 64, 0, 0,
	82, 0, 0, 49, 51, 62, 58, 59, 191, 0,
	0, 54, 50, 55, 0, 65, 66, 63, 64, 52,
	53, 0, 56, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 0, 0, 65, 66, 0, 0,
	52, 53, 0, 56, 57, 0, 49, 51, 62, 58,
	59, 189, 0, 67, 54, 50, 55, 0, 0, 0,
	63, 64, 0, 0, 0, 0, 0, 49, 51, 62,
	58, 59, 181, 0, 0, 54, 50, 55, 0, 65,
	66, 63, 64, 52, 53, 0, 56, 57, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	65, 66, 0, 0, 52, 53, 0, 56, 57, 0,
	49, 51, 62, 58, 59, 0, 139, 67, 54, 50,
	55, 0, 0, 0, 63, 64, 129, 0, 0, 0,
	0, 49, 51, 62, 58, 59, 0, 0, 0, 54,
	50, 55, 0, 65, 66, 63, 64, 52, 53, 0,
	56, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 65, 66, 0, 0, 52, 53,
	0, 56, 57, 0, 49, 51, 62, 58, 59, 110,
	0, 67, 54, 50, 55, 0, 0, 0, 63, 64,
	0, 0, 0, 0, 0, 49, 51, 62, 58, 59,
	0, 0, 108, 54, 50, 55, 0, 65, 66, 63,
	64, 52, 53, 0, 56, 57, 0, 0, 0, 0,
	0, 0, 0, 0, 67, 0, 0, 0, 65, 66,
	0, 0, 52, 53, 0, 56, 57, 0, 49, 51,
	62, 58, 59, 0, 0, 67, 54, 50, 55, 0,
	0, 0, 63, 64, 0, 0, 0, 0, 0, 49,
	51, 62, 58, 203, 0, 0, 0, 54, 50, 55,
	0, 65, 66, 63, 64, 52, 53, 0, 56, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 67, 0,
	0, 0, 65, 66, 0, 0, 52, 53, 0, 56,
	57, 83, 97, 0, 0, 0, 0, 0, 0, 67,
	0, 0, 0, 92, 93, 94, 95, 96, 0, 84,
	85, 88, 89, 90, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 98,
}

var yyPact = [...]int16{
	7, 266, 833, -1000, -1000, -1000, 2, 54, 39, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -25, 958, -1000, -1000, 1249, 97, 162,
	42, 97, 1639, -1000, 250, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1639, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1596, 1575,
	245, 240, 1639, 1639, 1639, 1639, 233, 222, 54, 39,
	-1000, -1000, 123, -1000, 1639, 123, 273, 1532, 1001, -1000,
	-1000, 18, 1639, 1511, 1639, 1639, 1639, 1639, 1639, 1639,
	1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 128,
	97, 259, -68, 595, 271, 1249, 1468, 1035, 446, 65,
	-1000, 243, 1059, 1447, 1404, 1225, 26, 26, 26, 1639,
	595, 39, -1000, -1000, 764, 1035, -1000, 1383, 1201, 1660,
	1639, 1639, 1639, 1639, 1639, 1639, 1639, 1700, 221, -1000,
	-1000, 1249, 29, 143, 143, 1273, 1348, 143, 143, 143,
	143, 122, 122, 26, 26, 26, 1167, 34, -1000, 6,
	1639, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 76, 256, 239, 238, 97, 200, 97, -1000,
	241, -1000, -1000, -1000, -1000, 1639, -1000, 1639, 225, -1000,
	223, -1000, -1000, 1141, 60, 193, -1000, -1000, 1107, 1660,
	1660, 1035, -1000, 695, 1249, 1249, 1249, 1249, 1249, 1249,
	271, 1308, -1000, 1639, -1000, 1639, 1639, 1249, 595, 195,
	183, 182, 192, 227, 209, -1000, 16, -1000, -1000, 1083,
	1249, -1000, -1000, -1000, 595, -1000, 1660, 1035, -1000, 1035,
	-1000, -1000, -1000, 1059, 1249, -1000, -1000, 1249, 96, 1249,
	1249, 216, 190, 144, -1000, 595, -1000, 89, -48, 97,
	175, 97, 214, 38, 1639, -1000, 1035, -1000, -1000, -1000,
	1639, -1000, 130, 189, 595, -1000, -1000, -1000, 97, -1000,
	255, 22, -1000, 110, -1000, 595, 1249, -1000, 48, -56,
	103, -1000, -48, 114, -1000, 904, 11, -1000, -1000, 878,
	-58, -1000, 168, 188, 123, 595, -1000, 578, -1000, 595,
	473, 99, 146, -1000, 167, -1000, 123, 595, 159, -1000,
	595, 4, 91, 595, 123, -1000, 158, -1000, 145, -1000,
	232, -3, -1000, -1000, 123, -1000, 123, 595, -1000, 71,
	-1000, -1000, 137, 123, 595, 123, -1000, 120, -1000, 123,
	-1000,
}

var yyPgo = [...]int16{
	0, 31, 360, 282, 359, 355, 352, 351, 349, 6,
	7, 274, 347, 343, 342, 341, 339, 337, 335, 4,
	0, 334, 333, 330, 329, 326, 322, 74, 486, 320,
	319, 1, 317, 316, 315, 314, 307, 305, 223, 2,
	138, 90, 62, 304, 303, 301, 297, 293, 290, 284,
	5, 3, 283, 278, 33, 40,
}

var yyR1 = [...]int8{
	0, 54, 54, 54, 54, 53, 53, 53, 53, 3,
	3, 3, 4, 4, 4, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 30, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 40, 41, 42, 42, 42, 49, 49,
	39, 39, 39, 39, 39, 39, 43, 43, 36, 36,
	46, 46, 52, 52, 52, 47, 51, 51, 51, 48,
	48, 50, 50, 55, 55, 44, 44, 44, 44, 44,
	44, 45, 45, 45, 45, 45, 45, 9, 9, 12,
	12, 12, 12, 12, 12, 27, 16, 15, 13, 35,
	35, 35, 14, 14, 14, 14, 14, 14, 14, 14,
	17, 17, 5, 7, 7, 6, 1, 1, 2, 8,
	8, 8, 8, 19, 18, 18, 18, 21, 21, 21,
	22, 22, 22, 22, 22, 22, 22, 22, 23, 23,
	23, 23, 23, 24, 25, 25, 26, 31, 31, 37,
	37, 32, 32, 32, 32, 32, 32, 33, 33, 10,
	10, 29, 29, 20, 20, 34, 34, 34, 34, 34,
	34, 34,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 5, 3, 4, 2, 3,
	5, 7, 9, 6, 8, 10, 4, 3, 3, 4,
	2, 4, 2, 4, 2, 3, 1, 3, 4, 1,
	2, 1, 3, 1, 3, 11, 13, 15, 12, 14,
	16, 7, 9, 11, 8, 10, 12, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 3, 1,
	1, 1, 7, 6, 6, 5, 6, 5, 5, 4,
	1, 3, 3, 1, 2, 3, 1, 3, 2, 3,
	3, 1, 1, 3, 4, 5, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 3, 1, 0, 8,
	6, 4, 3, 4, 3, 4, 3, 3, 2, 3,
	5, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -53, 84, 2, 7, -3, -4, -11, -54, -17,
	-13, -14, -15, -16, -30, -42, -45, -44, -46, -47,
	-48, 4, 21, -7, 61, 65, 64, -28, 71, 70,
	75, 77, 66, -5, -20, -34, -33, -29, -32, -24,
	-21, -22, -23, -26, -25, -37, -27, -18, 51, 9,
	18, 10, 46, 47, 17, 19, 49, 50, 12, 13,
	-40, -41, 11, 23, 24, 42, 43, 59, -11, -54,
	4, 21, 53, -6, 52, -27, -35, 4, -28, -12,
	-42, -9, 62, 11, 29, 30, 41, 40, 31, 32,
	33, 34, 23, 24, 25, 26, 27, 12, 43, -20,
	13, -20, 17, -20, -9, -28, 13, -28, 16, -9,
	14, -10, -28, 13, 13, -28, -28, -28, -28, 12,
	12, -54, -1, -2, 13, -28, -1, 4, -28, 4,
	35, 36, 38, 37, 39, 5, 28, -28, -8, 15,
	-19, -28, -20, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -31, -28, -38,
	28, 55, 56, 17, 57, 60, -40, -41, -39, -43,
	-20, -36, 12, 70, 48, 80, -20, 11, 76, -38,
	-10, 14, -1, -38, 16, 5, 14, 20, -9, 14,
	-10, 14, 15, -28, -38, -3, 14, -1, -28, 4,
	4, -28, -1, 13, -28, -28, -28, -28, -28, -28,
	-9, 5, 15, 28, 16, 20, 28, -28, 16, 11,
	13, 13, -20, 15, -50, -51, -20, -20, 14, -28,
	-28, 14, 14, 16, 16, 14, 4, -28, -1, -28,
	-1, -1, 14, -28, -28, -19, 15, -28, -31, -28,
	-28, 15, -50, -49, 14, -20, 14, -52, -20, 14,
	13, 5, 15, 20, 20, -38, -28, -1, -1, -1,
	20, 16, 13, 15, -20, 14, -38, 14, 21, -39,
	-20, 14, -51, 13, -38, 73, -28, -1, -31, 14,
	13, -38, -20, 11, -1, 74, 14, -38, 16, 74,
	14, -39, 15, -50, -38, 11, -1, 74, -38, 11,
	74, 13, 15, -1, -55, -38, -38, 11, -55, -38,
	11, 14, 13, 5, 15, -1, -55, 15, -55, -1,
	74, 14, -38, -1, 15, 15, -38, 11, -1, 74,
	-1, -1, -55, -38, 11, 15, -1, -55, -1, 15,
	-1,
}

var yyDef = [...]int16{
	0, -2, 6, 8, 7, 5, 10, 11, 13, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 1, 2, 120, 0, 107, 106, 27, 0, 0,
	0, 0, 79, 123, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 0, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 9, 12,
	3, 4, 0, 124, 0, 40, 0, 0, -2, 110,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 0, 0,
	0, 0, 70, 0, 80, 97, 0, 0, 168, 0,
	171, 0, 0, 0, 0, 0, 137, 138, 139, 0,
	0, 14, 121, 126, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 136,
	131, 132, 28, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 157, 0, 156, 56,
	0, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 162, 122, 53, 167, 0, 172, 0, 0, 164,
	0, 166, 153, 0, 0, 0, 128, 125, 0, 0,
	0, 0, 119, 0, 100, 101, 102, 103, 104, 98,
	99, 0, 134, 0, 154, 158, 0, 57, 0, 0,
	0, 0, 0, 0, 0, 81, 76, 71, 161, 0,
	169, 163, 165, 155, 0, 127, 0, 0, 115, 0,
	117, 118, -2, 27, 129, 130, 135, 133, 0, 157,
	55, 0, 0, 0, 67, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 113, 114, 116,
	158, 160, 0, 0, 0, 66, 58, 69, 74, 72,
	0, 0, 82, 0, 77, 0, 170, 112, 0, 60,
	0, 59, 0, 0, 91, 0, 0, 78, 159, 0,
	63, 73, 0, 0, 0, 0, 94, 0, 61, 0,
	0, 0, 0, 92, 0, 83, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 95, 0, 62, 0, 85,
	0, 0, 84, 93, 0, 65, 0, 0, 88, 0,
	96, 86, 0, 0, 0, 0, 89, 0, 87, 0,
	90,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:167
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:171
		{
			yylex.(*parser).parseResult = ast.Stmts{}
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:176
		{
			yylex.(*parser).unexpected("", "")
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:186
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:193
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:199
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:203
		{
			yyVAL.aststmts = ast.Stmts{}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:207
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:230
		{
			yyVAL.node = nil
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:258
		{
			yyVAL.node = nil
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:262
		{
			yyVAL.node = nil
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:266
		{
			yyVAL.node = nil
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:270
		{
			yyVAL.node = nil
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:274
		{
			yyVAL.node = nil
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:287
		{
			yyVAL.node = nil
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:293
		{
			yyVAL.node = nil
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:299
		{
			yyVAL.node = nil
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:303
		{
			yyVAL.node = nil
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:307
		{
			yyVAL.node = nil
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:314
		{
			yyVAL.classbody = nil

		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:319
		{
			yyVAL.classbody = nil
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:326
		{
			yyVAL.node = nil
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:330
		{
			yyVAL.node = nil
		}
	case 62:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:334
		{
			yyVAL.node = nil
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:338
		{
			yyVAL.node = nil
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:342
		{
			yyVAL.node = nil
		}
	case 65:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:346
		{
			yyVAL.node = nil
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:353
		{
			yyVAL.node = nil
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:357
		{
			yyVAL.node = nil
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:364
		{
			yyVAL.node = nil
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:368
		{
			yyVAL.node = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:378
		{
			yyVAL.node = nil
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:382
		{
			yyVAL.node = nil
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:389
		{
			yyVAL.fnparams = nil
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:393
		{
			yyVAL.fnparams = nil
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:397
		{
			yyVAL.fnparams = nil
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:403
		{
			yyVAL.node = nil
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:410
		{
			yyVAL.fnparams = nil
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:414
		{
			yyVAL.fnparams = nil
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:418
		{
			yyVAL.fnparams = nil
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:437
		{
			yyVAL.node = nil
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:441
		{
			yyVAL.node = nil
		}
	case 85:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:458
		{
			yyVAL.node = nil
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line gram.y:462
		{
			yyVAL.node = nil
		}
	case 87:
		yyDollar = yyS[yypt-15 : yypt+1]
//line gram.y:466
		{
			yyVAL.node = nil
		}
	case 88:
		yyDollar = yyS[yypt-12 : yypt+1]
//line gram.y:470
		{
			yyVAL.node = nil
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line gram.y:474
		{
			yyVAL.node = nil
		}
	case 90:
		yyDollar = yyS[yypt-16 : yypt+1]
//line gram.y:478
		{
			yyVAL.node = nil
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:486
		{
			yyVAL.node = nil
		}
	case 92:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:490
		{
			yyVAL.node = nil
		}
	case 93:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:494
		{
			yyVAL.node = nil
		}
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:498
		{
			yyVAL.node = nil
		}
	case 95:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:502
		{
			yyVAL.node = nil
		}
	case 96:
		yyDollar = yyS[yypt-12 : yypt+1]
//line gram.y:506
		{
			yyVAL.node = nil
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:512
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:516
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:521
		{
			yyVAL.node = nil
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:525
		{
			yyVAL.node = nil
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:529
		{
			yyVAL.node = nil
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:533
		{
			yyVAL.node = nil
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:537
		{
			yyVAL.node = nil
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:541
		{
			yyVAL.node = nil
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:548
		{
			yyVAL.node = nil
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:555
		{
			yyVAL.node = nil
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:562
		{
			yyVAL.node = nil
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:573
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:590
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:594
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:598
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:602
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:606
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[3].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:610
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[3].node, nil, nil, yyDollar[5].astblock)
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:614
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:618
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, nil, nil, nil, yyDollar[4].astblock)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:625
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:629
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:635
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:641
		{
			yyVAL.iflist = []*ast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:645
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:651
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:659
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[3].item, yyDollar[2].aststmts)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:666
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:677
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:681
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:685
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:689
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:695
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt([]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:702
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[4].item, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:706
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:710
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[3].item, yyDollar[1].node, nil)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:716
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:720
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:724
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:730
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:734
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:738
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:742
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:746
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:750
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:754
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:758
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:765
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:769
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:773
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:777
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:781
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:788
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[3].item, yyDollar[2].node)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:795
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[2].item, yyDollar[4].item, yyDollar[1].node, yyDollar[3].node)
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:799
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[2].item, yyDollar[4].item, nil, yyDollar[3].node, yyDollar[1].item)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:806
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:813
		{
			yyVAL.node = yyDollar[1].node
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:817
		{
			yyVAL.node = nil
		}
	case 159:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:824
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[2].item, yyDollar[8].item, yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 160:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:828
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[2].item, yyDollar[6].item, yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:835
		{
			yyVAL.node = nil
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:839
		{
			yyVAL.node = nil
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:843
		{
			yyVAL.node = nil
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:847
		{
			yyVAL.node = nil
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:851
		{
			yyVAL.node = nil
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:855
		{
			yyVAL.node = nil
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:861
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[3].item, yyDollar[2].nodes)
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:865
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:871
		{
			yyVAL.map_nodes = [][2]ast.Node{[2]ast.Node{yyDollar[1].node, yyDollar[2].item}}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:875
		{
			yyVAL.map_nodes = append(yyVAL.map_nodes, [2]ast.Node{yyDollar[3].node, yyDollar[5].node})
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:881
		{
			yyVAL.node = yylex.(*parser).newMapLiteral(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:885
		{
			yyVAL.node = yylex.(*parser).newMapLiteral(yyDollar[1].item, yyDollar[3].item, yyDollar[2].map_nodes)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:892
		{
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:896
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:903
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:907
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:911
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:915
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:920
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:925
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:929
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
