// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	ast "github.com/GuanceCloud/platypus/pkg/v2/ast"
)

//line gram.y:15
type yySymType struct {
	yys      int
	aststmts ast.Stmts
	astblock *ast.BlockStmt

	classbody any
	fnparams  any

	ifitem    *ast.IfStmtElem
	iflist    []*ast.IfStmtElem
	node      ast.Node
	nodes     []ast.Node
	map_nodes [][2]ast.Node
	item      Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const EOF = 57349
const ERROR = 57350
const ID = 57351
const NUMBER = 57352
const LEFT_PAREN = 57353
const LEFT_BRACKET = 57354
const LEFT_BRACE = 57355
const RIGHT_BRACE = 57356
const RIGHT_PAREN = 57357
const RIGHT_BRACKET = 57358
const STRING = 57359
const QUOTED_STRING = 57360
const MULTILINE_STRING = 57361
const COLON = 57362
const EOL = 57363
const operatorsStart = 57364
const ADD = 57365
const SUB = 57366
const MUL = 57367
const DIV = 57368
const MOD = 57369
const EQ = 57370
const GTE = 57371
const GT = 57372
const LT = 57373
const LTE = 57374
const NEQ = 57375
const EQEQ = 57376
const ADD_EQ = 57377
const SUB_EQ = 57378
const DIV_EQ = 57379
const MUL_EQ = 57380
const MOD_EQ = 57381
const AND = 57382
const OR = 57383
const NOT = 57384
const DOT = 57385
const operatorsEnd = 57386
const keywordsStart = 57387
const TRUE = 57388
const FALSE = 57389
const CLASS = 57390
const NIL = 57391
const NULL = 57392
const IF = 57393
const ELIF = 57394
const ELSE = 57395
const STR = 57396
const INT = 57397
const FLOAT = 57398
const BOOL = 57399
const LIST = 57400
const MAP = 57401
const ANY = 57402
const FOR = 57403
const IN = 57404
const WHILE = 57405
const BREAK = 57406
const CONTINUE = 57407
const RETURN = 57408
const SWITCH = 57409
const CASE = 57410
const GOTO = 57411
const FN = 57412
const LET = 57413
const VAR = 57414
const VAR_ARG = 57415
const FN_RET = 57416
const IMPORT = 57417
const AS = 57418
const TYPE = 57419
const NEW = 57420
const MAKE = 57421
const INTERFACE = 57422
const CONST = 57423
const keywordsEnd = 57424
const startSymbolsStart = 57425
const START_STMTS = 57426
const startSymbolsEnd = 57427
const UMINUS = 57428

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"COLON",
	"EOL",
	"operatorsStart",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"EQ",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"NEQ",
	"EQEQ",
	"ADD_EQ",
	"SUB_EQ",
	"DIV_EQ",
	"MUL_EQ",
	"MOD_EQ",
	"AND",
	"OR",
	"NOT",
	"DOT",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"CLASS",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"ANY",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"SWITCH",
	"CASE",
	"GOTO",
	"FN",
	"LET",
	"VAR",
	"VAR_ARG",
	"FN_RET",
	"IMPORT",
	"AS",
	"TYPE",
	"NEW",
	"MAKE",
	"INTERFACE",
	"CONST",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:889

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 78,
	4, 98,
	-2, 86,
	-1, 236,
	1, 117,
	4, 117,
	7, 117,
	14, 117,
	21, 117,
	-2, 160,
}

const yyPrivate = 57344

const yyLast = 1567

var yyAct = [...]int16{
	34, 218, 157, 140, 81, 111, 3, 219, 174, 49,
	51, 62, 58, 59, 289, 293, 279, 54, 50, 55,
	124, 124, 122, 63, 64, 135, 124, 8, 70, 99,
	101, 124, 103, 74, 72, 69, 251, 104, 212, 211,
	61, 106, 65, 66, 102, 71, 52, 53, 136, 56,
	57, 48, 278, 83, 97, 15, 209, 228, 46, 67,
	214, 24, 21, 109, 26, 25, 32, 94, 95, 96,
	29, 28, 124, 83, 97, 30, 60, 31, 310, 22,
	80, 318, 309, 75, 142, 98, 49, 286, 2, 170,
	300, 301, 275, 49, 163, 50, 121, 100, 126, 259,
	169, 172, 50, 258, 169, 98, 49, 280, 49, 169,
	323, 170, 176, 49, 135, 50, 163, 50, 184, 281,
	186, 169, 50, 120, 276, 180, 294, 271, 263, 49,
	178, 247, 161, 162, 164, 245, 67, 165, 50, 229,
	167, 206, 290, 302, 167, 272, 265, 171, 193, 167,
	267, 49, 198, 328, 161, 162, 164, 217, 67, 165,
	50, 167, 302, 260, 248, 114, 113, 302, 302, 171,
	119, 302, 324, 216, 220, 221, 166, 314, 313, 302,
	166, 306, 106, 273, 249, 166, 215, 173, 135, 303,
	49, 249, 316, 170, 291, 249, 207, 166, 163, 50,
	181, 261, 1, 135, 181, 250, 208, 4, 142, 226,
	127, 239, 225, 222, 242, 169, 220, 246, 232, 234,
	235, 7, 181, 20, 191, 19, 159, 5, 68, 169,
	175, 182, 18, 16, 17, 179, 161, 162, 164, 168,
	67, 165, 45, 76, 35, 36, 38, 190, 262, 14,
	220, 171, 169, 255, 256, 167, 257, 264, 37, 43,
	44, 270, 39, 42, 41, 40, 47, 9, 169, 167,
	13, 12, 11, 10, 220, 282, 169, 269, 79, 138,
	169, 23, 73, 33, 6, 169, 274, 169, 123, 169,
	169, 166, 167, 0, 0, 0, 0, 169, 0, 285,
	169, 0, 0, 169, 297, 166, 292, 0, 167, 0,
	169, 0, 305, 0, 0, 307, 167, 169, 304, 169,
	167, 0, 0, 308, 169, 167, 312, 167, 166, 167,
	167, 0, 321, 317, 0, 0, 319, 167, 320, 326,
	167, 179, 0, 167, 166, 325, 0, 327, 0, 0,
	167, 329, 166, 0, 0, 253, 166, 167, 0, 167,
	0, 166, 0, 166, 167, 166, 166, 0, 0, 0,
	0, 0, 0, 166, 105, 0, 166, 27, 266, 166,
	49, 27, 299, 170, 0, 0, 166, 0, 163, 50,
	0, 0, 0, 166, 277, 166, 0, 0, 0, 78,
	166, 0, 283, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 295, 0, 0, 298, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 161, 162, 164, 311,
	67, 165, 0, 0, 112, 0, 315, 115, 116, 117,
	118, 171, 0, 0, 0, 322, 0, 0, 0, 125,
	0, 0, 128, 0, 0, 0, 0, 137, 141, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 158, 0, 0, 0, 77, 0, 0,
	0, 112, 49, 51, 62, 58, 59, 0, 0, 112,
	54, 50, 55, 0, 189, 0, 63, 64, 0, 27,
	0, 0, 194, 0, 197, 200, 201, 202, 203, 204,
	205, 0, 0, 0, 0, 65, 66, 0, 49, 52,
	53, 170, 56, 57, 0, 0, 163, 50, 0, 0,
	0, 0, 67, 0, 0, 213, 0, 160, 0, 0,
	0, 0, 0, 0, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 223, 0, 224, 0,
	0, 0, 0, 0, 161, 162, 164, 0, 67, 165,
	231, 233, 0, 0, 237, 0, 0, 0, 0, 171,
	0, 0, 238, 21, 241, 0, 243, 244, 49, 51,
	62, 58, 59, 236, 0, 0, 54, 50, 55, 0,
	22, 0, 63, 64, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 66, 0, 0, 52, 53, 268, 56, 57,
	48, 0, 0, 243, 0, 0, 0, 0, 67, 0,
	24, 0, 0, 26, 25, 32, 0, 0, 0, 29,
	28, 0, 21, 0, 30, 49, 31, 49, 51, 62,
	58, 59, 192, 163, 50, 54, 50, 55, 0, 22,
	0, 63, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 66, 0, 0, 52, 53, 0, 56, 57, 48,
	0, 161, 162, 164, 0, 67, 165, 67, 0, 24,
	0, 0, 26, 25, 32, 0, 171, 0, 29, 28,
	0, 21, 0, 30, 0, 31, 49, 51, 62, 58,
	59, 0, 0, 0, 54, 50, 55, 0, 22, 0,
	63, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	66, 0, 0, 52, 53, 0, 56, 57, 48, 0,
	0, 49, 0, 296, 170, 0, 67, 0, 24, 163,
	50, 26, 25, 32, 83, 97, 0, 29, 28, 0,
	0, 0, 30, 0, 31, 0, 92, 93, 94, 95,
	96, 0, 84, 85, 88, 89, 90, 91, 130, 131,
	133, 132, 134, 87, 86, 0, 98, 161, 162, 164,
	0, 67, 165, 0, 0, 49, 0, 288, 170, 0,
	0, 0, 171, 163, 50, 82, 0, 49, 0, 284,
	170, 0, 83, 97, 49, 163, 50, 170, 0, 0,
	0, 0, 163, 50, 92, 93, 94, 95, 96, 0,
	84, 85, 88, 89, 90, 91, 0, 0, 0, 0,
	0, 161, 162, 164, 98, 67, 165, 0, 0, 0,
	0, 0, 0, 161, 162, 164, 171, 67, 165, 0,
	161, 162, 164, 82, 67, 165, 0, 0, 171, 83,
	97, 124, 0, 0, 0, 171, 0, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 0, 84, 85, 88,
	89, 90, 91, 83, 97, 0, 0, 0, 87, 86,
	0, 98, 183, 0, 0, 92, 93, 94, 95, 96,
	0, 84, 85, 88, 89, 90, 91, 83, 97, 0,
	82, 0, 87, 86, 0, 98, 252, 0, 0, 92,
	93, 94, 95, 96, 230, 84, 85, 88, 89, 90,
	91, 83, 97, 0, 82, 0, 87, 86, 0, 98,
	0, 0, 0, 92, 93, 94, 95, 96, 0, 84,
	85, 88, 89, 90, 91, 0, 0, 0, 82, 0,
	87, 86, 0, 98, 0, 83, 97, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 82, 84, 85, 88, 89, 90, 91, 0,
	0, 83, 97, 0, 87, 86, 210, 98, 0, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 0, 84,
	85, 88, 89, 90, 91, 0, 82, 0, 196, 0,
	87, 86, 0, 98, 0, 83, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 82, 84, 85, 88, 89, 90, 91, 83,
	97, 0, 0, 188, 87, 86, 0, 98, 0, 0,
	0, 92, 93, 94, 95, 96, 0, 84, 85, 88,
	89, 90, 91, 83, 97, 0, 82, 0, 87, 86,
	0, 98, 0, 0, 0, 92, 93, 94, 95, 96,
	0, 84, 85, 88, 89, 90, 91, 83, 97, 0,
	82, 0, 87, 86, 0, 98, 0, 0, 0, 92,
	93, 94, 95, 96, 0, 84, 85, 88, 89, 90,
	91, 0, 0, 0, 82, 0, 87, 0, 0, 98,
	49, 51, 62, 58, 59, 0, 240, 0, 54, 50,
	55, 0, 0, 0, 63, 64, 195, 0, 82, 0,
	0, 49, 51, 62, 58, 59, 0, 0, 0, 54,
	50, 55, 0, 65, 66, 63, 64, 52, 53, 0,
	56, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 65, 66, 0, 0, 52, 53,
	0, 56, 57, 0, 49, 51, 62, 58, 59, 187,
	0, 67, 54, 50, 55, 0, 0, 0, 63, 64,
	0, 0, 0, 0, 0, 49, 51, 62, 58, 59,
	185, 0, 0, 54, 50, 55, 0, 65, 66, 63,
	64, 52, 53, 0, 56, 57, 0, 0, 0, 0,
	0, 0, 0, 0, 67, 0, 0, 0, 65, 66,
	0, 0, 52, 53, 0, 56, 57, 0, 49, 51,
	62, 58, 59, 177, 0, 67, 54, 50, 55, 0,
	0, 0, 63, 64, 0, 0, 0, 0, 0, 49,
	51, 62, 58, 59, 0, 139, 0, 54, 50, 55,
	0, 65, 66, 63, 64, 52, 53, 0, 56, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 67, 0,
	0, 0, 65, 66, 0, 0, 52, 53, 129, 56,
	57, 0, 0, 49, 51, 62, 58, 59, 0, 67,
	0, 54, 50, 55, 0, 0, 0, 63, 64, 0,
	0, 0, 0, 0, 49, 51, 62, 58, 59, 110,
	0, 0, 54, 50, 55, 0, 65, 66, 63, 64,
	52, 53, 0, 56, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 65, 66, 0,
	0, 52, 53, 0, 56, 57, 0, 0, 49, 51,
	62, 58, 59, 0, 67, 108, 54, 50, 55, 0,
	0, 0, 63, 64, 0, 0, 0, 0, 0, 49,
	51, 62, 58, 59, 0, 0, 0, 54, 50, 55,
	0, 65, 66, 63, 64, 52, 53, 0, 56, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 67, 0,
	0, 0, 65, 66, 0, 0, 52, 53, 0, 56,
	57, 0, 49, 51, 62, 58, 199, 0, 0, 67,
	54, 50, 55, 0, 83, 97, 63, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 94, 95,
	96, 0, 0, 0, 0, 65, 66, 0, 0, 52,
	53, 0, 56, 57, 83, 97, 98, 0, 0, 0,
	0, 0, 67, 0, 0, 0, 92, 93, 94, 95,
	96, 0, 84, 85, 88, 89, 90, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 98,
}

var yyPact = [...]int16{
	4, 200, 717, -1000, -1000, -1000, 0, 58, 24, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -19, 473, -1000, -1000, 1102, 97, 84,
	27, 97, 1440, -1000, 169, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1440, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1419, 1375,
	153, 152, 1440, 1440, 1440, 1440, 158, 111, 58, 24,
	-1000, -1000, 59, -1000, 1440, 59, 206, 1354, 773, -1000,
	-1000, 20, 1440, 1310, 1440, 1440, 1440, 1440, 1440, 1440,
	1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 509,
	97, 176, -68, 835, 183, 1102, 1289, 888, 646, 109,
	-1000, 217, 912, 1246, 1225, 1078, 62, 62, 62, 1440,
	835, 24, -1000, -1000, 648, 888, -1000, 1182, 1054, 1483,
	1440, 1440, 1440, 1440, 1440, 1440, 1440, 1523, 191, -1000,
	-1000, 1102, 28, 1493, 1493, 1126, 831, 1493, 1493, 1493,
	1493, 42, 42, 62, 62, 62, 1020, 19, -1000, 10,
	1440, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	44, 175, 97, 142, 97, -1000, 199, -1000, -1000, -1000,
	-1000, 1440, -1000, 1440, 198, -1000, 195, -1000, -1000, 994,
	41, 125, -1000, -1000, 960, 1483, 1483, 888, -1000, 579,
	1102, 1102, 1102, 1102, 1102, 1102, 183, 1161, -1000, 1440,
	-1000, 1440, 1440, 1102, 835, 120, 117, 151, 190, -1000,
	16, -1000, -1000, 936, 1102, -1000, -1000, -1000, 835, -1000,
	1483, 888, -1000, 888, -1000, -1000, -1000, 912, 1102, -1000,
	-1000, 1102, 83, 1102, 1102, 150, 186, 97, 114, 97,
	133, 77, 1440, -1000, 888, -1000, -1000, -1000, 1440, -1000,
	113, 132, 172, 18, -1000, 110, -1000, 835, 1102, -1000,
	36, -58, 93, 104, -1000, 828, 13, -1000, -1000, 816,
	-60, 129, 179, 59, 835, -1000, 762, -1000, 835, 371,
	76, 78, -1000, 174, -1000, 59, 835, 166, -1000, 835,
	8, 64, 835, 59, -1000, 163, -1000, 162, -1000, 181,
	7, -1000, -1000, 59, -1000, 59, 835, -1000, 99, -1000,
	-1000, 157, 59, 835, 59, -1000, 138, -1000, 59, -1000,
}

var yyPgo = [...]int16{
	0, 22, 288, 224, 284, 283, 282, 281, 279, 4,
	5, 221, 278, 273, 272, 271, 270, 267, 266, 3,
	0, 265, 264, 263, 262, 260, 259, 58, 374, 258,
	249, 2, 246, 245, 244, 243, 242, 126, 239, 76,
	40, 55, 234, 233, 232, 225, 223, 1, 7, 202,
	27, 15,
}

var yyR1 = [...]int8{
	0, 50, 50, 50, 50, 49, 49, 49, 49, 3,
	3, 3, 4, 4, 4, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 30, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 39, 40, 41, 41, 41, 38, 38, 38, 38,
	38, 38, 44, 44, 45, 48, 48, 48, 46, 46,
	47, 47, 51, 51, 42, 42, 42, 42, 42, 42,
	43, 43, 43, 43, 43, 43, 9, 9, 12, 12,
	12, 12, 12, 12, 27, 16, 15, 13, 35, 35,
	35, 14, 14, 14, 14, 14, 14, 14, 14, 17,
	17, 5, 7, 7, 6, 1, 1, 2, 8, 8,
	8, 8, 19, 18, 18, 18, 21, 21, 21, 22,
	22, 22, 22, 22, 22, 22, 22, 23, 23, 23,
	23, 23, 24, 25, 25, 26, 31, 31, 36, 36,
	32, 32, 32, 32, 32, 32, 33, 33, 10, 10,
	29, 29, 20, 20, 34, 34, 34, 34, 34, 34,
	34,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 5, 3, 4, 5, 7, 9, 6,
	8, 10, 2, 4, 3, 1, 3, 4, 1, 2,
	1, 3, 1, 3, 11, 13, 15, 12, 14, 16,
	7, 9, 11, 8, 10, 12, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 3, 1, 1,
	1, 7, 6, 6, 5, 6, 5, 5, 4, 1,
	3, 3, 1, 2, 3, 1, 3, 2, 3, 3,
	1, 1, 3, 4, 5, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 3, 1, 0, 8, 6,
	4, 3, 4, 3, 4, 3, 3, 2, 3, 5,
	2, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int16{
	-1000, -49, 84, 2, 7, -3, -4, -11, -50, -17,
	-13, -14, -15, -16, -30, -41, -43, -42, -44, -45,
	-46, 4, 21, -7, 61, 65, 64, -28, 71, 70,
	75, 77, 66, -5, -20, -34, -33, -29, -32, -24,
	-21, -22, -23, -26, -25, -36, -27, -18, 51, 9,
	18, 10, 46, 47, 17, 19, 49, 50, 12, 13,
	-39, -40, 11, 23, 24, 42, 43, 59, -11, -50,
	4, 21, 53, -6, 52, -27, -35, 4, -28, -12,
	-41, -9, 62, 11, 29, 30, 41, 40, 31, 32,
	33, 34, 23, 24, 25, 26, 27, 12, 43, -20,
	13, -20, 17, -20, -9, -28, 13, -28, 16, -9,
	14, -10, -28, 13, 13, -28, -28, -28, -28, 12,
	12, -50, -1, -2, 13, -28, -1, 4, -28, 4,
	35, 36, 38, 37, 39, 5, 28, -28, -8, 15,
	-19, -28, -20, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -31, -28, -37,
	28, 55, 56, 17, 57, 60, -39, -40, -38, -20,
	12, 70, -20, 11, 76, -37, -10, 14, -1, -37,
	16, 5, 14, 20, -9, 14, -10, 14, 15, -28,
	-37, -3, 14, -1, -28, 4, 4, -28, -1, 13,
	-28, -28, -28, -28, -28, -28, -9, 5, 15, 28,
	16, 20, 28, -28, 16, 11, -20, 15, -47, -48,
	-20, -20, 14, -28, -28, 14, 14, 16, 16, 14,
	4, -28, -1, -28, -1, -1, 14, -28, -28, -19,
	15, -28, -31, -28, -28, 15, -47, 14, 13, 5,
	15, 20, 20, -37, -28, -1, -1, -1, 20, 16,
	13, 15, -20, 14, -48, 13, -37, 73, -28, -1,
	-31, 14, 13, 11, -1, 74, 14, -37, 16, 74,
	14, 15, -47, -37, 11, -1, 74, -37, 11, 74,
	13, 15, -1, -51, -37, -37, 11, -51, -37, 11,
	14, 13, 5, 15, -1, -51, 15, -51, -1, 74,
	14, -37, -1, 15, 15, -37, 11, -1, 74, -1,
	-1, -51, -37, 11, 15, -1, -51, -1, 15, -1,
}

var yyDef = [...]int16{
	0, -2, 6, 8, 7, 5, 10, 11, 13, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 1, 2, 109, 0, 96, 95, 27, 0, 0,
	0, 0, 68, 112, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 0, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 9, 12,
	3, 4, 0, 113, 0, 40, 0, 0, -2, 99,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 62, 0, 69, 86, 0, 0, 157, 0,
	160, 0, 0, 0, 0, 0, 126, 127, 128, 0,
	0, 14, 110, 115, 0, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 125,
	120, 121, 28, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 146, 0, 145, 54,
	0, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	0, 0, 0, 0, 0, 64, 0, 151, 111, 51,
	156, 0, 161, 0, 0, 153, 0, 155, 142, 0,
	0, 0, 117, 114, 0, 0, 0, 0, 108, 0,
	89, 90, 91, 92, 93, 87, 88, 0, 123, 0,
	143, 147, 0, 55, 0, 0, 0, 0, 0, 70,
	65, 63, 150, 0, 158, 152, 154, 144, 0, 116,
	0, 0, 104, 0, 106, 107, -2, 27, 118, 119,
	124, 122, 0, 146, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 102, 103, 105, 147, 149,
	0, 0, 0, 0, 71, 0, 66, 0, 159, 101,
	0, 56, 0, 0, 80, 0, 0, 67, 148, 0,
	59, 0, 0, 0, 0, 83, 0, 57, 0, 0,
	0, 0, 81, 0, 72, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 84, 0, 58, 0, 74, 0,
	0, 73, 82, 0, 61, 0, 0, 77, 0, 85,
	75, 0, 0, 0, 0, 78, 0, 76, 0, 79,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:163
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:167
		{
			yylex.(*parser).parseResult = ast.Stmts{}
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:172
		{
			yylex.(*parser).unexpected("", "")
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:182
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:189
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:195
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:199
		{
			yyVAL.aststmts = ast.Stmts{}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:203
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:226
		{
			yyVAL.node = nil
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:254
		{
			yyVAL.node = nil
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:258
		{
			yyVAL.node = nil
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:262
		{
			yyVAL.node = nil
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:266
		{
			yyVAL.node = nil
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:270
		{
			yyVAL.node = nil
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:281
		{
			yyVAL.node = nil
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:287
		{
			yyVAL.node = nil
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:293
		{
			yyVAL.node = nil
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:297
		{
			yyVAL.node = nil
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:301
		{
			yyVAL.node = nil
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:308
		{
			yyVAL.node = nil
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:312
		{
			yyVAL.node = nil
		}
	case 58:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:316
		{
			yyVAL.node = nil
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:320
		{
			yyVAL.node = nil
		}
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:324
		{
			yyVAL.node = nil
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:328
		{
			yyVAL.node = nil
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:339
		{
			yyVAL.node = nil
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:343
		{
			yyVAL.node = nil
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:350
		{
			yyVAL.node = nil
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:357
		{
			yyVAL.fnparams = nil
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:361
		{
			yyVAL.fnparams = nil
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:365
		{
			yyVAL.fnparams = nil
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:384
		{
			yyVAL.node = nil
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:388
		{
			yyVAL.node = nil
		}
	case 74:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:405
		{
			yyVAL.node = nil
		}
	case 75:
		yyDollar = yyS[yypt-13 : yypt+1]
//line gram.y:409
		{
			yyVAL.node = nil
		}
	case 76:
		yyDollar = yyS[yypt-15 : yypt+1]
//line gram.y:413
		{
			yyVAL.node = nil
		}
	case 77:
		yyDollar = yyS[yypt-12 : yypt+1]
//line gram.y:417
		{
			yyVAL.node = nil
		}
	case 78:
		yyDollar = yyS[yypt-14 : yypt+1]
//line gram.y:421
		{
			yyVAL.node = nil
		}
	case 79:
		yyDollar = yyS[yypt-16 : yypt+1]
//line gram.y:425
		{
			yyVAL.node = nil
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:433
		{
			yyVAL.node = nil
		}
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:437
		{
			yyVAL.node = nil
		}
	case 82:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:441
		{
			yyVAL.node = nil
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:445
		{
			yyVAL.node = nil
		}
	case 84:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:449
		{
			yyVAL.node = nil
		}
	case 85:
		yyDollar = yyS[yypt-12 : yypt+1]
//line gram.y:453
		{
			yyVAL.node = nil
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:459
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:463
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:470
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				yyDollar[1].nodes, yyDollar[3].nodes, yyDollar[2].item)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:475
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:480
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:485
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:490
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:495
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:503
		{
			yyVAL.node = yylex.(*parser).newInExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:510
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:517
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:528
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 101:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:545
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:549
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:553
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:557
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:561
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[3].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:565
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[3].node, nil, nil, yyDollar[5].astblock)
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:569
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:573
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, nil, nil, nil, yyDollar[4].astblock)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:580
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:584
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:590
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:596
		{
			yyVAL.iflist = []*ast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:600
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:606
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:614
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[3].item, yyDollar[2].aststmts)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:621
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:632
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:636
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:640
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:644
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:650
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt([]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:657
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[4].item, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:661
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:665
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[3].item, yyDollar[1].node, nil)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:671
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:675
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:679
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:685
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:689
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:693
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:697
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:701
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:705
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:709
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:713
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:720
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:724
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:728
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:732
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:736
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:743
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[3].item, yyDollar[2].node)
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:750
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[2].item, yyDollar[4].item, yyDollar[1].node, yyDollar[3].node)
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:754
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[2].item, yyDollar[4].item, nil, yyDollar[3].node, yyDollar[1].item)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:761
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:768
		{
			yyVAL.node = yyDollar[1].node
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:772
		{
			yyVAL.node = nil
		}
	case 148:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:779
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[2].item, yyDollar[8].item, yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:783
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[2].item, yyDollar[6].item, yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:790
		{
			yyVAL.node = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:794
		{
			yyVAL.node = nil
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:798
		{
			yyVAL.node = nil
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:802
		{
			yyVAL.node = nil
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:806
		{
			yyVAL.node = nil
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:810
		{
			yyVAL.node = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:816
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[3].item, yyDollar[2].nodes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:820
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:826
		{
			yyVAL.map_nodes = [][2]ast.Node{[2]ast.Node{yyDollar[1].node, yyDollar[2].item}}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:830
		{
			yyVAL.map_nodes = append(yyVAL.map_nodes, [2]ast.Node{yyDollar[3].node, yyDollar[5].node})
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:836
		{
			yyVAL.node = yylex.(*parser).newMapLiteral(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:840
		{
			yyVAL.node = yylex.(*parser).newMapLiteral(yyDollar[1].item, yyDollar[3].item, yyDollar[2].map_nodes)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:847
		{
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:851
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:858
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:862
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:866
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:870
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:875
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:880
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:884
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
