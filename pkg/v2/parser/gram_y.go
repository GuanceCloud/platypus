// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	ast "github.com/GuanceCloud/platypus/pkg/v2/ast"
)

//line gram.y:15
type yySymType struct {
	yys      int
	aststmts ast.Stmts
	astblock *ast.BlockStmt

	classbody any

	ifitem    *ast.IfStmtElem
	iflist    []*ast.IfStmtElem
	node      ast.Node
	nodes     []ast.Node
	map_nodes [][2]ast.Node
	item      Item

	fnparam  ast.FnParam
	fnparams []ast.FnParam
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const EOF = 57349
const ERROR = 57350
const ID = 57351
const NUMBER = 57352
const LEFT_PAREN = 57353
const LEFT_BRACKET = 57354
const LEFT_BRACE = 57355
const RIGHT_BRACE = 57356
const RIGHT_PAREN = 57357
const RIGHT_BRACKET = 57358
const STRING = 57359
const QUOTED_STRING = 57360
const MULTILINE_STRING = 57361
const COLON = 57362
const EOL = 57363
const operatorsStart = 57364
const ADD = 57365
const SUB = 57366
const MUL = 57367
const DIV = 57368
const MOD = 57369
const EQ = 57370
const GTE = 57371
const GT = 57372
const LT = 57373
const LTE = 57374
const NEQ = 57375
const EQEQ = 57376
const ADD_EQ = 57377
const SUB_EQ = 57378
const DIV_EQ = 57379
const MUL_EQ = 57380
const MOD_EQ = 57381
const AND = 57382
const OR = 57383
const NOT = 57384
const DOT = 57385
const operatorsEnd = 57386
const keywordsStart = 57387
const TRUE = 57388
const FALSE = 57389
const CLASS = 57390
const NIL = 57391
const NULL = 57392
const IF = 57393
const ELIF = 57394
const ELSE = 57395
const STR = 57396
const INT = 57397
const FLOAT = 57398
const BOOL = 57399
const LIST = 57400
const MAP = 57401
const ANY = 57402
const FOR = 57403
const IN = 57404
const WHILE = 57405
const BREAK = 57406
const CONTINUE = 57407
const RETURN = 57408
const SWITCH = 57409
const CASE = 57410
const GOTO = 57411
const FN = 57412
const LET = 57413
const VAR = 57414
const VAR_ARG = 57415
const FN_RET = 57416
const IMPORT = 57417
const AS = 57418
const TYPE = 57419
const NEW = 57420
const MAKE = 57421
const INTERFACE = 57422
const CONST = 57423
const keywordsEnd = 57424
const startSymbolsStart = 57425
const START_STMTS = 57426
const startSymbolsEnd = 57427
const UMINUS = 57428

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"COLON",
	"EOL",
	"operatorsStart",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"EQ",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"NEQ",
	"EQEQ",
	"ADD_EQ",
	"SUB_EQ",
	"DIV_EQ",
	"MUL_EQ",
	"MOD_EQ",
	"AND",
	"OR",
	"NOT",
	"DOT",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"CLASS",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"ANY",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"SWITCH",
	"CASE",
	"GOTO",
	"FN",
	"LET",
	"VAR",
	"VAR_ARG",
	"FN_RET",
	"IMPORT",
	"AS",
	"TYPE",
	"NEW",
	"MAKE",
	"INTERFACE",
	"CONST",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:914

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 28,
	5, 87,
	28, 87,
	-2, 35,
	-1, 80,
	4, 98,
	-2, 87,
	-1, 160,
	20, 149,
	-2, 11,
	-1, 200,
	13, 101,
	-2, 87,
	-1, 233,
	1, 119,
	4, 119,
	7, 119,
	14, 119,
	21, 119,
	-2, 158,
	-1, 234,
	5, 87,
	28, 87,
	-2, 35,
}

const yyPrivate = 57344

const yyLast = 1348

var yyAct = [...]int16{
	28, 215, 161, 276, 22, 179, 69, 144, 76, 74,
	34, 130, 130, 89, 103, 198, 251, 280, 112, 208,
	205, 17, 47, 260, 252, 3, 80, 259, 128, 126,
	81, 162, 66, 282, 111, 207, 36, 262, 180, 89,
	103, 113, 89, 103, 110, 104, 127, 82, 77, 254,
	114, 98, 99, 100, 101, 102, 100, 101, 102, 277,
	111, 119, 120, 121, 122, 123, 105, 106, 108, 109,
	115, 104, 267, 248, 104, 125, 211, 131, 245, 240,
	134, 220, 210, 238, 136, 137, 138, 139, 140, 141,
	145, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 164, 132, 2, 50, 50,
	70, 176, 203, 182, 111, 187, 224, 51, 51, 185,
	73, 10, 226, 222, 183, 191, 146, 71, 9, 212,
	50, 9, 279, 176, 195, 9, 200, 72, 283, 51,
	201, 283, 174, 184, 130, 178, 174, 186, 290, 124,
	188, 284, 190, 169, 167, 168, 170, 50, 177, 171,
	194, 249, 8, 213, 199, 165, 51, 209, 4, 181,
	68, 250, 269, 112, 204, 169, 167, 168, 170, 133,
	177, 171, 192, 1, 163, 5, 182, 6, 221, 67,
	223, 214, 206, 21, 20, 19, 18, 200, 200, 173,
	175, 201, 201, 234, 235, 172, 239, 46, 242, 243,
	241, 236, 228, 230, 78, 216, 217, 218, 37, 38,
	16, 39, 44, 225, 45, 229, 231, 232, 200, 40,
	43, 42, 201, 41, 48, 11, 15, 14, 13, 12,
	146, 118, 247, 255, 107, 142, 24, 174, 75, 174,
	35, 265, 7, 270, 271, 129, 256, 257, 0, 258,
	242, 0, 273, 0, 0, 0, 0, 0, 0, 0,
	244, 0, 246, 0, 0, 0, 0, 0, 0, 266,
	0, 287, 174, 286, 272, 174, 216, 0, 174, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 0, 174,
	0, 174, 0, 0, 174, 261, 174, 285, 263, 50,
	0, 268, 176, 289, 0, 0, 174, 0, 51, 291,
	174, 0, 274, 0, 0, 23, 0, 278, 166, 281,
	50, 52, 61, 59, 60, 233, 0, 0, 55, 51,
	56, 0, 0, 288, 62, 63, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 167, 168, 170, 0, 177,
	171, 0, 0, 64, 65, 0, 0, 53, 54, 0,
	57, 58, 49, 0, 50, 0, 264, 176, 0, 0,
	0, 0, 25, 51, 0, 27, 26, 33, 0, 0,
	0, 30, 29, 0, 23, 0, 31, 0, 32, 50,
	52, 61, 59, 60, 193, 0, 0, 55, 51, 56,
	0, 0, 0, 62, 63, 0, 0, 0, 0, 169,
	167, 168, 170, 0, 177, 171, 0, 0, 0, 0,
	0, 0, 64, 65, 0, 0, 53, 54, 0, 57,
	58, 49, 0, 50, 0, 0, 176, 0, 0, 0,
	0, 25, 51, 0, 27, 26, 33, 0, 0, 0,
	30, 29, 0, 23, 0, 31, 0, 32, 50, 52,
	61, 59, 60, 0, 0, 0, 55, 51, 56, 0,
	66, 0, 62, 63, 0, 0, 0, 0, 169, 167,
	168, 170, 0, 177, 171, 0, 0, 0, 0, 0,
	0, 64, 65, 0, 0, 53, 54, 0, 57, 58,
	49, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	25, 0, 0, 27, 26, 33, 0, 0, 0, 30,
	29, 0, 23, 0, 31, 0, 32, 50, 52, 61,
	59, 60, 0, 0, 0, 55, 51, 56, 0, 9,
	0, 62, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 65, 0, 0, 53, 54, 0, 57, 58, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 25,
	0, 0, 27, 26, 33, 0, 0, 0, 30, 29,
	0, 0, 0, 31, 0, 32, 50, 52, 61, 59,
	60, 0, 0, 0, 55, 51, 56, 0, 0, 0,
	62, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	65, 0, 0, 53, 54, 0, 57, 58, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 25, 0,
	0, 27, 26, 33, 0, 0, 0, 30, 29, 0,
	79, 0, 31, 0, 32, 50, 52, 61, 59, 60,
	0, 0, 0, 55, 51, 56, 0, 0, 0, 62,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 65,
	0, 0, 53, 54, 0, 57, 58, 0, 0, 0,
	89, 103, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 98, 99, 100, 101, 102, 29, 90, 91,
	94, 95, 96, 97, 83, 84, 86, 85, 87, 93,
	92, 0, 104, 0, 89, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 100, 101,
	102, 88, 90, 91, 94, 95, 96, 97, 83, 84,
	86, 85, 87, 93, 92, 0, 104, 0, 89, 103,
	0, 0, 0, 0, 0, 0, 0, 253, 0, 0,
	98, 99, 100, 101, 102, 88, 90, 91, 94, 95,
	96, 97, 0, 0, 0, 227, 0, 93, 92, 0,
	104, 0, 89, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 100, 101, 102, 88,
	90, 91, 94, 95, 96, 97, 89, 103, 0, 0,
	0, 93, 92, 0, 104, 0, 9, 0, 98, 99,
	100, 101, 102, 197, 90, 91, 94, 95, 96, 97,
	89, 103, 0, 88, 0, 93, 92, 0, 104, 0,
	0, 0, 98, 99, 100, 101, 102, 0, 90, 91,
	94, 95, 96, 97, 89, 103, 130, 88, 0, 93,
	92, 0, 104, 0, 0, 0, 98, 99, 100, 101,
	102, 0, 90, 91, 94, 95, 96, 97, 89, 103,
	0, 88, 0, 93, 92, 0, 104, 189, 0, 0,
	98, 99, 100, 101, 102, 0, 90, 91, 94, 95,
	96, 97, 89, 103, 0, 88, 0, 93, 92, 0,
	104, 0, 0, 0, 98, 99, 100, 101, 102, 0,
	90, 91, 94, 95, 96, 97, 89, 103, 0, 88,
	0, 93, 92, 0, 104, 0, 0, 0, 98, 99,
	100, 101, 102, 0, 90, 91, 94, 95, 96, 97,
	89, 103, 0, 88, 0, 93, 0, 0, 104, 0,
	0, 0, 98, 99, 100, 101, 102, 0, 90, 91,
	94, 95, 96, 97, 0, 0, 0, 88, 0, 0,
	0, 0, 104, 50, 52, 61, 59, 60, 0, 0,
	0, 55, 51, 56, 0, 9, 0, 62, 63, 0,
	0, 88, 0, 0, 50, 52, 61, 59, 60, 0,
	237, 0, 55, 51, 56, 0, 64, 65, 62, 63,
	53, 54, 0, 57, 58, 50, 52, 61, 59, 60,
	0, 0, 219, 55, 51, 56, 0, 64, 65, 62,
	63, 53, 54, 0, 57, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 65,
	0, 0, 53, 54, 196, 57, 58, 0, 0, 50,
	52, 61, 59, 60, 0, 0, 0, 55, 51, 56,
	0, 0, 0, 62, 63, 50, 52, 61, 59, 60,
	0, 143, 0, 55, 51, 56, 0, 0, 0, 62,
	63, 0, 64, 65, 0, 0, 53, 54, 0, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 64, 65,
	0, 0, 53, 54, 135, 57, 58, 0, 0, 50,
	52, 61, 59, 60, 0, 0, 0, 55, 51, 56,
	0, 0, 0, 62, 63, 50, 52, 61, 59, 60,
	117, 0, 0, 55, 51, 56, 0, 0, 0, 62,
	63, 0, 64, 65, 0, 0, 53, 54, 0, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 64, 65,
	0, 0, 53, 54, 0, 57, 58, 50, 52, 61,
	59, 60, 0, 0, 116, 55, 51, 56, 0, 0,
	0, 62, 63, 50, 52, 61, 59, 60, 0, 0,
	0, 55, 51, 56, 0, 0, 0, 62, 63, 0,
	64, 65, 0, 0, 53, 54, 0, 57, 58, 0,
	0, 0, 0, 0, 0, 0, 64, 65, 0, 0,
	53, 54, 0, 57, 58, 50, 52, 61, 59, 202,
	0, 0, 0, 55, 51, 56, 0, 0, 0, 62,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 103, 0, 64, 65,
	0, 0, 53, 54, 0, 57, 58, 98, 99, 100,
	101, 102, 0, 90, 91, 94, 95, 96, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 104,
}

var yyPact = [...]int16{
	23, 161, 528, -1000, -1000, -1000, 459, 597, 106, -1000,
	116, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -44, 666, -1000, -1000, 743, 100,
	100, 100, 100, 1234, 13, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1234,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1218,
	1176, 1234, 1234, 1234, 1234, 137, -1000, -1000, 106, 25,
	-1000, -1000, -1000, -1000, 131, -1000, 1234, 131, 175, 1160,
	743, -1000, -1000, 1234, 1234, 1234, 1234, 1234, 1234, 1116,
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
	1234, 1234, 1234, 1014, 1234, 300, 134, -38, -1000, 434,
	168, 931, 1234, 1234, 883, 114, -1000, -1000, 110, 907,
	835, 2, 2, 2, 1234, 25, -1000, -1000, -1000, -1000,
	390, 883, -1000, 1100, 859, 1276, 931, 931, 931, 931,
	931, 1304, 107, -1000, -1000, 931, -8, 28, 28, 955,
	979, 28, 28, 28, 28, 31, 31, 2, 2, 2,
	835, 15, -1000, 11, -1000, -9, 1234, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 66, 117, 148, 100,
	100, -1000, 931, 168, -1000, 1056, 65, 1234, 109, 1234,
	101, 835, 108, -1000, -1000, 811, 1276, 1276, 131, -1000,
	743, -1000, 321, 1035, 68, 1234, 63, 1014, 1234, 931,
	434, 62, 434, -1, 156, -1000, -4, -1000, -1000, -1000,
	-1000, 777, -1000, 931, -1000, 33, -1000, 1276, 131, -1000,
	131, -1000, -1000, -1000, 709, 931, -1000, -1000, -1000, 931,
	-1000, 7, 931, 931, -1000, 434, 21, -1000, 365, 100,
	-2, 99, 1234, 1234, -1000, 131, -1000, -1000, -1000, 1014,
	-1000, -1000, 434, 131, 434, -1000, -1000, 121, -11, 434,
	931, 931, -1000, 17, -1000, -1000, 136, -1000, 131, 434,
	1234, -1000, -1000, 434, 131, -1000, 133, 931, -1000, -1000,
	131, -1000,
}

var yyPgo = [...]uint8{
	0, 28, 255, 182, 252, 250, 248, 246, 245, 10,
	244, 3, 241, 162, 4, 239, 238, 237, 236, 235,
	234, 7, 36, 233, 231, 230, 229, 224, 222, 22,
	0, 221, 220, 2, 219, 218, 214, 15, 207, 59,
	205, 200, 199, 21, 196, 195, 194, 193, 1, 191,
	183, 6, 121, 184, 31,
}

var yyR1 = [...]int8{
	0, 51, 51, 51, 51, 52, 52, 52, 53, 53,
	54, 54, 50, 50, 50, 50, 50, 3, 3, 3,
	4, 4, 4, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 32, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 40, 41,
	42, 43, 43, 43, 10, 10, 45, 45, 46, 48,
	48, 48, 48, 48, 48, 47, 47, 49, 49, 11,
	11, 44, 44, 44, 44, 44, 44, 9, 9, 14,
	14, 14, 14, 14, 14, 18, 17, 15, 36, 36,
	36, 37, 37, 16, 16, 16, 16, 16, 16, 16,
	16, 19, 19, 5, 7, 7, 6, 1, 1, 2,
	29, 8, 8, 8, 8, 21, 20, 20, 20, 23,
	23, 23, 24, 24, 24, 24, 24, 24, 24, 24,
	25, 25, 25, 25, 25, 26, 27, 27, 28, 33,
	33, 38, 38, 34, 34, 34, 12, 12, 31, 31,
	22, 22, 35, 35, 35, 35, 35, 35, 35,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 1, 2, 2, 1, 2,
	1, 0, 2, 2, 3, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 4,
	5, 5, 3, 4, 1, 3, 2, 4, 3, 1,
	3, 4, 3, 3, 5, 1, 2, 1, 3, 1,
	3, 5, 7, 9, 6, 8, 10, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 6, 6, 5, 6, 5, 5,
	4, 1, 3, 3, 1, 2, 3, 1, 3, 2,
	3, 3, 3, 1, 1, 3, 5, 5, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 5, 5, 3, 1,
	1, 8, 6, 4, 4, 2, 3, 5, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -50, 84, 2, 7, -3, -53, -4, -13, 21,
	-52, -19, -15, -16, -17, -18, -32, -43, -44, -45,
	-46, -47, -14, 4, -7, 61, 65, 64, -30, 71,
	70, 75, 77, 66, -9, -5, -22, -35, -34, -31,
	-26, -23, -24, -25, -28, -27, -38, -29, -20, 51,
	9, 18, 10, 46, 47, 17, 19, 49, 50, 12,
	13, 11, 23, 24, 42, 43, 21, -3, -13, -51,
	4, 21, 21, 4, 53, -6, 52, -29, -36, 4,
	-30, -14, -43, 35, 36, 38, 37, 39, 62, 11,
	29, 30, 41, 40, 31, 32, 33, 34, 23, 24,
	25, 26, 27, 12, 43, -22, -22, -10, -22, -22,
	-9, -30, 5, 28, -30, -9, 16, 14, -12, -30,
	-30, -30, -30, -30, 12, -51, 4, 21, -1, -2,
	13, -30, -1, 4, -30, 4, -30, -30, -30, -30,
	-30, -30, -8, 15, -21, -30, -22, -30, -30, -30,
	-30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
	-30, -33, -54, -53, -30, -39, 28, 55, 56, 54,
	57, 60, -40, -42, -22, -41, 12, 59, 11, 43,
	76, -39, -30, -9, -1, 5, -54, 5, -54, 20,
	-54, -30, -3, 14, -1, -30, 4, 4, -37, -1,
	-30, -14, 13, 5, -54, 28, -54, 20, 28, -30,
	16, 10, 12, 15, -49, -48, -22, -22, -22, 16,
	16, -30, 14, -30, 15, -54, 14, 4, -37, -1,
	-37, -1, -1, 14, -30, -30, -21, 15, 15, -30,
	16, -33, -30, -30, -39, 16, -39, -1, 74, 5,
	15, 20, 28, 20, 16, -37, -1, -1, -1, 20,
	16, -39, 16, -39, 11, -48, -1, 74, -39, 73,
	-30, -30, -1, -33, -39, -1, -11, -39, -39, 11,
	28, -39, 16, 5, 15, -1, -11, -30, -39, -1,
	15, -1,
}

var yyDef = [...]int16{
	0, -2, 0, 16, 15, 12, 13, 18, 19, 8,
	21, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 5, 111, 0, 96, 95, -2, 0,
	0, 0, 0, 75, 0, 114, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 0,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 0,
	0, 0, 0, 0, 0, 0, 9, 14, 17, 20,
	1, 2, 6, 7, 0, 115, 0, 47, 0, 0,
	-2, 99, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 11, 0, 0, 0, 66, 64, 0,
	76, 87, 0, 0, 0, 11, 155, 158, 11, 0,
	11, 129, 130, 131, 0, 22, 3, 4, 112, 117,
	0, 0, 97, 0, 0, 0, 90, 91, 92, 93,
	94, 120, 11, 128, 123, 124, 36, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	-2, 0, 150, 10, 148, 62, 0, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 0, 0, 0, 0,
	0, 68, 88, 89, 113, 0, 0, 0, 0, 0,
	0, 11, 0, 119, 116, 0, 0, 0, 0, 110,
	-2, 102, 0, 0, 0, 0, 0, 11, 0, 63,
	0, 0, 0, 0, 0, 77, 69, 65, 67, 154,
	153, 0, 159, 156, 145, 0, 118, 0, 0, 106,
	0, 108, 109, -2, -2, 121, 122, 127, 126, 125,
	146, 0, 149, 61, 58, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 147, 0, 104, 105, 107, 11,
	152, 59, 0, 0, 0, 78, 84, 0, 70, 72,
	73, 157, 103, 0, 60, 82, 0, 79, 0, 0,
	0, 71, 151, 0, 0, 85, 0, 74, 80, 83,
	0, 86,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:180
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:184
		{
			yylex.(*parser).parseResult = ast.Stmts{}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:188
		{
			yylex.(*parser).parseResult = yyDollar[3].aststmts
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:193
		{
			yylex.(*parser).unexpected("", "")
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:203
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:210
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:216
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:220
		{
			yyVAL.aststmts = ast.Stmts{}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:224
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:272
		{
			yyVAL.node = &ast.TypeBasic{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:276
		{
			yyVAL.node = nil
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:280
		{
			yyVAL.node = nil
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:284
		{
			yyVAL.node = nil
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:288
		{
			yyVAL.node = nil
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:300
		{
			yyVAL.node = nil
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:306
		{
			yyVAL.node = nil
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:312
		{
			yyVAL.node = nil
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:318
		{
			yyVAL.node = nil
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:322
		{
			yyVAL.node = nil
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:326
		{
			yyVAL.node = nil
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:364
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:368
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:374
		{
			yyVAL.node = nil
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:378
		{
			yyVAL.node = nil
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:385
		{
			yyVAL.node = nil
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:392
		{
			yyVAL.fnparam = yylex.(*parser).newFnParam(yyDollar[1].node, nil, nil)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:396
		{
			yyVAL.fnparam = yylex.(*parser).newFnParam(yyDollar[1].node, yyDollar[3].node, nil)
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:400
		{
			yyVAL.fnparam = yylex.(*parser).newFnParam(yyDollar[1].node, yyDollar[4].node, nil, true)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:404
		{
			yyVAL.fnparam = yylex.(*parser).newFnParam(yyDollar[1].node, nil, nil, true)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:408
		{
			yyVAL.fnparam = yylex.(*parser).newFnParam(yyDollar[1].node, nil, yyDollar[3].node)
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:412
		{
			yyVAL.fnparam = yylex.(*parser).newFnParam(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:419
		{
			yyVAL.node = yylex.(*parser).newReturnStmt(yyDollar[1].item, nil)
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:423
		{
			yyVAL.node = yylex.(*parser).newReturnStmt(yyDollar[1].item, yyDollar[2].nodes)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:430
		{
			yyVAL.fnparams = []ast.FnParam{yyDollar[1].fnparam}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:434
		{
			yyVAL.fnparams = append(yyVAL.fnparams, yyDollar[3].fnparam)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:441
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:445
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:453
		{
			yyVAL.node = yylex.(*parser).newFnDefStmt(yyDollar[1].item, yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 82:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:457
		{
			yyVAL.node = yylex.(*parser).newFnDefStmt(yyDollar[1].item, yyDollar[2].node, nil, []ast.Node{yyDollar[6].node}, yyDollar[7].astblock)
		}
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:461
		{
			yyVAL.node = yylex.(*parser).newFnDefStmt(yyDollar[1].item, yyDollar[2].node, nil, yyDollar[7].nodes, yyDollar[9].astblock)
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:465
		{
			yyVAL.node = yylex.(*parser).newFnDefStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].fnparams, nil, yyDollar[6].astblock)
		}
	case 85:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:469
		{
			yyVAL.node = yylex.(*parser).newFnDefStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].fnparams, []ast.Node{yyDollar[7].node}, yyDollar[8].astblock)
		}
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:473
		{
			yyVAL.node = yylex.(*parser).newFnDefStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].fnparams, yyDollar[8].nodes, yyDollar[10].astblock)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:479
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:483
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:490
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				yyDollar[1].nodes, yyDollar[3].nodes, yyDollar[2].item)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:495
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:500
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:505
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:510
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:515
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:523
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:530
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:541
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 103:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:560
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 104:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:564
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:568
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:572
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:576
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[3].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:580
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[3].node, nil, nil, yyDollar[5].astblock)
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:584
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:588
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, nil, nil, nil, yyDollar[4].astblock)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:595
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:599
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:605
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:611
		{
			yyVAL.iflist = []*ast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:615
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:621
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:629
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[3].item, yyDollar[2].aststmts)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:636
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:647
		{
			yyVAL.node = yylex.(*parser).newInExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:653
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:657
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:661
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:665
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:671
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt([]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:678
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:682
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:686
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[3].item, yyDollar[1].node, nil)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:692
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:696
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:700
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:706
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:710
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:714
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:718
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:722
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:726
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:730
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:734
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:741
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:745
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:749
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:753
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:757
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:764
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[4].item, yyDollar[2].node)
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:771
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].node)
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:775
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[2].item, yyDollar[5].item, nil, yyDollar[3].node, yyDollar[1].item)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:782
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:789
		{
			yyVAL.node = yyDollar[1].node
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:793
		{
			yyVAL.node = nil
		}
	case 151:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:800
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[2].item, yyDollar[8].item, yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 152:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:804
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[2].item, yyDollar[6].item, yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:837
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[4].item, yyDollar[2].nodes)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:841
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[4].item, yyDollar[2].nodes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:845
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:851
		{
			yyVAL.map_nodes = [][2]ast.Node{[2]ast.Node{yyDollar[1].node, yyDollar[3].node}}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:855
		{
			yyVAL.map_nodes = append(yyVAL.map_nodes, [2]ast.Node{yyDollar[3].node, yyDollar[5].node})
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:861
		{
			yyVAL.node = yylex.(*parser).newMapLiteral(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:865
		{
			yyVAL.node = yylex.(*parser).newMapLiteral(yyDollar[1].item, yyDollar[4].item, yyDollar[2].map_nodes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:872
		{
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:876
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:883
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:887
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:891
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:895
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:900
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:905
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:909
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
