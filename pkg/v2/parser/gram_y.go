// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	ast "github.com/GuanceCloud/platypus/pkg/v2/ast"
)

//line gram.y:15
type yySymType struct {
	yys      int
	aststmts ast.Stmts
	astblock *ast.BlockStmt

	classbody any

	ifitem    *ast.IfStmtElem
	iflist    []*ast.IfStmtElem
	node      ast.Node
	nodes     []ast.Node
	map_nodes [][2]ast.Node
	item      Item

	fnparam  ast.FnParam
	fnparams []ast.FnParam
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const EOF = 57349
const ERROR = 57350
const ID = 57351
const NUMBER = 57352
const LEFT_PAREN = 57353
const LEFT_BRACKET = 57354
const LEFT_BRACE = 57355
const RIGHT_BRACE = 57356
const RIGHT_PAREN = 57357
const RIGHT_BRACKET = 57358
const STRING = 57359
const QUOTED_STRING = 57360
const MULTILINE_STRING = 57361
const COLON = 57362
const EOL = 57363
const operatorsStart = 57364
const ADD = 57365
const SUB = 57366
const MUL = 57367
const DIV = 57368
const MOD = 57369
const EQ = 57370
const GTE = 57371
const GT = 57372
const LT = 57373
const LTE = 57374
const NEQ = 57375
const EQEQ = 57376
const ADD_EQ = 57377
const SUB_EQ = 57378
const DIV_EQ = 57379
const MUL_EQ = 57380
const MOD_EQ = 57381
const AND = 57382
const OR = 57383
const NOT = 57384
const DOT = 57385
const operatorsEnd = 57386
const keywordsStart = 57387
const TRUE = 57388
const FALSE = 57389
const CLASS = 57390
const NIL = 57391
const NULL = 57392
const IF = 57393
const ELIF = 57394
const ELSE = 57395
const STR = 57396
const INT = 57397
const FLOAT = 57398
const BOOL = 57399
const LIST = 57400
const MAP = 57401
const ANY = 57402
const FOR = 57403
const IN = 57404
const WHILE = 57405
const BREAK = 57406
const CONTINUE = 57407
const RETURN = 57408
const SWITCH = 57409
const CASE = 57410
const GOTO = 57411
const FN = 57412
const LET = 57413
const VAR = 57414
const VAR_ARG = 57415
const FN_RET = 57416
const IMPORT = 57417
const AS = 57418
const TYPE = 57419
const NEW = 57420
const MAKE = 57421
const INTERFACE = 57422
const CONST = 57423
const keywordsEnd = 57424
const startSymbolsStart = 57425
const START_STMTS = 57426
const startSymbolsEnd = 57427
const UMINUS = 57428

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"COLON",
	"EOL",
	"operatorsStart",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"EQ",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"NEQ",
	"EQEQ",
	"ADD_EQ",
	"SUB_EQ",
	"DIV_EQ",
	"MUL_EQ",
	"MOD_EQ",
	"AND",
	"OR",
	"NOT",
	"DOT",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"CLASS",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"ANY",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"SWITCH",
	"CASE",
	"GOTO",
	"FN",
	"LET",
	"VAR",
	"VAR_ARG",
	"FN_RET",
	"IMPORT",
	"AS",
	"TYPE",
	"NEW",
	"MAKE",
	"INTERFACE",
	"CONST",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:839

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 28,
	5, 81,
	28, 81,
	-2, 35,
	-1, 80,
	4, 92,
	-2, 81,
	-1, 160,
	20, 143,
	-2, 11,
	-1, 189,
	13, 95,
	-2, 81,
	-1, 225,
	1, 113,
	4, 113,
	7, 113,
	14, 113,
	21, 113,
	-2, 152,
	-1, 226,
	5, 81,
	28, 81,
	-2, 35,
}

const yyPrivate = 57344

const yyLast = 1323

var yyAct = [...]int16{
	28, 161, 263, 22, 169, 69, 207, 240, 144, 112,
	34, 130, 130, 187, 264, 241, 200, 198, 199, 201,
	267, 162, 202, 165, 3, 235, 80, 76, 74, 81,
	194, 166, 113, 167, 111, 257, 36, 170, 128, 200,
	198, 199, 201, 192, 110, 202, 89, 103, 249, 17,
	114, 66, 248, 47, 126, 269, 196, 243, 232, 9,
	111, 119, 120, 121, 122, 123, 105, 106, 107, 109,
	115, 127, 255, 237, 125, 82, 212, 131, 104, 77,
	134, 230, 216, 218, 136, 137, 138, 139, 140, 141,
	145, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 164, 2, 176, 214, 130,
	50, 266, 174, 171, 111, 124, 132, 89, 103, 51,
	168, 70, 4, 9, 172, 180, 146, 73, 9, 98,
	99, 100, 101, 102, 184, 270, 189, 175, 71, 190,
	177, 50, 179, 112, 72, 277, 133, 205, 270, 104,
	51, 238, 10, 173, 200, 198, 199, 201, 271, 181,
	202, 239, 5, 8, 193, 252, 67, 203, 204, 163,
	183, 68, 6, 1, 188, 171, 206, 213, 21, 215,
	197, 20, 195, 19, 18, 46, 189, 189, 78, 190,
	190, 37, 226, 227, 38, 231, 16, 234, 233, 220,
	222, 228, 217, 89, 103, 208, 209, 210, 200, 198,
	199, 201, 39, 44, 202, 45, 40, 100, 101, 102,
	189, 43, 42, 190, 221, 223, 224, 41, 48, 146,
	11, 15, 14, 244, 13, 104, 250, 12, 118, 108,
	142, 24, 258, 259, 236, 253, 75, 35, 7, 234,
	261, 129, 251, 0, 0, 256, 0, 0, 245, 246,
	0, 247, 0, 0, 0, 0, 0, 0, 274, 273,
	265, 0, 268, 0, 0, 208, 0, 0, 254, 0,
	0, 0, 0, 260, 0, 275, 23, 0, 0, 0,
	262, 50, 52, 61, 59, 60, 225, 0, 0, 55,
	51, 56, 0, 0, 272, 62, 63, 0, 0, 0,
	276, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	0, 0, 0, 0, 64, 65, 0, 0, 53, 54,
	0, 57, 58, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 25, 0, 0, 27, 26, 33, 0,
	0, 0, 31, 29, 0, 0, 0, 32, 0, 23,
	0, 0, 0, 30, 50, 52, 61, 59, 60, 182,
	0, 0, 55, 51, 56, 0, 0, 0, 62, 63,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 65, 0,
	0, 53, 54, 0, 57, 58, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 25, 0, 0, 27,
	26, 33, 0, 0, 0, 31, 29, 0, 0, 0,
	32, 0, 23, 0, 0, 0, 30, 50, 52, 61,
	59, 60, 0, 0, 0, 55, 51, 56, 0, 66,
	0, 62, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 65, 0, 0, 53, 54, 0, 57, 58, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 25,
	0, 0, 27, 26, 33, 0, 0, 0, 31, 29,
	0, 0, 0, 32, 0, 23, 0, 0, 0, 30,
	50, 52, 61, 59, 60, 0, 0, 0, 55, 51,
	56, 0, 9, 0, 62, 63, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 65, 0, 0, 53, 54, 0,
	57, 58, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 25, 0, 0, 27, 26, 33, 0, 0,
	0, 31, 29, 0, 0, 0, 32, 50, 52, 61,
	59, 60, 30, 0, 0, 55, 51, 56, 0, 0,
	0, 62, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 65, 0, 0, 53, 54, 0, 57, 58, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 25,
	0, 0, 27, 26, 33, 0, 0, 0, 31, 29,
	0, 0, 0, 32, 0, 79, 0, 0, 0, 30,
	50, 52, 61, 59, 60, 0, 0, 0, 55, 51,
	56, 0, 0, 0, 62, 63, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 65, 0, 0, 53, 54, 0,
	57, 58, 0, 0, 0, 89, 103, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 98, 99, 100,
	101, 102, 29, 90, 91, 94, 95, 96, 97, 83,
	84, 86, 85, 87, 93, 92, 0, 104, 0, 89,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 100, 101, 102, 88, 90, 91, 94,
	95, 96, 97, 83, 84, 86, 85, 87, 93, 92,
	0, 104, 0, 89, 103, 0, 0, 0, 0, 0,
	0, 0, 242, 0, 0, 98, 99, 100, 101, 102,
	88, 90, 91, 94, 95, 96, 97, 0, 0, 0,
	219, 0, 93, 92, 0, 104, 0, 89, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 100, 101, 102, 88, 90, 91, 94, 95, 96,
	97, 89, 103, 0, 0, 0, 93, 92, 0, 104,
	0, 9, 0, 98, 99, 100, 101, 102, 186, 90,
	91, 94, 95, 96, 97, 89, 103, 0, 88, 0,
	93, 92, 0, 104, 0, 0, 0, 98, 99, 100,
	101, 102, 0, 90, 91, 94, 95, 96, 97, 89,
	103, 130, 88, 0, 93, 92, 0, 104, 0, 0,
	0, 98, 99, 100, 101, 102, 0, 90, 91, 94,
	95, 96, 97, 89, 103, 0, 88, 0, 93, 92,
	0, 104, 178, 0, 0, 98, 99, 100, 101, 102,
	0, 90, 91, 94, 95, 96, 97, 89, 103, 0,
	88, 0, 93, 92, 0, 104, 0, 0, 0, 98,
	99, 100, 101, 102, 0, 90, 91, 94, 95, 96,
	97, 89, 103, 0, 88, 0, 93, 92, 0, 104,
	0, 0, 0, 98, 99, 100, 101, 102, 0, 90,
	91, 94, 95, 96, 97, 89, 103, 0, 88, 0,
	93, 0, 0, 104, 0, 0, 0, 98, 99, 100,
	101, 102, 0, 90, 91, 94, 95, 96, 97, 0,
	0, 0, 88, 0, 0, 0, 0, 104, 50, 52,
	61, 59, 60, 0, 0, 0, 55, 51, 56, 0,
	9, 0, 62, 63, 0, 0, 88, 0, 0, 50,
	52, 61, 59, 60, 0, 229, 0, 55, 51, 56,
	0, 64, 65, 62, 63, 53, 54, 0, 57, 58,
	50, 52, 61, 59, 60, 0, 0, 211, 55, 51,
	56, 0, 64, 65, 62, 63, 53, 54, 0, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 65, 0, 0, 53, 54, 185,
	57, 58, 0, 0, 50, 52, 61, 59, 60, 0,
	0, 0, 55, 51, 56, 0, 0, 0, 62, 63,
	50, 52, 61, 59, 60, 0, 143, 0, 55, 51,
	56, 0, 0, 0, 62, 63, 0, 64, 65, 0,
	0, 53, 54, 0, 57, 58, 0, 0, 0, 0,
	0, 0, 0, 64, 65, 0, 0, 53, 54, 135,
	57, 58, 0, 0, 50, 52, 61, 59, 60, 0,
	0, 0, 55, 51, 56, 0, 0, 0, 62, 63,
	50, 52, 61, 59, 60, 117, 0, 0, 55, 51,
	56, 0, 0, 0, 62, 63, 0, 64, 65, 0,
	0, 53, 54, 0, 57, 58, 0, 0, 0, 0,
	0, 0, 0, 64, 65, 0, 0, 53, 54, 0,
	57, 58, 50, 52, 61, 59, 60, 0, 0, 116,
	55, 51, 56, 0, 0, 0, 62, 63, 50, 52,
	61, 59, 60, 0, 0, 0, 55, 51, 56, 0,
	0, 0, 62, 63, 0, 64, 65, 0, 0, 53,
	54, 0, 57, 58, 0, 0, 0, 0, 0, 0,
	0, 64, 65, 0, 0, 53, 54, 0, 57, 58,
	50, 52, 61, 59, 191, 0, 0, 0, 55, 51,
	56, 0, 0, 0, 62, 63, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 103, 0, 64, 65, 0, 0, 53, 54, 0,
	57, 58, 98, 99, 100, 101, 102, 0, 90, 91,
	94, 95, 96, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 104,
}

var yyPact = [...]int16{
	22, 115, 501, -1000, -1000, -1000, 428, 568, 117, -1000,
	123, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -25, 641, -1000, -1000, 718, 101,
	101, 101, 101, 1209, 4, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1209,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1193,
	1151, 1209, 1209, 1209, 1209, 103, -1000, -1000, 117, 50,
	-1000, -1000, -1000, -1000, 96, -1000, 1209, 96, 142, 1135,
	718, -1000, -1000, 1209, 1209, 1209, 1209, 1209, 1209, 1091,
	1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
	1209, 1209, 1209, 989, 1209, 3, 5, 109, -39, -1000,
	138, 906, 1209, 1209, 858, 107, -1000, -1000, 102, 882,
	810, 35, 35, 35, 1209, 50, -1000, -1000, -1000, -1000,
	355, 858, -1000, 1075, 834, 1251, 906, 906, 906, 906,
	906, 1279, 38, -1000, -1000, 906, 2, 106, 106, 930,
	954, 106, 106, 106, 106, 192, 192, 35, 35, 35,
	810, 36, -1000, 30, -1000, -15, 1209, 1209, 132, 101,
	101, 906, 138, -1000, 1031, 60, 1209, 94, 1209, 67,
	810, 69, -1000, -1000, 786, 1251, 1251, 96, -1000, 718,
	-1000, 282, 1010, 66, 1209, 42, 989, -3, -1000, -1000,
	-1000, -1000, -1000, 906, 906, -1, 146, -1000, -13, -1000,
	-1000, -1000, -1000, 752, -1000, 906, -1000, 41, -1000, 1251,
	96, -1000, 96, -1000, -1000, -1000, 684, 906, -1000, -1000,
	-1000, 906, -1000, 32, 906, 1209, -1000, 154, 101, -2,
	-38, 1209, 1209, -1000, 96, -1000, -1000, -1000, 989, -1000,
	906, 96, -15, -1000, -1000, 100, -8, -15, 906, 906,
	-1000, 39, -1000, 143, -1000, 96, -15, 1209, -1000, -1000,
	-15, 96, -1000, 130, 906, -1000, -1000, 96, -1000,
}

var yyPgo = [...]uint8{
	0, 38, 251, 159, 248, 247, 246, 241, 240, 10,
	239, 2, 238, 163, 3, 237, 234, 232, 231, 230,
	228, 8, 36, 227, 222, 221, 216, 215, 213, 53,
	0, 212, 196, 1, 194, 191, 188, 13, 185, 14,
	49, 184, 183, 181, 178, 6, 176, 173, 5, 152,
	169, 21,
}

var yyR1 = [...]int8{
	0, 48, 48, 48, 48, 49, 49, 49, 50, 50,
	51, 51, 47, 47, 47, 47, 47, 3, 3, 3,
	4, 4, 4, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 32, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 39,
	39, 39, 39, 39, 41, 40, 40, 40, 40, 10,
	10, 43, 43, 45, 45, 45, 45, 45, 45, 44,
	44, 46, 46, 11, 11, 42, 42, 42, 42, 42,
	42, 9, 9, 14, 14, 14, 14, 14, 14, 18,
	17, 15, 36, 36, 36, 37, 37, 16, 16, 16,
	16, 16, 16, 16, 16, 19, 19, 5, 7, 7,
	6, 1, 1, 2, 29, 8, 8, 8, 8, 21,
	20, 20, 20, 23, 23, 23, 24, 24, 24, 24,
	24, 24, 24, 24, 25, 25, 25, 25, 25, 26,
	27, 27, 28, 33, 33, 38, 38, 34, 34, 34,
	12, 12, 31, 31, 22, 22, 35, 35, 35, 35,
	35, 35, 35,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 1, 2, 2, 1, 2,
	1, 0, 2, 2, 3, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 6, 4, 2, 4, 1,
	3, 2, 4, 1, 3, 4, 3, 3, 5, 1,
	2, 1, 3, 1, 3, 5, 7, 9, 6, 8,
	10, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 7, 6, 6,
	5, 6, 5, 5, 4, 1, 3, 3, 1, 2,
	3, 1, 3, 2, 3, 3, 3, 1, 1, 3,
	5, 5, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	5, 5, 3, 1, 1, 8, 6, 4, 4, 2,
	3, 5, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -47, 84, 2, 7, -3, -50, -4, -13, 21,
	-49, -19, -15, -16, -17, -18, -32, -40, -41, -42,
	-43, -44, -14, 4, -7, 61, 65, 64, -30, 71,
	81, 70, 75, 66, -9, -5, -22, -35, -34, -31,
	-26, -23, -24, -25, -28, -27, -38, -29, -20, 51,
	9, 18, 10, 46, 47, 17, 19, 49, 50, 12,
	13, 11, 23, 24, 42, 43, 21, -3, -13, -48,
	4, 21, 21, 4, 53, -6, 52, -29, -36, 4,
	-30, -14, -40, 35, 36, 38, 37, 39, 62, 11,
	29, 30, 41, 40, 31, 32, 33, 34, 23, 24,
	25, 26, 27, 12, 43, -22, -22, -22, -10, -22,
	-9, -30, 5, 28, -30, -9, 16, 14, -12, -30,
	-30, -30, -30, -30, 12, -48, 4, 21, -1, -2,
	13, -30, -1, 4, -30, 4, -30, -30, -30, -30,
	-30, -30, -8, 15, -21, -30, -22, -30, -30, -30,
	-30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
	-30, -33, -51, -50, -30, 20, 28, 28, 11, 43,
	76, -30, -9, -1, 5, -51, 5, -51, 20, -51,
	-30, -3, 14, -1, -30, 4, 4, -37, -1, -30,
	-14, 13, 5, -51, 28, -51, 20, -39, 55, 56,
	54, 57, 60, -30, -30, 15, -46, -45, -22, -22,
	-22, 16, 16, -30, 14, -30, 15, -51, 14, 4,
	-37, -1, -37, -1, -1, 14, -30, -30, -21, 15,
	15, -30, 16, -33, -30, 28, -1, 74, 5, 15,
	20, 28, 20, 16, -37, -1, -1, -1, 20, 16,
	-30, -39, 11, -45, -1, 74, -39, 73, -30, -30,
	-1, -33, -1, -11, -39, -39, 11, 28, -39, 16,
	5, 15, -1, -11, -30, -39, -1, 15, -1,
}

var yyDef = [...]int16{
	0, -2, 0, 16, 15, 12, 13, 18, 19, 8,
	21, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 5, 105, 0, 90, 89, -2, 0,
	0, 0, 0, 69, 0, 108, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 0,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 9, 14, 17, 20,
	1, 2, 6, 7, 0, 109, 0, 47, 0, 0,
	-2, 93, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 11, 0, 57, 0, 0, 61, 59,
	70, 81, 0, 0, 0, 11, 149, 152, 11, 0,
	11, 123, 124, 125, 0, 22, 3, 4, 106, 111,
	0, 0, 91, 0, 0, 0, 84, 85, 86, 87,
	88, 114, 11, 122, 117, 118, 36, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	-2, 0, 144, 10, 142, 0, 0, 0, 0, 0,
	0, 82, 83, 107, 0, 0, 0, 0, 0, 0,
	11, 0, 113, 110, 0, 0, 0, 0, 104, -2,
	96, 0, 0, 0, 0, 0, 11, 56, 49, 50,
	51, 52, 53, 58, 54, 0, 0, 71, 63, 60,
	62, 148, 147, 0, 153, 150, 139, 0, 112, 0,
	0, 100, 0, 102, 103, -2, -2, 115, 116, 121,
	120, 119, 140, 0, 143, 0, 75, 0, 0, 0,
	0, 0, 0, 141, 0, 98, 99, 101, 11, 146,
	55, 0, 0, 72, 78, 0, 64, 66, 67, 151,
	97, 0, 76, 0, 73, 0, 0, 0, 65, 145,
	0, 0, 79, 0, 68, 74, 77, 0, 80,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:175
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:179
		{
			yylex.(*parser).parseResult = ast.Stmts{}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:183
		{
			yylex.(*parser).parseResult = yyDollar[3].aststmts
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:188
		{
			yylex.(*parser).unexpected("", "")
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:198
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:205
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:211
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:215
		{
			yyVAL.aststmts = ast.Stmts{}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:219
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:266
		{
			yyVAL.node = yylex.(*parser).newBuiltinType(yyDollar[1].item)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:270
		{
			yyVAL.node = yylex.(*parser).newBuiltinType(yyDollar[1].item)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:274
		{
			yyVAL.node = yylex.(*parser).newBuiltinType(yyDollar[1].item)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:278
		{
			yyVAL.node = yylex.(*parser).newBuiltinType(yyDollar[1].item)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:282
		{
			yyVAL.node = yylex.(*parser).newBuiltinType(yyDollar[1].item)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:289
		{
			yyVAL.node = yylex.(*parser).newConstDefStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node)
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:296
		{
			yyVAL.node = yylex.(*parser).newLetStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:300
		{
			yyVAL.node = yylex.(*parser).newLetStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, nil)
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:304
		{
			yyVAL.node = yylex.(*parser).newLetStmt(yyDollar[1].item, nil, nil, nil)
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:308
		{
			yyVAL.node = yylex.(*parser).newLetStmt(yyDollar[1].item, yyDollar[2].node, nil, nil)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:320
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:324
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:330
		{
			yyVAL.node = yylex.(*parser).newImportStmt(yyDollar[1].item, yyDollar[2].nodes, nil)
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:334
		{
			yyVAL.node = yylex.(*parser).newImportStmt(yyDollar[1].item, yyDollar[2].nodes, yyDollar[4].node)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:341
		{
			yyVAL.fnparam = yylex.(*parser).newFnParam(yyDollar[1].node, nil, nil)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:345
		{
			yyVAL.fnparam = yylex.(*parser).newFnParam(yyDollar[1].node, yyDollar[3].node, nil)
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:349
		{
			yyVAL.fnparam = yylex.(*parser).newFnParam(yyDollar[1].node, yyDollar[4].node, nil, true)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:353
		{
			yyVAL.fnparam = yylex.(*parser).newFnParam(yyDollar[1].node, nil, nil, true)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:357
		{
			yyVAL.fnparam = yylex.(*parser).newFnParam(yyDollar[1].node, nil, yyDollar[3].node)
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:361
		{
			yyVAL.fnparam = yylex.(*parser).newFnParam(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:368
		{
			yyVAL.node = yylex.(*parser).newReturnStmt(yyDollar[1].item, nil)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:372
		{
			yyVAL.node = yylex.(*parser).newReturnStmt(yyDollar[1].item, yyDollar[2].nodes)
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:379
		{
			yyVAL.fnparams = []ast.FnParam{yyDollar[1].fnparam}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:383
		{
			yyVAL.fnparams = append(yyVAL.fnparams, yyDollar[3].fnparam)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:390
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:394
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:402
		{
			yyVAL.node = yylex.(*parser).newFnDefStmt(yyDollar[1].item, yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 76:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:406
		{
			yyVAL.node = yylex.(*parser).newFnDefStmt(yyDollar[1].item, yyDollar[2].node, nil, []ast.Node{yyDollar[6].node}, yyDollar[7].astblock)
		}
	case 77:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:410
		{
			yyVAL.node = yylex.(*parser).newFnDefStmt(yyDollar[1].item, yyDollar[2].node, nil, yyDollar[7].nodes, yyDollar[9].astblock)
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:414
		{
			yyVAL.node = yylex.(*parser).newFnDefStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].fnparams, nil, yyDollar[6].astblock)
		}
	case 79:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:418
		{
			yyVAL.node = yylex.(*parser).newFnDefStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].fnparams, []ast.Node{yyDollar[7].node}, yyDollar[8].astblock)
		}
	case 80:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:422
		{
			yyVAL.node = yylex.(*parser).newFnDefStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].fnparams, yyDollar[8].nodes, yyDollar[10].astblock)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:428
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:432
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:439
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				yyDollar[1].nodes, yyDollar[3].nodes, yyDollar[2].item)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:444
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:449
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:454
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:459
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:464
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:472
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:479
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:490
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:509
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 98:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:513
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 99:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:517
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:521
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:525
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[3].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:529
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[3].node, nil, nil, yyDollar[5].astblock)
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:533
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:537
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, nil, nil, nil, yyDollar[4].astblock)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:544
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:548
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:554
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:560
		{
			yyVAL.iflist = []*ast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:564
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:570
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:578
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[3].item, yyDollar[2].aststmts)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:585
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:596
		{
			yyVAL.node = yylex.(*parser).newInExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:602
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:606
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:610
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:614
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:620
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt([]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 120:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:627
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:631
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:635
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[3].item, yyDollar[1].node, nil)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:641
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:645
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:649
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:655
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:659
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:663
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:667
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:671
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:675
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:679
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:683
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:690
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:694
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:698
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:702
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:706
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:713
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[4].item, yyDollar[2].node)
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:720
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].node)
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:724
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[2].item, yyDollar[5].item, nil, yyDollar[3].node, yyDollar[1].item)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:731
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:738
		{
			yyVAL.node = yyDollar[1].node
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:742
		{
			yyVAL.node = nil
		}
	case 145:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:749
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[2].item, yyDollar[8].item, yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:753
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[2].item, yyDollar[6].item, yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:762
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[4].item, yyDollar[2].nodes)
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:766
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[4].item, yyDollar[2].nodes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:770
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:776
		{
			yyVAL.map_nodes = [][2]ast.Node{[2]ast.Node{yyDollar[1].node, yyDollar[3].node}}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:780
		{
			yyVAL.map_nodes = append(yyVAL.map_nodes, [2]ast.Node{yyDollar[3].node, yyDollar[5].node})
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:786
		{
			yyVAL.node = yylex.(*parser).newMapLiteral(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:790
		{
			yyVAL.node = yylex.(*parser).newMapLiteral(yyDollar[1].item, yyDollar[4].item, yyDollar[2].map_nodes)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:797
		{
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:801
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:808
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:812
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:816
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:820
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:825
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:830
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:834
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
