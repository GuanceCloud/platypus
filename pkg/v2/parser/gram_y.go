// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	ast "github.com/GuanceCloud/platypus/pkg/v2/ast"
)

//line gram.y:15
type yySymType struct {
	yys      int
	aststmts ast.Stmts
	astblock *ast.BlockStmt

	classbody any
	fnparams  any

	ifitem    *ast.IfStmtElem
	iflist    []*ast.IfStmtElem
	node      ast.Node
	nodes     []ast.Node
	map_nodes [][2]ast.Node
	item      Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const EOF = 57349
const ERROR = 57350
const ID = 57351
const NUMBER = 57352
const LEFT_PAREN = 57353
const LEFT_BRACKET = 57354
const LEFT_BRACE = 57355
const RIGHT_BRACE = 57356
const RIGHT_PAREN = 57357
const RIGHT_BRACKET = 57358
const STRING = 57359
const QUOTED_STRING = 57360
const MULTILINE_STRING = 57361
const COLON = 57362
const EOL = 57363
const operatorsStart = 57364
const ADD = 57365
const SUB = 57366
const MUL = 57367
const DIV = 57368
const MOD = 57369
const EQ = 57370
const GTE = 57371
const GT = 57372
const LT = 57373
const LTE = 57374
const NEQ = 57375
const EQEQ = 57376
const ADD_EQ = 57377
const SUB_EQ = 57378
const DIV_EQ = 57379
const MUL_EQ = 57380
const MOD_EQ = 57381
const AND = 57382
const OR = 57383
const NOT = 57384
const DOT = 57385
const operatorsEnd = 57386
const keywordsStart = 57387
const TRUE = 57388
const FALSE = 57389
const CLASS = 57390
const NIL = 57391
const NULL = 57392
const IF = 57393
const ELIF = 57394
const ELSE = 57395
const STR = 57396
const INT = 57397
const FLOAT = 57398
const BOOL = 57399
const LIST = 57400
const MAP = 57401
const ANY = 57402
const FOR = 57403
const IN = 57404
const WHILE = 57405
const BREAK = 57406
const CONTINUE = 57407
const RETURN = 57408
const SWITCH = 57409
const CASE = 57410
const GOTO = 57411
const FN = 57412
const LET = 57413
const VAR = 57414
const VAR_ARG = 57415
const FN_RET = 57416
const IMPORT = 57417
const AS = 57418
const TYPE = 57419
const NEW = 57420
const MAKE = 57421
const INTERFACE = 57422
const CONST = 57423
const keywordsEnd = 57424
const startSymbolsStart = 57425
const START_STMTS = 57426
const startSymbolsEnd = 57427
const UMINUS = 57428

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"COLON",
	"EOL",
	"operatorsStart",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"EQ",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"NEQ",
	"EQEQ",
	"ADD_EQ",
	"SUB_EQ",
	"DIV_EQ",
	"MUL_EQ",
	"MOD_EQ",
	"AND",
	"OR",
	"NOT",
	"DOT",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"CLASS",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"ANY",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"SWITCH",
	"CASE",
	"GOTO",
	"FN",
	"LET",
	"VAR",
	"VAR_ARG",
	"FN_RET",
	"IMPORT",
	"AS",
	"TYPE",
	"NEW",
	"MAKE",
	"INTERFACE",
	"CONST",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:895

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 28,
	5, 93,
	28, 93,
	-2, 35,
	-1, 80,
	4, 105,
	-2, 93,
	-1, 160,
	20, 155,
	-2, 11,
	-1, 202,
	13, 108,
	-2, 93,
	-1, 236,
	1, 126,
	4, 126,
	7, 126,
	14, 126,
	21, 126,
	-2, 164,
	-1, 237,
	5, 93,
	28, 93,
	-2, 35,
}

const yyPrivate = 57344

const yyLast = 1446

var yyAct = [...]int16{
	28, 218, 161, 285, 217, 181, 301, 34, 130, 130,
	292, 144, 69, 289, 22, 210, 200, 76, 74, 256,
	207, 36, 112, 17, 3, 162, 80, 257, 66, 265,
	209, 205, 189, 264, 111, 291, 89, 103, 182, 267,
	81, 110, 293, 89, 103, 113, 47, 9, 9, 82,
	114, 105, 106, 108, 109, 98, 99, 100, 101, 102,
	111, 119, 120, 121, 122, 123, 126, 115, 104, 274,
	253, 259, 77, 50, 248, 104, 243, 131, 241, 250,
	134, 125, 51, 127, 136, 137, 138, 139, 140, 141,
	145, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 164, 2, 128, 187, 50,
	50, 146, 177, 184, 111, 286, 216, 169, 51, 51,
	70, 185, 213, 73, 9, 193, 50, 175, 212, 223,
	50, 175, 307, 177, 197, 51, 202, 71, 169, 51,
	72, 188, 294, 294, 190, 227, 192, 89, 103, 282,
	203, 214, 311, 309, 294, 167, 168, 170, 229, 178,
	171, 100, 101, 102, 304, 294, 225, 211, 206, 130,
	179, 283, 254, 276, 254, 295, 167, 168, 170, 104,
	178, 171, 269, 268, 255, 132, 208, 124, 184, 215,
	224, 179, 226, 180, 4, 112, 133, 10, 1, 202,
	202, 8, 219, 220, 221, 237, 238, 21, 242, 68,
	245, 246, 244, 203, 203, 231, 233, 239, 20, 228,
	251, 165, 186, 194, 19, 183, 5, 146, 18, 163,
	67, 202, 6, 173, 175, 176, 175, 219, 172, 196,
	174, 46, 78, 201, 37, 203, 38, 260, 16, 39,
	44, 45, 40, 43, 42, 41, 272, 48, 277, 278,
	11, 15, 14, 13, 12, 245, 118, 280, 107, 142,
	175, 24, 75, 35, 7, 175, 219, 129, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	298, 0, 297, 175, 0, 0, 175, 0, 175, 0,
	0, 0, 0, 0, 305, 0, 232, 234, 235, 0,
	175, 310, 79, 0, 175, 0, 175, 50, 52, 61,
	59, 60, 175, 175, 252, 55, 51, 56, 247, 175,
	249, 62, 63, 0, 0, 0, 0, 0, 261, 262,
	0, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 65, 0, 0, 53, 54, 0, 57, 58, 0,
	0, 0, 0, 273, 266, 0, 0, 0, 279, 270,
	0, 0, 275, 0, 0, 0, 0, 0, 284, 29,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	287, 0, 290, 0, 0, 296, 50, 0, 300, 177,
	0, 0, 0, 303, 169, 51, 0, 0, 299, 0,
	302, 0, 308, 23, 0, 0, 0, 306, 50, 52,
	61, 59, 60, 236, 0, 0, 55, 51, 56, 0,
	0, 0, 62, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 168, 170, 0, 178, 171, 0, 0,
	0, 64, 65, 0, 0, 53, 54, 179, 57, 58,
	49, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	25, 0, 0, 27, 26, 33, 0, 0, 0, 30,
	29, 0, 23, 0, 31, 0, 32, 50, 52, 61,
	59, 60, 195, 0, 0, 55, 51, 56, 0, 0,
	0, 62, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 65, 0, 0, 53, 54, 0, 57, 58, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 25,
	0, 0, 27, 26, 33, 0, 0, 0, 30, 29,
	0, 23, 0, 31, 0, 32, 50, 52, 61, 59,
	60, 0, 0, 0, 55, 51, 56, 0, 66, 0,
	62, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	65, 0, 0, 53, 54, 0, 57, 58, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 25, 0,
	0, 27, 26, 33, 0, 0, 0, 30, 29, 0,
	23, 0, 31, 0, 32, 50, 52, 61, 59, 60,
	0, 0, 0, 55, 51, 56, 0, 9, 0, 62,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 65,
	0, 0, 53, 54, 0, 57, 58, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 25, 0, 0,
	27, 26, 33, 0, 0, 0, 30, 29, 0, 0,
	0, 31, 0, 32, 50, 52, 61, 59, 60, 0,
	0, 0, 55, 51, 56, 0, 0, 0, 62, 63,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 65, 0,
	0, 53, 54, 0, 57, 58, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 25, 0, 0, 27,
	26, 33, 89, 103, 0, 30, 29, 0, 0, 0,
	31, 191, 32, 0, 98, 99, 100, 101, 102, 0,
	90, 91, 94, 95, 96, 97, 83, 84, 86, 85,
	87, 93, 92, 0, 104, 0, 89, 103, 50, 0,
	288, 177, 0, 0, 0, 0, 169, 51, 98, 99,
	100, 101, 102, 88, 90, 91, 94, 95, 96, 97,
	83, 84, 86, 85, 87, 93, 92, 50, 104, 271,
	177, 0, 0, 0, 50, 169, 51, 177, 0, 0,
	0, 0, 169, 51, 167, 168, 170, 88, 178, 171,
	0, 0, 50, 166, 0, 177, 0, 0, 0, 179,
	169, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 167, 168, 170, 0, 178, 171, 0,
	167, 168, 170, 0, 178, 171, 0, 0, 179, 0,
	0, 0, 0, 0, 0, 179, 89, 103, 167, 168,
	170, 0, 178, 171, 0, 258, 0, 0, 98, 99,
	100, 101, 102, 179, 90, 91, 94, 95, 96, 97,
	0, 0, 0, 230, 0, 93, 92, 0, 104, 0,
	89, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 100, 101, 102, 88, 90, 91,
	94, 95, 96, 97, 89, 103, 0, 0, 0, 93,
	92, 0, 104, 0, 9, 0, 98, 99, 100, 101,
	102, 199, 90, 91, 94, 95, 96, 97, 89, 103,
	0, 88, 0, 93, 92, 0, 104, 0, 0, 0,
	98, 99, 100, 101, 102, 0, 90, 91, 94, 95,
	96, 97, 89, 103, 130, 88, 0, 93, 92, 0,
	104, 0, 0, 0, 98, 99, 100, 101, 102, 0,
	90, 91, 94, 95, 96, 97, 89, 103, 0, 88,
	0, 93, 92, 0, 104, 191, 0, 0, 98, 99,
	100, 101, 102, 0, 90, 91, 94, 95, 96, 97,
	89, 103, 0, 88, 0, 93, 92, 0, 104, 0,
	0, 0, 98, 99, 100, 101, 102, 0, 90, 91,
	94, 95, 96, 97, 89, 103, 0, 88, 0, 93,
	92, 0, 104, 0, 0, 0, 98, 99, 100, 101,
	102, 0, 90, 91, 94, 95, 96, 97, 89, 103,
	0, 88, 0, 93, 0, 0, 104, 0, 0, 0,
	98, 99, 100, 101, 102, 0, 90, 91, 94, 95,
	96, 97, 0, 0, 0, 88, 0, 0, 0, 0,
	104, 50, 52, 61, 59, 60, 0, 0, 0, 55,
	51, 56, 0, 9, 0, 62, 63, 0, 0, 88,
	0, 0, 50, 52, 61, 59, 60, 0, 240, 0,
	55, 51, 56, 0, 64, 65, 62, 63, 53, 54,
	0, 57, 58, 50, 52, 61, 59, 60, 0, 0,
	222, 55, 51, 56, 0, 64, 65, 62, 63, 53,
	54, 0, 57, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 65, 0, 0,
	53, 54, 198, 57, 58, 0, 0, 50, 52, 61,
	59, 60, 0, 0, 0, 55, 51, 56, 0, 0,
	0, 62, 63, 50, 52, 61, 59, 60, 0, 143,
	0, 55, 51, 56, 0, 0, 0, 62, 63, 0,
	64, 65, 0, 0, 53, 54, 0, 57, 58, 0,
	0, 0, 0, 0, 0, 0, 64, 65, 0, 0,
	53, 54, 135, 57, 58, 0, 0, 50, 52, 61,
	59, 60, 0, 0, 0, 55, 51, 56, 0, 0,
	0, 62, 63, 50, 52, 61, 59, 60, 117, 0,
	0, 55, 51, 56, 0, 0, 0, 62, 63, 0,
	64, 65, 0, 0, 53, 54, 0, 57, 58, 0,
	0, 0, 0, 0, 0, 0, 64, 65, 0, 0,
	53, 54, 0, 57, 58, 50, 52, 61, 59, 60,
	0, 0, 116, 55, 51, 56, 0, 0, 0, 62,
	63, 50, 52, 61, 59, 60, 0, 0, 0, 55,
	51, 56, 0, 0, 0, 62, 63, 0, 64, 65,
	0, 0, 53, 54, 0, 57, 58, 0, 0, 0,
	0, 0, 0, 0, 64, 65, 0, 0, 53, 54,
	0, 57, 58, 50, 52, 61, 59, 204, 0, 0,
	0, 55, 51, 56, 0, 0, 0, 62, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 103, 0, 64, 65, 0, 0,
	53, 54, 0, 57, 58, 98, 99, 100, 101, 102,
	0, 90, 91, 94, 95, 96, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 104,
}

var yyPact = [...]int16{
	22, 187, 616, -1000, -1000, -1000, 547, 685, 116, -1000,
	119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -35, 308, -1000, -1000, 775, 117,
	117, 117, 117, 1332, 17, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1332,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1316,
	1274, 1332, 1332, 1332, 1332, 175, -1000, -1000, 116, 62,
	-1000, -1000, -1000, -1000, 156, -1000, 1332, 156, 192, 1258,
	775, -1000, -1000, 1332, 1332, 1332, 1332, 1332, 1332, 1214,
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
	1332, 1332, 1332, 1112, 1332, 815, 182, -38, -1000, 833,
	190, 1029, 1332, 1332, 981, 103, -1000, -1000, 27, 1005,
	933, 25, 25, 25, 1332, 62, -1000, -1000, -1000, -1000,
	478, 981, -1000, 1198, 957, 1374, 1029, 1029, 1029, 1029,
	1029, 1402, 26, -1000, -1000, 1029, -8, 32, 32, 1053,
	1077, 32, 32, 32, 32, 136, 136, 25, 25, 25,
	933, 10, -1000, 7, -1000, -13, 1332, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 112, 139, 178,
	101, 117, 117, -1000, 1029, 190, -1000, 1154, 113, 1332,
	152, 1332, 130, 933, 144, -1000, -1000, 909, 1374, 1374,
	156, -1000, 775, -1000, 409, 1133, 63, 1332, 60, 1112,
	1332, 1029, 833, 58, 833, 64, -4, 169, -1000, -1,
	-1000, -1000, -1000, -1000, 875, -1000, 1029, -1000, 55, -1000,
	1374, 156, -1000, 156, -1000, -1000, -1000, 741, 1029, -1000,
	-1000, -1000, 1029, -1000, 13, 1029, 1029, -1000, 833, 23,
	170, 167, -1000, 808, 117, -5, 100, 1332, 1332, -1000,
	156, -1000, -1000, -1000, 1112, -1000, -1000, 833, 135, 158,
	156, 833, -1000, -1000, 779, -15, 833, 1029, 1029, -1000,
	19, -1000, -64, 28, -1000, 160, -1000, 156, 833, 1332,
	-1000, -1000, 387, -68, 833, 156, -1000, 149, 1029, -1000,
	833, 121, -1000, -1000, 156, 138, -1000, 833, -1000, -1000,
	137, -1000,
}

var yyPgo = [...]int16{
	0, 107, 277, 223, 274, 273, 272, 271, 269, 7,
	268, 266, 201, 14, 264, 263, 262, 261, 260, 257,
	11, 21, 255, 254, 253, 252, 251, 250, 46, 0,
	249, 248, 2, 246, 244, 242, 16, 241, 115, 240,
	238, 235, 233, 23, 228, 224, 218, 207, 4, 1,
	198, 12, 197, 229, 25, 3,
}

var yyR1 = [...]int8{
	0, 51, 51, 51, 51, 52, 52, 52, 53, 53,
	54, 54, 50, 50, 50, 50, 50, 3, 3, 3,
	4, 4, 4, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 31, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 40,
	41, 42, 43, 43, 43, 39, 39, 39, 39, 39,
	39, 10, 10, 45, 45, 46, 49, 49, 49, 49,
	49, 47, 47, 48, 48, 55, 55, 44, 44, 44,
	44, 44, 44, 9, 9, 13, 13, 13, 13, 13,
	13, 28, 17, 16, 14, 35, 35, 35, 36, 36,
	15, 15, 15, 15, 15, 15, 15, 15, 18, 18,
	5, 7, 7, 6, 1, 1, 2, 8, 8, 8,
	8, 20, 19, 19, 19, 22, 22, 22, 23, 23,
	23, 23, 23, 23, 23, 23, 24, 24, 24, 24,
	24, 25, 26, 26, 27, 32, 32, 37, 37, 33,
	33, 33, 11, 11, 30, 30, 21, 21, 34, 34,
	34, 34, 34, 34, 34,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 1, 2, 2, 1, 2,
	1, 0, 2, 2, 3, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 5, 5, 3, 4, 5, 7, 9, 6, 8,
	10, 1, 3, 2, 4, 3, 1, 3, 4, 3,
	5, 1, 2, 1, 3, 1, 3, 5, 7, 9,
	6, 8, 10, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 3, 1, 1, 1, 1, 1,
	7, 6, 6, 5, 6, 5, 5, 4, 1, 3,
	3, 1, 2, 3, 1, 3, 2, 3, 3, 1,
	1, 3, 5, 5, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 5, 5, 3, 1, 1, 8, 6, 4,
	4, 2, 3, 5, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -50, 84, 2, 7, -3, -53, -4, -12, 21,
	-52, -18, -14, -15, -16, -17, -31, -43, -44, -45,
	-46, -47, -13, 4, -7, 61, 65, 64, -29, 71,
	70, 75, 77, 66, -9, -5, -21, -34, -33, -30,
	-25, -22, -23, -24, -27, -26, -37, -28, -19, 51,
	9, 18, 10, 46, 47, 17, 19, 49, 50, 12,
	13, 11, 23, 24, 42, 43, 21, -3, -12, -51,
	4, 21, 21, 4, 53, -6, 52, -28, -35, 4,
	-29, -13, -43, 35, 36, 38, 37, 39, 62, 11,
	29, 30, 41, 40, 31, 32, 33, 34, 23, 24,
	25, 26, 27, 12, 43, -21, -21, -10, -21, -21,
	-9, -29, 5, 28, -29, -9, 16, 14, -11, -29,
	-29, -29, -29, -29, 12, -51, 4, 21, -1, -2,
	13, -29, -1, 4, -29, 4, -29, -29, -29, -29,
	-29, -29, -8, 15, -20, -29, -21, -29, -29, -29,
	-29, -29, -29, -29, -29, -29, -29, -29, -29, -29,
	-29, -32, -54, -53, -29, -38, 28, 55, 56, 17,
	57, 60, -40, -42, -39, -21, -41, 12, 59, 70,
	11, 43, 76, -38, -29, -9, -1, 5, -54, 5,
	-54, 20, -54, -29, -3, 14, -1, -29, 4, 4,
	-36, -1, -29, -13, 13, 5, -54, 28, -54, 20,
	28, -29, 16, 10, 12, 11, 15, -48, -49, -21,
	-21, -21, 16, 16, -29, 14, -29, 15, -54, 14,
	4, -36, -1, -36, -1, -1, 14, -29, -29, -20,
	15, 15, -29, 16, -32, -29, -29, -38, 16, -38,
	15, -48, -1, 74, 5, 15, 20, 28, 20, 16,
	-36, -1, -1, -1, 20, 16, -38, 16, 13, 15,
	-38, 11, -49, -1, 74, -38, 73, -29, -29, -1,
	-32, -38, 14, 13, -1, -55, -38, -38, 11, 28,
	-38, 16, 74, 14, 5, 15, -1, -55, -29, -38,
	11, 74, -38, -1, 15, -55, -38, 11, -1, 15,
	-55, 15,
}

var yyDef = [...]int16{
	0, -2, 0, 16, 15, 12, 13, 18, 19, 8,
	21, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 5, 118, 0, 103, 102, -2, 0,
	0, 0, 0, 81, 0, 121, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 0,
	0, 0, 0, 0, 0, 0, 9, 14, 17, 20,
	1, 2, 6, 7, 0, 122, 0, 47, 0, 0,
	-2, 106, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 11, 0, 0, 0, 73, 71, 0,
	82, 93, 0, 0, 0, 11, 161, 164, 11, 0,
	11, 135, 136, 137, 0, 22, 3, 4, 119, 124,
	0, 0, 104, 0, 0, 0, 96, 97, 98, 99,
	100, 101, 11, 134, 129, 130, 36, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	-2, 0, 156, 10, 154, 63, 0, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 0, 0, 0,
	0, 0, 0, 75, 94, 95, 120, 0, 0, 0,
	0, 0, 0, 11, 0, 126, 123, 0, 0, 0,
	0, 117, -2, 109, 0, 0, 0, 0, 0, 11,
	0, 64, 0, 0, 0, 0, 0, 0, 83, 76,
	72, 74, 160, 159, 0, 165, 162, 151, 0, 125,
	0, 0, 113, 0, 115, 116, -2, -2, 127, 128,
	133, 132, 131, 152, 0, 155, 62, 59, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 153,
	0, 111, 112, 114, 11, 158, 60, 0, 0, 0,
	0, 0, 84, 90, 0, 77, 0, 79, 163, 110,
	0, 61, 65, 0, 88, 0, 85, 0, 0, 0,
	78, 157, 0, 68, 0, 0, 91, 0, 80, 66,
	0, 0, 86, 89, 0, 0, 69, 0, 92, 67,
	0, 70,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:177
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:181
		{
			yylex.(*parser).parseResult = ast.Stmts{}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:185
		{
			yylex.(*parser).parseResult = yyDollar[3].aststmts
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:190
		{
			yylex.(*parser).unexpected("", "")
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:200
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:207
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:213
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:217
		{
			yyVAL.aststmts = ast.Stmts{}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:221
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:269
		{
			yyVAL.node = nil
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:273
		{
			yyVAL.node = nil
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:277
		{
			yyVAL.node = nil
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:281
		{
			yyVAL.node = nil
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:285
		{
			yyVAL.node = nil
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:297
		{
			yyVAL.node = nil
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:303
		{
			yyVAL.node = nil
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:308
		{
			yyVAL.node = nil
		}
	case 62:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:314
		{
			yyVAL.node = nil
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:318
		{
			yyVAL.node = nil
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:322
		{
			yyVAL.node = nil
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:329
		{
			yyVAL.node = nil
		}
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:333
		{
			yyVAL.node = nil
		}
	case 67:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:337
		{
			yyVAL.node = nil
		}
	case 68:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:341
		{
			yyVAL.node = nil
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:345
		{
			yyVAL.node = nil
		}
	case 70:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:349
		{
			yyVAL.node = nil
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:360
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:364
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:370
		{
			yyVAL.node = nil
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:374
		{
			yyVAL.node = nil
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:381
		{
			yyVAL.node = nil
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:388
		{
			yyVAL.fnparams = nil
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:392
		{
			yyVAL.fnparams = nil
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:396
		{
			yyVAL.fnparams = nil
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:400
		{
			yyVAL.fnparams = nil
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:404
		{
			yyVAL.fnparams = nil
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:411
		{
			yyVAL.node = nil
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:415
		{
			yyVAL.node = nil
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:433
		{
			yyVAL.node = nil
		}
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:437
		{
			yyVAL.node = nil
		}
	case 89:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:441
		{
			yyVAL.node = nil
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:445
		{
			yyVAL.node = nil
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:449
		{
			yyVAL.node = nil
		}
	case 92:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:453
		{
			yyVAL.node = nil
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:459
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:463
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:470
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				yyDollar[1].nodes, yyDollar[3].nodes, yyDollar[2].item)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:475
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:480
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:485
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:490
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:495
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(
				[]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:503
		{
			yyVAL.node = yylex.(*parser).newInExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:510
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:517
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:528
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:547
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:551
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:555
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:559
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:563
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[3].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:567
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, yyDollar[3].node, nil, nil, yyDollar[5].astblock)
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:571
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:575
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[1].item, nil, nil, nil, yyDollar[4].astblock)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:582
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:586
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:592
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:598
		{
			yyVAL.iflist = []*ast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:602
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:608
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:616
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[3].item, yyDollar[2].aststmts)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:623
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:634
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:638
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:642
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:646
		{
			yyVAL.nodes = []ast.Node{yyDollar[1].node}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:652
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt([]ast.Node{yyDollar[1].node}, []ast.Node{yyDollar[3].node}, yyDollar[2].item)
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:659
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:663
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:667
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[2].item, yyDollar[3].item, yyDollar[1].node, nil)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:673
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:677
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:681
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:687
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:691
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:695
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:699
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:703
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:707
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:711
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:715
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:722
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:726
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:730
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:734
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:738
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:745
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[4].item, yyDollar[2].node)
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:752
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[2].item, yyDollar[5].item, yyDollar[1].node, yyDollar[3].node)
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:756
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[2].item, yyDollar[5].item, nil, yyDollar[3].node, yyDollar[1].item)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:763
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:770
		{
			yyVAL.node = yyDollar[1].node
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:774
		{
			yyVAL.node = nil
		}
	case 157:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:781
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[2].item, yyDollar[8].item, yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 158:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:785
		{
			yyVAL.node = yylex.(*parser).newSliceExpr(yyDollar[2].item, yyDollar[6].item, yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:818
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[4].item, yyDollar[2].nodes)
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:822
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[4].item, yyDollar[2].nodes)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:826
		{
			yyVAL.node = yylex.(*parser).newListLiteral(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:832
		{
			yyVAL.map_nodes = [][2]ast.Node{[2]ast.Node{yyDollar[1].node, yyDollar[3].node}}
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:836
		{
			yyVAL.map_nodes = append(yyVAL.map_nodes, [2]ast.Node{yyDollar[3].node, yyDollar[5].node})
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:842
		{
			yyVAL.node = yylex.(*parser).newMapLiteral(yyDollar[1].item, yyDollar[2].item, nil)
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:846
		{
			yyVAL.node = yylex.(*parser).newMapLiteral(yyDollar[1].item, yyDollar[4].item, yyDollar[2].map_nodes)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:853
		{
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:857
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:864
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:868
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:872
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:876
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:881
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:886
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:890
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
