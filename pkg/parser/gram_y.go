// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	"fmt"
	ast "github.com/GuanceCloud/ppl/pkg/ast"
)

//line gram.y:16
type yySymType struct {
	yys      int
	aststmts ast.Stmts
	ifitem   *ast.IfStmtElem
	node     *ast.Node
	nodes    []*ast.Node
	item     Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const operatorsStart = 57372
const ADD = 57373
const DIV = 57374
const GTE = 57375
const GT = 57376
const LT = 57377
const LTE = 57378
const MOD = 57379
const MUL = 57380
const NEQ = 57381
const EQ = 57382
const EQEQ = 57383
const SUB = 57384
const operatorsEnd = 57385
const keywordsStart = 57386
const TRUE = 57387
const FALSE = 57388
const AND = 57389
const OR = 57390
const NIL = 57391
const NULL = 57392
const IF = 57393
const ELIF = 57394
const ELSE = 57395
const keywordsEnd = 57396
const startSymbolsStart = 57397
const START_STMTS = 57398
const startSymbolsEnd = 57399

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:471

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 86,
	1, 46,
	4, 46,
	8, 46,
	15, 46,
	28, 46,
	52, 46,
	53, 46,
	-2, 93,
}

const yyPrivate = 57344

const yyLast = 789

var yyAct = [...]uint8{
	21, 144, 23, 8, 95, 3, 30, 65, 64, 81,
	35, 61, 105, 160, 82, 80, 94, 92, 83, 67,
	39, 115, 62, 84, 106, 15, 85, 96, 89, 66,
	107, 78, 81, 70, 71, 74, 75, 82, 80, 76,
	98, 77, 79, 86, 78, 81, 63, 73, 99, 16,
	82, 80, 108, 103, 90, 79, 93, 110, 111, 2,
	89, 91, 92, 4, 112, 104, 84, 88, 162, 119,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 116, 114, 86, 7, 137, 1,
	140, 113, 145, 146, 60, 138, 14, 141, 150, 139,
	147, 142, 151, 34, 148, 114, 99, 156, 152, 136,
	45, 135, 5, 54, 52, 57, 37, 56, 154, 155,
	33, 158, 48, 55, 49, 78, 81, 70, 71, 74,
	75, 82, 80, 76, 58, 77, 79, 32, 31, 36,
	24, 86, 38, 25, 29, 59, 40, 159, 46, 47,
	101, 26, 50, 51, 166, 44, 93, 169, 171, 42,
	100, 91, 92, 145, 174, 175, 28, 45, 41, 176,
	54, 27, 117, 102, 17, 114, 9, 86, 86, 114,
	55, 167, 13, 170, 172, 173, 12, 11, 10, 86,
	114, 43, 114, 143, 6, 177, 178, 114, 179, 15,
	53, 0, 45, 180, 0, 54, 52, 57, 37, 56,
	109, 0, 0, 0, 48, 55, 49, 18, 0, 0,
	20, 19, 0, 16, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	46, 47, 0, 0, 50, 51, 22, 15, 0, 0,
	45, 0, 0, 54, 52, 57, 37, 56, 0, 0,
	0, 0, 48, 55, 49, 18, 0, 0, 20, 19,
	0, 16, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 46, 47,
	0, 0, 50, 51, 22, 45, 0, 0, 54, 52,
	57, 37, 56, 0, 0, 0, 0, 48, 55, 49,
	18, 0, 0, 20, 19, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 46, 47, 0, 0, 50, 51, 22,
	120, 0, 0, 45, 0, 0, 54, 52, 57, 37,
	56, 0, 0, 0, 0, 48, 55, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 46, 47, 0, 45, 50, 51, 54, 52, 57,
	37, 56, 109, 0, 0, 0, 48, 55, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 46, 47, 0, 68, 50, 51, 45, 0,
	0, 54, 52, 57, 37, 56, 0, 0, 0, 0,
	48, 55, 49, 0, 45, 0, 0, 54, 52, 57,
	37, 87, 58, 0, 0, 0, 48, 55, 49, 0,
	0, 0, 0, 59, 0, 0, 46, 47, 58, 0,
	50, 51, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 46, 47, 0, 45, 50, 51, 54, 52,
	57, 37, 56, 0, 0, 0, 0, 48, 55, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	59, 168, 0, 46, 47, 0, 0, 50, 51, 78,
	81, 70, 71, 74, 75, 82, 80, 76, 69, 77,
	79, 0, 0, 0, 0, 73, 72, 0, 78, 81,
	70, 71, 74, 75, 82, 80, 76, 69, 77, 79,
	165, 0, 0, 0, 73, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 81, 70, 71, 74, 75,
	82, 80, 76, 69, 77, 79, 0, 0, 0, 0,
	73, 72, 164, 0, 78, 81, 70, 71, 74, 75,
	82, 80, 76, 69, 77, 79, 163, 0, 0, 0,
	73, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 81, 70, 71, 74, 75, 82, 80, 76, 69,
	77, 79, 161, 0, 0, 0, 73, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 81, 70, 71,
	74, 75, 82, 80, 76, 69, 77, 79, 157, 0,
	0, 0, 73, 72, 153, 0, 78, 81, 70, 71,
	74, 75, 82, 80, 76, 69, 77, 79, 118, 0,
	0, 0, 73, 72, 0, 78, 81, 70, 71, 74,
	75, 82, 80, 76, 69, 77, 79, 0, 0, 0,
	0, 73, 72, 0, 0, 78, 81, 70, 71, 74,
	75, 82, 80, 76, 69, 77, 79, 0, 0, 0,
	0, 73, 72, 78, 81, 70, 71, 74, 75, 82,
	80, 76, 69, 77, 79, 54, 52, 0, 0, 73,
	72, 0, 149, 0, 48, 55, 49, 0, 54, 52,
	0, 0, 0, 0, 0, 97, 58, 48, 55, 49,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 58,
	46, 47, 0, 0, 50, 51, 0, 0, 0, 0,
	59, 0, 0, 46, 47, 0, 0, 50, 51,
}

var yyPact = [...]int16{
	3, 55, 243, -1000, -1000, -1000, 288, 21, 18, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -45, 421, -1000,
	-1000, 692, 437, -1000, -1000, -1000, -1000, -1000, -1000, 60,
	47, -1000, -1000, -1000, -1000, 49, -1, 738, 145, -1000,
	37, -4, -1000, -1000, -1000, 17, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 41, -1000, -1000, 377, 478, -1000, -1000,
	21, 18, -1000, -1000, 7, 437, 149, 674, 336, 478,
	478, 478, 478, 478, 478, 478, 478, 478, 478, 478,
	478, 478, 478, -1000, 498, -1000, -1000, 195, 160, 478,
	160, 478, 478, 160, -1000, 725, -1000, -1000, -1000, -1000,
	-1000, 478, -1000, -1000, -1000, -1000, -1000, 478, -1000, -1000,
	635, 692, 18, -1000, -1000, 195, -1000, 478, 103, 654,
	437, 692, 13, 13, 0, 94, 13, 13, 13, 13,
	-23, -23, -1000, -1000, -1000, -1000, -2, 635, 15, 4,
	615, 15, 4, 63, -1000, 692, 589, 15, 4, -1000,
	-1000, 563, 543, 478, 498, 517, 437, 437, 498, -1000,
	-1000, -1000, 478, -1000, 478, -1000, 692, -1000, 437, 498,
	-1000, 498, -1000, -1000, -1000, 692, 498, -1000, -1000, -1000,
	-1000,
}

var yyPgo = [...]uint8{
	0, 200, 10, 26, 109, 194, 20, 18, 193, 87,
	191, 188, 187, 186, 182, 176, 174, 171, 168, 1,
	166, 159, 155, 151, 146, 6, 144, 0, 143, 142,
	140, 139, 2, 138, 137, 120, 103, 96, 89, 3,
}

var yyR1 = [...]int8{
	0, 39, 39, 39, 39, 38, 38, 38, 4, 4,
	4, 5, 5, 5, 9, 9, 9, 9, 9, 9,
	37, 27, 27, 27, 27, 27, 27, 27, 27, 14,
	13, 11, 12, 12, 12, 12, 12, 12, 12, 12,
	15, 15, 16, 16, 7, 7, 3, 3, 6, 17,
	18, 18, 18, 8, 8, 8, 19, 20, 20, 20,
	10, 21, 21, 21, 21, 21, 21, 21, 21, 22,
	22, 22, 22, 22, 23, 24, 24, 25, 25, 25,
	26, 26, 26, 26, 26, 26, 30, 30, 30, 31,
	31, 31, 28, 28, 29, 29, 29, 32, 32, 32,
	32, 32, 33, 33, 34, 34, 35, 35, 36, 36,
	2, 2, 1, 1,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 5, 7, 6, 6, 5, 6, 5, 5, 4,
	1, 3, 2, 3, 2, 1, 1, 3, 2, 2,
	3, 2, 2, 3, 2, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 4, 4, 4,
	3, 3, 3, 3, 3, 3, 2, 3, 2, 2,
	3, 2, 2, 1, 4, 5, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -38, 56, 2, 8, -4, -5, -9, -39, -15,
	-11, -12, -13, -14, -37, 4, 28, -16, 22, 26,
	25, -27, 51, -32, -30, -28, -23, -17, -20, -26,
	-25, -33, -34, -35, -36, -2, -31, 13, -29, -6,
	-24, -18, -21, -10, -22, 7, 45, 46, 19, 21,
	49, 50, 11, -1, 10, 20, 14, 12, 31, 42,
	-9, -39, 4, 28, 53, 52, -2, -27, 4, 40,
	33, 34, 48, 47, 35, 36, 39, 41, 31, 42,
	38, 32, 37, -7, -27, -3, -6, 14, 7, 13,
	7, 12, 13, 7, 17, 5, 28, 17, -32, -2,
	15, 5, 28, 16, 28, 16, 28, 13, 11, 15,
	-27, -27, -39, -3, -6, 14, -7, 23, 4, -27,
	4, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -27, -27, -3, -4, -27, -25, -2,
	-27, -25, -2, -8, -19, -27, -27, -25, -2, 17,
	-32, -27, -27, 29, -27, -27, 4, 4, -27, -3,
	15, 17, 5, 17, 29, 17, -27, -3, 4, -27,
	-3, -27, -3, -3, -19, -27, -27, -3, -3, -3,
	-3,
}

var yyDef = [...]int8{
	0, -2, 0, 7, 6, 5, 9, 10, 12, 14,
	15, 16, 17, 18, 19, 1, 2, 40, 0, 30,
	29, 20, 0, 21, 22, 23, 24, 25, 26, 27,
	28, 97, 98, 99, 100, 101, 0, 0, 0, 93,
	0, 0, 57, 58, 59, 0, 102, 103, 104, 105,
	106, 107, 108, 0, 110, 111, 0, 0, 112, 113,
	8, 11, 3, 4, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 42, 0, 45, -2, 0, 0, 0,
	0, 51, 0, 0, 86, 0, 91, 88, 89, 101,
	92, 0, 96, 74, 76, 49, 52, 0, 109, 48,
	0, 75, 13, 41, 46, 0, 43, 0, 0, 0,
	0, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 44, 0, 20, 84, 85,
	0, 82, 83, 50, 55, 56, 0, 80, 81, 87,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 39,
	47, 79, 54, 77, 0, 78, 94, 31, 0, 0,
	37, 0, 35, 38, 53, 95, 0, 33, 36, 34,
	32,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:123
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:126
		{
			yylex.(*parser).unexpected("", "")
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:131
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:138
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:142
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:144
		{
			yyVAL.aststmts = ast.Stmts{}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:146
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:170
		{
			yyVAL.node = yylex.(*parser).newBreakStmt()
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:174
		{
			yyVAL.node = yylex.(*parser).newContinueStmt()
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:183
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[2].item.Val, yyDollar[4].node, yyDollar[5].aststmts)
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:194
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].aststmts)
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:196
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].aststmts)
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:198
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, yyDollar[5].node, yyDollar[6].aststmts)
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:200
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, nil, yyDollar[5].aststmts)
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:203
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].aststmts)
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:205
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, nil, yyDollar[5].aststmts)
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:207
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, yyDollar[4].node, yyDollar[5].aststmts)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:209
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, nil, yyDollar[4].aststmts)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:214
		{
			yyVAL.node = yylex.(*parser).newIfelseStmt(yyDollar[1].node, nil, nil, yyDollar[3].aststmts)
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:219
		{
			yyVAL.node = yylex.(*parser).newIfelseStmt(nil, yyDollar[2].ifitem, nil, nil)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:221
		{
			yyVAL.node = yylex.(*parser).newIfelseStmt(yyDollar[1].node, nil, yyDollar[3].ifitem, nil)
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:225
		{
			yyVAL.ifitem = yylex.(*parser).newIfExpr(yyDollar[1].node, yyDollar[2].aststmts)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:227
		{
			yylex.(*parser).addParseErr(nil, fmt.Errorf("if/elif expr not found condition"))
			yyVAL.ifitem = nil
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:237
		{
			yyVAL.aststmts = yyDollar[2].aststmts
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:241
		{
			yyVAL.aststmts = nil
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:247
		{
			f, err := yylex.(*parser).newCallExpr(yyDollar[1].item.Val, yyDollar[3].nodes)
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
				yyVAL.node = nil
			} else {
				yyVAL.node = f
			}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:257
		{
			f, err := yylex.(*parser).newCallExpr(yyDollar[1].item.Val, nil)
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
				yyVAL.node = nil
			} else {
				yyVAL.node = f
			}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:271
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:276
		{
			yyVAL.nodes = []*ast.Node{yyDollar[1].node}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:286
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:290
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:292
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:294
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:296
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:298
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:300
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:302
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:304
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:309
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:311
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:313
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:315
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:317
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:325
		{
			yyVAL.node = ast.WrapParenExpr(&ast.ParenExpr{Param: yyDollar[2].node})
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:331
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(
				ast.WrapIdentifier(&ast.Identifier{Name: yyDollar[1].item.Val}), yyDollar[3].node)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:335
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(nil, yyDollar[3].node)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:337
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:344
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(
				ast.WrapIdentifier(&ast.Identifier{Name: yyDollar[1].item.Val}), yyDollar[3].node)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:349
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(
				ast.WrapIdentifier(&ast.Identifier{Name: yyDollar[1].item.Val}),
				ast.WrapIdentifier(&ast.Identifier{Name: yyDollar[3].item.Val}),
			)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:356
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:360
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node,
				ast.WrapIdentifier(&ast.Identifier{Name: yyDollar[3].item.Val}))
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:365
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:369
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node,
				ast.WrapIdentifier(&ast.Identifier{Name: yyDollar[3].item.Val}))
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:379
		{
			yyVAL.node = ast.WrapListInitExpr(&ast.ListInitExpr{})
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:383
		{
			yyVAL.node = ast.WrapListInitExpr(&ast.ListInitExpr{List: []*ast.Node{yyDollar[2].node}})
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:385
		{
			yyVAL.node.ListInitExpr.List = append(yyVAL.node.ListInitExpr.List, yyDollar[3].node)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:391
		{
			yyVAL.node = ast.WrapMapInitExpr(&ast.MapInitExpr{})
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:395
		{
			yyVAL.node = ast.WrapMapInitExpr(&ast.MapInitExpr{
				KeyValeList: [][2]*ast.Node{{yyDollar[2].node, yyDollar[4].node}},
			})
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:401
		{

			mapInit := yyDollar[1].node.MapInitExpr
			mapInit.KeyValeList = append(mapInit.KeyValeList, [2]*ast.Node{yyDollar[3].node, yyDollar[5].node})
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:416
		{
			yyVAL.node = ast.WrapIdentifier(&ast.Identifier{Name: yyDollar[1].item.Val})
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:421
		{
			yyVAL.node = ast.WrapBoolLiteral(&ast.BoolLiteral{Val: true})
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:423
		{
			yyVAL.node = ast.WrapBoolLiteral(&ast.BoolLiteral{Val: false})
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:428
		{
			yyVAL.node = ast.WrapStringLiteral(
				&ast.StringLiteral{Val: yylex.(*parser).unquoteString(yyDollar[1].item.Val)})
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:431
		{
			yyVAL.node = ast.WrapStringLiteral(
				&ast.StringLiteral{Val: yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)})
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:437
		{
			yyVAL.node = ast.WrapNilLiteral(&ast.NilLiteral{})
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:439
		{
			yyVAL.node = ast.WrapNilLiteral(&ast.NilLiteral{})
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:445
		{
			yyVAL.node = ast.WrapNumberLiteral(yylex.(*parser).number(yyDollar[1].item.Val))
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:447
		{
			num := yylex.(*parser).number(yyDollar[2].item.Val)
			switch yyDollar[1].item.Typ {
			case ADD: // pass
			case SUB:
				if num.IsInt {
					num.Int = -num.Int
				} else {
					num.Float = -num.Float
				}
			}
			yyVAL.node = ast.WrapNumberLiteral(num)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:464
		{
			yyVAL.item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
		}
	}
	goto yystack /* stack new state and value */
}
