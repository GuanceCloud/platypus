// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	ast "github.com/GuanceCloud/platypus/pkg/ast"
)

//line gram.y:15
type yySymType struct {
	yys      int
	aststmts ast.Stmts
	astblock *ast.BlockStmt

	ifitem *ast.IfStmtElem
	iflist []*ast.IfStmtElem
	node   *ast.Node
	nodes  []*ast.Node
	item   Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const operatorsStart = 57378
const ADD = 57379
const DIV = 57380
const GTE = 57381
const GT = 57382
const NOT = 57383
const LT = 57384
const LTE = 57385
const MOD = 57386
const MUL = 57387
const NEQ = 57388
const EQ = 57389
const EQEQ = 57390
const SUB = 57391
const ADD_EQ = 57392
const SUB_EQ = 57393
const DIV_EQ = 57394
const MUL_EQ = 57395
const MOD_EQ = 57396
const operatorsEnd = 57397
const keywordsStart = 57398
const TRUE = 57399
const FALSE = 57400
const IDENTIFIER = 57401
const AND = 57402
const OR = 57403
const NIL = 57404
const NULL = 57405
const IF = 57406
const ELIF = 57407
const ELSE = 57408
const keywordsEnd = 57409
const startSymbolsStart = 57410
const START_STMTS = 57411
const startSymbolsEnd = 57412
const UMINUS = 57413

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"NOT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"ADD_EQ",
	"SUB_EQ",
	"DIV_EQ",
	"MUL_EQ",
	"MOD_EQ",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:628

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 171,
	1, 68,
	4, 68,
	8, 68,
	15, 68,
	28, 68,
	-2, 115,
}

const yyPrivate = 57344

const yyLast = 1099

var yyAct = [...]uint8{
	72, 9, 35, 23, 196, 59, 3, 23, 23, 68,
	66, 33, 54, 61, 236, 55, 37, 48, 45, 57,
	217, 239, 89, 92, 40, 56, 41, 34, 234, 93,
	91, 115, 17, 62, 90, 99, 70, 100, 92, 230,
	97, 98, 49, 9, 93, 91, 51, 102, 69, 231,
	109, 110, 111, 73, 50, 116, 107, 63, 119, 101,
	65, 221, 38, 39, 224, 158, 80, 42, 43, 120,
	103, 9, 123, 2, 114, 218, 98, 95, 112, 9,
	89, 92, 81, 82, 64, 85, 86, 93, 91, 87,
	99, 88, 90, 4, 94, 97, 98, 146, 122, 149,
	104, 47, 153, 84, 83, 157, 145, 54, 148, 160,
	55, 152, 96, 8, 163, 10, 105, 1, 95, 6,
	56, 60, 16, 166, 25, 44, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 26, 106, 193, 108,
	46, 197, 199, 198, 27, 117, 201, 73, 113, 32,
	203, 169, 205, 207, 28, 23, 5, 53, 118, 52,
	58, 118, 31, 30, 29, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 142, 143, 144, 11, 147, 15, 150, 151,
	73, 73, 118, 155, 209, 211, 14, 13, 159, 12,
	194, 19, 67, 161, 24, 229, 7, 0, 0, 0,
	164, 0, 118, 0, 237, 121, 171, 0, 0, 0,
	0, 0, 80, 240, 242, 198, 243, 241, 0, 0,
	0, 73, 0, 0, 0, 225, 89, 92, 81, 82,
	0, 85, 86, 93, 91, 87, 154, 88, 90, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 171,
	171, 118, 0, 214, 0, 18, 165, 0, 54, 0,
	170, 55, 37, 48, 45, 57, 162, 0, 0, 0,
	40, 56, 41, 20, 215, 216, 22, 21, 0, 0,
	219, 0, 0, 0, 0, 0, 222, 223, 49, 0,
	171, 118, 51, 118, 0, 0, 0, 0, 232, 233,
	50, 235, 0, 210, 212, 213, 0, 118, 38, 39,
	0, 0, 0, 42, 43, 36, 0, 18, 0, 0,
	54, 0, 0, 55, 37, 48, 45, 57, 0, 0,
	0, 0, 40, 56, 41, 20, 0, 0, 22, 21,
	0, 59, 0, 0, 226, 227, 0, 228, 0, 0,
	49, 0, 0, 0, 51, 0, 0, 0, 0, 0,
	0, 238, 50, 0, 0, 0, 0, 0, 0, 0,
	38, 39, 0, 0, 0, 42, 43, 36, 18, 0,
	0, 54, 0, 0, 55, 37, 48, 45, 57, 0,
	0, 0, 0, 40, 56, 41, 20, 0, 0, 22,
	21, 0, 9, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 0, 0, 0, 0,
	0, 38, 39, 0, 0, 0, 42, 43, 36, 54,
	0, 0, 55, 37, 48, 45, 57, 0, 0, 0,
	0, 40, 56, 41, 20, 0, 0, 22, 21, 89,
	92, 81, 82, 0, 85, 86, 93, 91, 87, 49,
	88, 90, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 0, 80, 0, 0, 0, 38,
	39, 206, 0, 0, 42, 43, 36, 0, 0, 89,
	92, 81, 82, 0, 85, 86, 93, 91, 87, 74,
	88, 90, 75, 76, 78, 77, 79, 80, 0, 0,
	0, 0, 84, 83, 0, 0, 0, 0, 0, 0,
	0, 89, 92, 81, 82, 0, 85, 86, 93, 91,
	87, 74, 88, 90, 75, 76, 78, 77, 79, 0,
	0, 0, 0, 54, 84, 83, 55, 37, 48, 45,
	57, 202, 0, 0, 0, 40, 56, 41, 54, 0,
	0, 55, 37, 48, 45, 57, 0, 0, 200, 0,
	40, 56, 41, 49, 0, 0, 0, 51, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 49, 0,
	0, 0, 51, 38, 39, 0, 0, 0, 42, 43,
	50, 0, 0, 0, 0, 0, 0, 0, 38, 39,
	0, 0, 54, 42, 43, 55, 37, 48, 45, 57,
	0, 195, 0, 0, 40, 56, 41, 0, 167, 0,
	0, 54, 0, 0, 55, 37, 48, 45, 57, 0,
	0, 0, 49, 40, 56, 41, 51, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 0, 0, 0,
	0, 49, 38, 39, 0, 51, 0, 42, 43, 0,
	0, 54, 0, 50, 55, 37, 48, 45, 57, 162,
	0, 38, 39, 40, 56, 41, 42, 43, 0, 0,
	54, 0, 0, 55, 37, 48, 45, 57, 0, 0,
	156, 49, 40, 56, 41, 51, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 0, 0, 0, 0,
	49, 38, 39, 0, 51, 0, 42, 43, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	38, 39, 0, 0, 124, 42, 43, 54, 0, 0,
	55, 37, 48, 45, 57, 0, 0, 0, 0, 40,
	56, 41, 0, 71, 0, 0, 54, 0, 0, 55,
	37, 48, 45, 57, 0, 0, 0, 49, 40, 56,
	41, 51, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 0, 49, 38, 39, 0,
	51, 0, 42, 43, 0, 0, 54, 0, 50, 55,
	37, 48, 45, 57, 0, 0, 38, 39, 40, 56,
	41, 42, 43, 0, 0, 54, 0, 0, 55, 37,
	48, 45, 172, 0, 0, 0, 49, 40, 56, 41,
	51, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 0, 0, 0, 0, 49, 38, 39, 0, 51,
	0, 42, 43, 0, 0, 0, 0, 50, 80, 0,
	0, 0, 0, 0, 220, 38, 39, 208, 0, 0,
	42, 43, 89, 92, 81, 82, 0, 85, 86, 93,
	91, 87, 0, 88, 90, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 83, 0, 0, 0,
	89, 92, 81, 82, 0, 85, 86, 93, 91, 87,
	0, 88, 90, 80, 0, 0, 0, 0, 0, 206,
	0, 168, 0, 84, 83, 0, 0, 89, 92, 81,
	82, 0, 85, 86, 93, 91, 87, 0, 88, 90,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 83, 0, 0, 89, 92, 81, 82, 119, 85,
	86, 93, 91, 87, 0, 88, 90, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 83, 0,
	0, 89, 92, 81, 82, 0, 85, 86, 93, 91,
	87, 0, 88, 90, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 83, 0, 0, 89, 92,
	81, 82, 0, 85, 86, 93, 91, 87, 0, 88,
	90, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 83, 0, 0, 89, 92, 81, 82, 0,
	85, 86, 93, 91, 87, 0, 88, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84,
}

var yyPact = [...]int16{
	4, 85, 394, -1000, -1000, -1000, 333, 452, 29, -1000,
	56, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -56,
	789, -1000, -1000, 514, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 87, 105, -1000, 83, 829, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42, -27, 51, -1000, -27, 829,
	829, 829, -1000, -1000, 65, -1000, -1000, -27, -1000, -1000,
	29, 27, -1000, -1000, -1000, -1000, 44, -1000, 829, 44,
	94, 770, 514, -1000, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -27, 100, -27, 100, -27, -27, 100,
	984, -1000, -27, -1000, 713, -23, 50, -27, 829, -1000,
	-1000, -1000, -27, 694, 27, -1000, -1000, -1000, -1000, -27,
	984, -1000, 654, 957, 848, 829, 829, 829, 829, 829,
	829, 829, 829, 829, 829, 829, 829, 829, 829, 829,
	829, 829, 829, 829, 829, 64, 63, 829, 64, 63,
	635, 829, 64, 63, -1000, 581, -1000, 1011, -1000, 566,
	43, 829, -1000, 930, 271, -1000, 903, 848, 848, 44,
	-1000, -1000, -27, 1011, 1011, 1011, 1011, 1011, 1011, 442,
	-15, -15, 1038, 209, -15, -15, -15, -15, 0, 0,
	-1000, -1000, -1000, 43, 15, -1000, -1000, 1011, 28, 43,
	-1000, 1011, -1000, 875, 45, 43, -27, 49, 848, 44,
	-1000, 44, -1000, -1000, 271, 22, 33, -27, -27, 11,
	-27, -1000, -3, 829, -1000, 44, -1000, -1000, -1000, 482,
	-1000, -1000, 5, 829, -1000, 829, -1000, 1011, -1000, -1000,
	1011, -1000, 1011, 1011,
}

var yyPgo = [...]uint8{
	0, 155, 101, 163, 216, 214, 212, 211, 210, 113,
	32, 209, 207, 206, 197, 195, 174, 4, 2, 173,
	172, 169, 167, 164, 11, 159, 27, 0, 154, 150,
	146, 125, 124, 36, 122, 117, 13, 115, 116, 100,
}

var yyR1 = [...]int8{
	0, 36, 36, 36, 36, 37, 37, 37, 35, 35,
	35, 35, 35, 3, 3, 3, 4, 4, 4, 9,
	9, 9, 9, 9, 9, 9, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 34, 38, 38,
	39, 39, 10, 10, 10, 10, 10, 10, 26, 14,
	13, 11, 12, 12, 12, 12, 12, 12, 12, 12,
	33, 33, 15, 15, 5, 7, 7, 6, 1, 1,
	2, 16, 16, 16, 8, 8, 8, 8, 17, 19,
	19, 19, 20, 20, 21, 21, 21, 21, 21, 21,
	21, 21, 22, 22, 22, 22, 22, 23, 24, 24,
	24, 25, 25, 25, 25, 25, 25, 30, 30, 30,
	31, 31, 31, 28, 28, 28, 29, 29, 18, 18,
	32, 32, 32, 32, 32, 32, 32,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 1, 2, 2, 2, 2,
	3, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 0, 4, 4, 4, 4, 4, 4, 4, 1,
	1, 3, 7, 6, 6, 5, 6, 5, 5, 4,
	1, 1, 1, 3, 3, 1, 2, 3, 1, 4,
	3, 6, 7, 4, 4, 4, 1, 1, 4, 2,
	2, 2, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 5, 6, 6,
	6, 3, 3, 3, 3, 3, 3, 2, 4, 3,
	3, 4, 2, 3, 4, 1, 6, 7, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -35, 69, 2, 8, -3, -38, -4, -9, 28,
	-37, -15, -11, -12, -13, -14, -34, -10, 4, -7,
	22, 26, 25, -27, -5, -32, -30, -28, -23, -16,
	-19, -20, -25, -24, -26, -18, 64, 11, 57, 58,
	19, 21, 62, 63, -31, 13, -29, -2, 12, 37,
	49, 41, -21, -22, 7, 10, 20, 14, -3, 28,
	-9, -36, 4, 28, 28, 4, 66, -6, 65, -26,
	-33, 4, -27, -10, 47, 50, 51, 53, 52, 54,
	23, 39, 40, 61, 60, 42, 43, 46, 48, 37,
	49, 45, 38, 44, 7, 13, 7, 12, 13, 7,
	-27, 17, 5, 28, -39, -38, -39, 5, -39, -27,
	-27, -27, 13, -39, -36, 4, 28, -1, -2, 14,
	-27, -1, 4, -27, 4, -39, -39, -39, -39, -39,
	-39, -39, -39, -39, -39, -39, -39, -39, -39, -39,
	-39, -39, -39, -39, -39, -24, -18, -39, -24, -18,
	-39, -39, -24, -18, -1, -39, 17, -27, 15, -39,
	-27, -39, 15, -27, -39, -1, -27, 4, 4, -33,
	-1, -2, 14, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -27, -8, 16, -17, -27, -18, -27,
	17, -27, 15, -27, -39, -27, 29, -3, 4, -33,
	-1, -33, -1, -1, -39, -39, -39, 5, 47, -39,
	29, 16, -39, -39, 15, -33, -1, -1, -1, -27,
	17, 16, -39, -39, 17, -39, 17, -27, -1, 16,
	-27, -17, -27, -27,
}

var yyDef = [...]int8{
	0, -2, 0, 12, 11, 8, 9, 14, 15, 38,
	17, 19, 20, 21, 22, 23, 24, 25, 5, 62,
	0, 50, 49, 37, 65, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 0, 120, 121, 122,
	123, 124, 125, 126, 0, 41, 41, 115, 41, 0,
	0, 0, 82, 83, 0, 118, 119, 41, 10, 39,
	13, 16, 1, 2, 6, 7, 0, 66, 0, 35,
	0, 0, 60, 61, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 0, 41, 0, 41, 41, 0,
	0, 107, 41, 112, 0, 40, 0, 41, 0, 79,
	80, 81, 41, 0, 18, 3, 4, 63, 68, 41,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 106, 0, 103, 104,
	0, 0, 101, 102, 64, 0, 109, 110, 113, 0,
	41, 0, 70, 0, 0, 67, 0, 0, 0, 0,
	59, -2, 41, 42, 43, 44, 45, 46, 47, 48,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 41, 41, 73, 76, 77, 36, 41,
	108, 111, 114, 0, 0, 41, 41, 0, 0, 0,
	57, 0, 55, 58, 0, 0, 0, 41, 41, 0,
	41, 97, 0, 0, 69, 0, 53, 56, 54, 37,
	100, 71, 0, 0, 98, 0, 99, 116, 52, 72,
	74, 75, 78, 117,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:139
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:143
		{
			yylex.(*parser).parseResult = ast.Stmts{}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:147
		{
			yylex.(*parser).parseResult = yyDollar[3].aststmts
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:152
		{
			yylex.(*parser).unexpected("", "")
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:159
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:166
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:172
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:176
		{
			yyVAL.aststmts = ast.Stmts{}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:180
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:222
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:226
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:230
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:234
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:238
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:242
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:249
		{
			yyVAL.node = yylex.(*parser).newInExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:254
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:260
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:271
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[2].node, yyDollar[3].astblock, yyDollar[1].item)
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:283
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:287
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:291
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:295
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, nil, yyDollar[5].astblock)
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:299
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:303
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:307
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:311
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, nil, yyDollar[4].astblock)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:320
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:324
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:330
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:336
		{
			yyVAL.iflist = []*ast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:340
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:346
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:354
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[3].aststmts, yyDollar[4].item)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:360
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, ast.Stmts{}, yyDollar[3].item)
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:366
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[4].nodes, yyDollar[2].item, yyDollar[6].item)
		}
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:370
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[4].nodes, yyDollar[2].item, yyDollar[7].item)
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:374
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[4].item)
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:381
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[4].node)
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:385
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[4].node)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:389
		{
			yyVAL.nodes = []*ast.Node{yyDollar[1].node}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:393
		{
			yyVAL.nodes = []*ast.Node{yyDollar[1].node}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:399
		{
			yyVAL.node = yylex.(*parser).newAssignmentStmt(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:405
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:409
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:413
		{
			yyVAL.node = yylex.(*parser).newUnaryExpr(yyDollar[1].item, yyDollar[2].node)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:421
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:425
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:429
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:433
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:437
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:441
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:445
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:449
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:456
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:460
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:464
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:468
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:472
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:479
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[5].item)
		}
	case 98:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:486
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[4].node, yyDollar[6].item)
		}
	case 99:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:491
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(nil, yyDollar[2].item, yyDollar[4].node, yyDollar[6].item)
		}
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:495
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[4].node, yyDollar[6].item)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:504
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:508
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:512
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:516
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:520
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:524
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:531
		{
			yyVAL.node = yylex.(*parser).newListLiteralEnd(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:535
		{
			yyVAL.node = yylex.(*parser).newListLiteralEnd(yyVAL.node, yyDollar[4].item.Pos)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:539
		{
			yyVAL.node = yylex.(*parser).newListLiteralStart(yyDollar[1].item.Pos)
			yyVAL.node = yylex.(*parser).newListLiteralEnd(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:546
		{
			yyVAL.node = yylex.(*parser).newListLiteralStart(yyDollar[1].item.Pos)
			yyVAL.node = yylex.(*parser).newListLiteralAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:551
		{
			yyVAL.node = yylex.(*parser).newListLiteralAppendExpr(yyVAL.node, yyDollar[4].node)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:559
		{
			yyVAL.node = yylex.(*parser).newMapLiteralEnd(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:563
		{
			yyVAL.node = yylex.(*parser).newMapLiteralEnd(yyVAL.node, yyDollar[4].item.Pos)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:567
		{
			yyVAL.node = yylex.(*parser).newMapLiteralStart(yyDollar[1].astblock.LBracePos.Pos)
			yyVAL.node = yylex.(*parser).newMapLiteralEnd(yyVAL.node, yyDollar[1].astblock.RBracePos.Pos)
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:574
		{
			yyVAL.node = yylex.(*parser).newMapLiteralStart(yyDollar[1].item.Pos)
			yyVAL.node = yylex.(*parser).newMapLiteralAppendExpr(yyVAL.node, yyDollar[3].node, yyDollar[6].node)
		}
	case 117:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:579
		{
			yyVAL.node = yylex.(*parser).newMapLiteralAppendExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[7].node)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:586
		{
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:590
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:597
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:601
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:605
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:609
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:614
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:619
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:623
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	}
	goto yystack /* stack new state and value */
}
