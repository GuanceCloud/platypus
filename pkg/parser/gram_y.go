// Code generated by goyacc -o gram_y.go gram.y. DO NOT EDIT.

//line gram.y:7
package parser

import __yyfmt__ "fmt"

//line gram.y:7

import (
	ast "github.com/GuanceCloud/platypus/pkg/ast"
)

//line gram.y:15
type yySymType struct {
	yys      int
	aststmts ast.Stmts
	astblock *ast.BlockStmt

	ifitem *ast.IfStmtElem
	iflist []*ast.IfStmtElem
	node   *ast.Node
	nodes  []*ast.Node
	item   Item
}

const SEMICOLON = 57346
const COMMA = 57347
const COMMENT = 57348
const DOT = 57349
const EOF = 57350
const ERROR = 57351
const ID = 57352
const NUMBER = 57353
const LEFT_PAREN = 57354
const LEFT_BRACKET = 57355
const LEFT_BRACE = 57356
const RIGHT_BRACE = 57357
const RIGHT_PAREN = 57358
const RIGHT_BRACKET = 57359
const SPACE = 57360
const STRING = 57361
const QUOTED_STRING = 57362
const MULTILINE_STRING = 57363
const FOR = 57364
const IN = 57365
const WHILE = 57366
const BREAK = 57367
const CONTINUE = 57368
const RETURN = 57369
const EOL = 57370
const COLON = 57371
const STR = 57372
const INT = 57373
const FLOAT = 57374
const BOOL = 57375
const LIST = 57376
const MAP = 57377
const operatorsStart = 57378
const ADD = 57379
const DIV = 57380
const GTE = 57381
const GT = 57382
const LT = 57383
const LTE = 57384
const MOD = 57385
const MUL = 57386
const NEQ = 57387
const EQ = 57388
const EQEQ = 57389
const SUB = 57390
const operatorsEnd = 57391
const keywordsStart = 57392
const TRUE = 57393
const FALSE = 57394
const IDENTIFIER = 57395
const AND = 57396
const OR = 57397
const NIL = 57398
const NULL = 57399
const IF = 57400
const ELIF = 57401
const ELSE = 57402
const keywordsEnd = 57403
const startSymbolsStart = 57404
const START_STMTS = 57405
const startSymbolsEnd = 57406

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DOT",
	"EOF",
	"ERROR",
	"ID",
	"NUMBER",
	"LEFT_PAREN",
	"LEFT_BRACKET",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"RIGHT_PAREN",
	"RIGHT_BRACKET",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"MULTILINE_STRING",
	"FOR",
	"IN",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"RETURN",
	"EOL",
	"COLON",
	"STR",
	"INT",
	"FLOAT",
	"BOOL",
	"LIST",
	"MAP",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"EQ",
	"EQEQ",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"TRUE",
	"FALSE",
	"IDENTIFIER",
	"AND",
	"OR",
	"NIL",
	"NULL",
	"IF",
	"ELIF",
	"ELSE",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:512

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 158,
	1, 47,
	4, 47,
	8, 47,
	15, 47,
	28, 47,
	-2, 96,
}

const yyPrivate = 57344

const yyLast = 1012

var yyAct = [...]uint8{
	21, 46, 137, 3, 55, 53, 42, 39, 57, 108,
	136, 171, 30, 49, 56, 50, 66, 64, 90, 68,
	83, 41, 139, 37, 62, 84, 82, 106, 80, 83,
	163, 58, 86, 88, 84, 82, 8, 98, 15, 81,
	96, 161, 59, 100, 61, 47, 48, 97, 63, 179,
	51, 52, 46, 139, 168, 55, 164, 87, 104, 101,
	99, 165, 16, 86, 2, 56, 165, 109, 165, 31,
	112, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 107, 131, 67, 107,
	138, 140, 102, 4, 144, 110, 85, 105, 129, 146,
	132, 91, 149, 148, 141, 70, 89, 90, 1, 130,
	107, 133, 153, 14, 156, 142, 134, 36, 35, 80,
	83, 72, 73, 76, 77, 84, 82, 78, 70, 79,
	81, 107, 7, 34, 33, 158, 75, 152, 162, 60,
	23, 157, 80, 83, 72, 73, 76, 77, 84, 82,
	78, 170, 79, 81, 38, 173, 175, 93, 151, 24,
	178, 5, 40, 25, 180, 29, 26, 45, 181, 92,
	43, 28, 27, 182, 9, 13, 158, 158, 107, 12,
	94, 11, 174, 176, 177, 10, 44, 135, 17, 65,
	22, 6, 54, 0, 158, 107, 0, 107, 0, 0,
	183, 184, 0, 185, 107, 15, 0, 0, 46, 0,
	186, 55, 53, 42, 39, 57, 103, 0, 0, 0,
	49, 56, 50, 18, 0, 0, 20, 19, 0, 16,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	80, 83, 72, 73, 76, 77, 84, 82, 78, 59,
	79, 81, 47, 48, 0, 0, 0, 51, 52, 32,
	15, 0, 0, 46, 0, 0, 55, 53, 42, 39,
	57, 0, 0, 0, 0, 49, 56, 50, 18, 0,
	0, 20, 19, 0, 16, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 47, 48, 0,
	0, 0, 51, 52, 32, 46, 0, 0, 55, 53,
	42, 39, 57, 0, 0, 0, 0, 49, 56, 50,
	18, 0, 0, 20, 19, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 47,
	48, 0, 0, 0, 51, 52, 32, 154, 0, 0,
	46, 0, 0, 55, 53, 42, 39, 57, 0, 0,
	0, 0, 49, 56, 50, 0, 0, 0, 0, 0,
	0, 46, 0, 0, 55, 53, 42, 39, 57, 145,
	58, 0, 0, 49, 56, 50, 0, 0, 0, 0,
	0, 59, 0, 0, 47, 48, 0, 0, 0, 51,
	52, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 47, 48, 0, 0, 46,
	51, 52, 55, 53, 42, 39, 57, 0, 0, 143,
	0, 49, 56, 50, 0, 0, 0, 113, 0, 0,
	46, 0, 0, 55, 53, 42, 39, 57, 0, 58,
	0, 0, 49, 56, 50, 0, 0, 0, 0, 0,
	59, 0, 0, 47, 48, 0, 0, 0, 51, 52,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 47, 48, 0, 0, 46, 51,
	52, 55, 53, 42, 39, 57, 103, 0, 0, 0,
	49, 56, 50, 0, 0, 0, 0, 0, 0, 46,
	0, 0, 55, 53, 42, 39, 57, 0, 58, 95,
	0, 49, 56, 50, 0, 0, 0, 0, 0, 59,
	0, 0, 47, 48, 0, 0, 0, 51, 52, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 47, 48, 0, 0, 69, 51, 52,
	46, 0, 0, 55, 53, 42, 39, 57, 0, 0,
	0, 0, 49, 56, 50, 0, 0, 0, 0, 0,
	0, 46, 0, 0, 55, 53, 42, 39, 159, 0,
	58, 0, 0, 49, 56, 50, 0, 0, 0, 0,
	0, 59, 0, 0, 47, 48, 0, 0, 0, 51,
	52, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 47, 48, 0, 0, 46,
	51, 52, 55, 53, 42, 39, 57, 0, 0, 0,
	0, 49, 56, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	147, 0, 0, 0, 0, 0, 0, 70, 0, 0,
	59, 0, 139, 47, 48, 0, 0, 0, 51, 52,
	0, 80, 83, 72, 73, 76, 77, 84, 82, 78,
	71, 79, 81, 108, 0, 0, 0, 0, 75, 74,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 83, 72, 73,
	76, 77, 84, 82, 78, 71, 79, 81, 0, 70,
	0, 0, 0, 75, 74, 150, 172, 0, 0, 0,
	0, 0, 0, 80, 83, 72, 73, 76, 77, 84,
	82, 78, 71, 79, 81, 70, 0, 0, 0, 0,
	75, 74, 0, 0, 0, 0, 0, 0, 0, 80,
	83, 72, 73, 76, 77, 84, 82, 78, 71, 79,
	81, 0, 169, 0, 0, 0, 75, 74, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 83, 72, 73, 76, 77, 84, 82,
	78, 71, 79, 81, 0, 70, 0, 0, 0, 75,
	74, 167, 0, 0, 0, 0, 0, 0, 0, 80,
	83, 72, 73, 76, 77, 84, 82, 78, 71, 79,
	81, 0, 166, 0, 0, 0, 75, 74, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 83, 72, 73, 76, 77, 84, 82,
	78, 71, 79, 81, 0, 160, 0, 0, 0, 75,
	74, 70, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 0, 0, 80, 83, 72, 73, 76,
	77, 84, 82, 78, 71, 79, 81, 70, 0, 0,
	0, 0, 75, 74, 111, 0, 0, 0, 0, 0,
	0, 80, 83, 72, 73, 76, 77, 84, 82, 78,
	71, 79, 81, 70, 0, 0, 0, 0, 75, 74,
	0, 0, 0, 0, 0, 0, 0, 80, 83, 72,
	73, 76, 77, 84, 82, 78, 71, 79, 81, 70,
	0, 0, 0, 0, 75, 74, 0, 0, 0, 0,
	0, 0, 0, 80, 83, 72, 73, 76, 77, 84,
	82, 78, 71, 79, 81, 0, 0, 0, 0, 0,
	75, 74,
}

var yyPact = [...]int16{
	1, 85, 256, -1000, -1000, -1000, 308, 34, 20, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -43, 573, -1000,
	-1000, 956, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 89,
	50, -1000, 642, -1000, -1000, -1000, -1000, 94, 152, 522,
	32, -1000, 642, -1000, -1000, -1000, 46, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 81, -1000, -1000, 501, -1000, -1000,
	34, 20, -1000, -1000, -5, -1000, 642, -5, 930, 453,
	642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
	642, 642, 642, 642, 642, 45, 642, 45, 699, -6,
	642, 45, -1000, 432, -1000, -1000, 956, -1000, 384, -1000,
	664, 642, -1000, -1000, 726, 20, -1000, -1000, 201, 699,
	-1000, 363, 904, 594, 203, 956, -9, -9, 82, 105,
	-9, -9, -9, -9, -18, -18, -1000, -1000, -1000, 19,
	5, 878, 19, 5, -1000, 25, -1000, 40, 956, -1000,
	845, 19, 5, -1000, 956, -1000, 812, -1000, 38, 785,
	642, -4, -1000, 752, 594, 594, 699, -1000, -1000, 201,
	-1000, -1000, 33, 642, -1000, -1000, -1000, 642, -1000, -1000,
	956, -1000, 594, 699, -1000, 699, -1000, -1000, 726, -1000,
	956, 956, 699, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 192, 27, 21, 158, 191, 190, 189, 188, 187,
	132, 186, 185, 181, 179, 175, 174, 172, 23, 171,
	170, 167, 166, 12, 165, 69, 0, 163, 162, 159,
	154, 140, 134, 133, 118, 117, 113, 108, 36, 2,
}

var yyR1 = [...]int8{
	0, 38, 38, 38, 38, 37, 37, 37, 4, 4,
	4, 5, 5, 5, 10, 10, 10, 10, 10, 10,
	36, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	15, 14, 12, 13, 13, 13, 13, 13, 13, 13,
	13, 16, 16, 6, 8, 8, 7, 2, 2, 3,
	25, 17, 17, 17, 17, 9, 9, 9, 19, 19,
	19, 11, 20, 20, 20, 20, 20, 20, 20, 20,
	21, 21, 21, 21, 21, 22, 22, 39, 39, 23,
	23, 23, 24, 24, 24, 24, 24, 24, 29, 29,
	29, 30, 30, 30, 27, 27, 27, 28, 28, 28,
	31, 31, 31, 31, 31, 32, 32, 33, 33, 34,
	34, 35, 35, 18, 18, 1, 1,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 7, 6, 6, 5, 6, 5, 5,
	4, 1, 3, 3, 1, 2, 3, 1, 3, 2,
	3, 4, 3, 5, 4, 3, 2, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 1, 2, 4,
	4, 4, 3, 3, 3, 3, 3, 3, 2, 3,
	2, 2, 3, 2, 2, 3, 1, 4, 5, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -37, 63, 2, 8, -4, -5, -10, -38, -16,
	-12, -13, -14, -15, -36, 4, 28, -8, 22, 26,
	25, -26, -6, -31, -29, -27, -22, -17, -19, -24,
	-23, -25, 58, -32, -33, -34, -35, -18, -30, 13,
	-28, -3, 12, -20, -11, -21, 7, 51, 52, 19,
	21, 56, 57, 11, -1, 10, 20, 14, 37, 48,
	-10, -38, 4, 28, 60, -7, 59, -25, -26, 4,
	23, 46, 39, 40, 55, 54, 41, 42, 45, 47,
	37, 48, 44, 38, 43, 7, 13, 7, -26, 12,
	13, 7, 17, 5, 28, 17, -26, 15, 5, 28,
	-26, 13, 11, 15, -26, -38, -2, -3, 14, -26,
	-2, 4, -26, 4, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -23,
	-18, -26, -23, -18, -2, -9, 16, -39, -26, 28,
	-26, -23, -18, 17, -26, 15, -26, 16, -39, -26,
	29, -4, -2, -26, 4, 4, -26, -2, -3, 14,
	17, 16, -39, 5, 16, 28, 17, 29, 16, 17,
	-26, 15, 4, -26, -2, -26, -2, -2, -26, 16,
	-26, -26, -26, -2, -2, -2, -2,
}

var yyDef = [...]int8{
	0, -2, 0, 7, 6, 5, 9, 10, 12, 14,
	15, 16, 17, 18, 19, 1, 2, 41, 0, 31,
	30, 20, 44, 21, 22, 23, 24, 25, 26, 27,
	28, 29, 0, 100, 101, 102, 103, 104, 0, 0,
	0, 96, 0, 58, 59, 60, 0, 105, 106, 107,
	108, 109, 110, 111, 0, 113, 114, 0, 115, 116,
	8, 11, 3, 4, 0, 45, 0, 29, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 93, 90, 91, 94, 0, 99,
	0, 0, 112, 49, 0, 13, 42, 47, 0, 0,
	32, 0, 0, 0, 50, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 86,
	87, 0, 84, 85, 43, 0, 52, 0, 57, 77,
	0, 82, 83, 89, 92, 95, 0, 75, 0, 0,
	0, 0, 46, 0, 0, 0, 0, 40, -2, 0,
	81, 51, 0, 56, 54, 78, 79, 0, 76, 80,
	97, 48, 0, 0, 38, 0, 36, 39, 20, 53,
	55, 98, 0, 34, 37, 35, 33,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:131
		{
			yylex.(*parser).parseResult = yyDollar[2].aststmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:134
		{
			yylex.(*parser).unexpected("", "")
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:139
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:146
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:150
		{
			yyVAL.aststmts = ast.Stmts{yyDollar[1].node}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:152
		{
			yyVAL.aststmts = ast.Stmts{}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:154
		{
			s := yyDollar[1].aststmts
			s = append(s, yyDollar[2].node)
			yyVAL.aststmts = s
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:178
		{
			yyVAL.node = yylex.(*parser).newBreakStmt(yyDollar[1].item.Pos)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:182
		{
			yyVAL.node = yylex.(*parser).newContinueStmt(yyDollar[1].item.Pos)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:191
		{
			yyVAL.node = yylex.(*parser).newForInStmt(yyDollar[2].node, yyDollar[3].astblock, yyDollar[1].item)
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:202
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, yyDollar[6].node, yyDollar[7].astblock)
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:204
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, yyDollar[4].node, nil, yyDollar[6].astblock)
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:206
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:208
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, yyDollar[3].node, nil, yyDollar[5].astblock)
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:211
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, yyDollar[5].node, yyDollar[6].astblock)
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:213
		{
			yyVAL.node = yylex.(*parser).newForStmt(yyDollar[2].node, nil, nil, yyDollar[5].astblock)
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:215
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, yyDollar[4].node, yyDollar[5].astblock)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:217
		{
			yyVAL.node = yylex.(*parser).newForStmt(nil, nil, nil, yyDollar[4].astblock)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:221
		{
			yyVAL.node = yylex.(*parser).newIfElifStmt(yyDollar[1].iflist)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:225
		{
			yyVAL.node = yylex.(*parser).newIfElifelseStmt(yyDollar[1].iflist, yyDollar[2].item, yyDollar[3].astblock)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:231
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:235
		{
			yyVAL.iflist = []*ast.IfStmtElem{yyDollar[1].ifitem}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:237
		{
			yyVAL.iflist = append(yyDollar[1].iflist, yyDollar[2].ifitem)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:241
		{
			yyVAL.ifitem = yylex.(*parser).newIfElem(yyDollar[1].item, yyDollar[2].node, yyDollar[3].astblock)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:247
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, yyDollar[2].aststmts, yyDollar[3].item)
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:251
		{
			yyVAL.astblock = yylex.(*parser).newBlockStmt(yyDollar[1].item, ast.Stmts{}, yyDollar[2].item)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:256
		{
			yyVAL.node = yylex.(*parser).newInExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:261
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[3].nodes, yyDollar[2].item, yyDollar[4].item)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:265
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[3].item)
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:269
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, yyDollar[3].nodes, yyDollar[2].item, yyDollar[5].item)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:273
		{
			yyVAL.node = yylex.(*parser).newCallExpr(yyDollar[1].node, nil, yyDollar[2].item, yyDollar[4].item)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:280
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:285
		{
			yyVAL.nodes = []*ast.Node{yyDollar[1].node}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:292
		{
			yyVAL.node = yylex.(*parser).newAssignmentExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:296
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:298
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:300
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:302
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:304
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:306
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:308
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:310
		{
			yyVAL.node = yylex.(*parser).newConditionalExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:315
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:317
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:319
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:321
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:323
		{
			yyVAL.node = yylex.(*parser).newArithmeticExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:328
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].item)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:330
		{
			yyVAL.node = yylex.(*parser).newParenExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[4].item)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:339
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:342
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(nil, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:344
		{
			yyVAL.node = yylex.(*parser).newIndexExpr(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].item)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:351
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:355
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:359
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:363
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:367
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:371
		{
			yyVAL.node = yylex.(*parser).newAttrExpr(yyDollar[1].node, yyDollar[3].node)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:378
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:382
		{
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:386
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos)
			yyVAL.node = yylex.(*parser).newListInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)

		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:394
		{
			yyVAL.node = yylex.(*parser).newListInitStartExpr(yyDollar[1].item.Pos)
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[2].node)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:399
		{
			yyVAL.node = yylex.(*parser).newListInitAppendExpr(yyVAL.node, yyDollar[3].node)
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:407
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[2].item.Pos)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:411
		{
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[3].item.Pos)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:415
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].astblock.LBracePos.Pos)
			yyVAL.node = yylex.(*parser).newMapInitEndExpr(yyVAL.node, yyDollar[1].astblock.RBracePos.Pos)
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:422
		{
			yyVAL.node = yylex.(*parser).newMapInitStartExpr(yyDollar[1].item.Pos)
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyVAL.node, yyDollar[2].node, yyDollar[4].node)
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:427
		{
			yyVAL.node = yylex.(*parser).newMapInitAppendExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:449
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, true)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:451
		{
			yyVAL.node = yylex.(*parser).newBoolLiteral(yyDollar[1].item.Pos, false)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:456
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:461
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteMultilineString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newStringLiteral(yyDollar[1].item)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:469
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:471
		{
			yyVAL.node = yylex.(*parser).newNilLiteral(yyDollar[1].item.Pos)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:477
		{
			yyVAL.node = yylex.(*parser).newNumberLiteral(yyDollar[1].item)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:479
		{
			num := yylex.(*parser).newNumberLiteral(yyDollar[2].item)
			switch yyDollar[1].item.Typ {
			case ADD: // pass
			case SUB:
				if num.NodeType == ast.TypeFloatLiteral {
					num.FloatLiteral.Val = -num.FloatLiteral.Val
					num.FloatLiteral.Start = yylex.(*parser).posCache.LnCol(yyDollar[1].item.Pos)
				} else {
					num.IntegerLiteral.Val = -num.IntegerLiteral.Val
					num.IntegerLiteral.Start = yylex.(*parser).posCache.LnCol(yyDollar[1].item.Pos)

				}
			}
			yyVAL.node = num
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:498
		{
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:502
		{
			yyDollar[1].item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			yyVAL.node = yylex.(*parser).newIdentifierLiteral(yyDollar[1].item)
		}
	}
	goto yystack /* stack new state and value */
}
