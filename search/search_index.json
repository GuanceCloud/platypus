{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Guance Cloud PPL (Pipeline Processor Language) is a domain-specific language for data processing, mainly for text and semi-structured data processing. PPL can be used for large-scale log parsing and feature extraction at the edge. Multiple extraction methods such as Grok, JSON and XML are supported. As a data processing language, PPL greatly improves the programmability of text and semi-structured processing. Getting Started Construction of PPL Tools Use go build to construct PPL command lines and copy them to the directory /usr/local/bin. go build cmd/ppl/ppl.go sudo cp ppl /usr/local/bin Instructions of PPL Since ppl supports inter-script introductions, it is necessary to specify the working directory, which by default is the directory of the ppl command lines when it is started. In addition, the parameter -s is a mandatory parameter and only checks if the script is legal when no entry is specified. The input data protocol supported by the ppl tool: lineprotocol : for more information about the protocol, check influxdb line-protocol . text : text data, such as log and json, would be input as a message field in the field of line protocol. The output data protocol: lineprotocol json : representing line protocol data in json. Usage: ppl run [flags] Flags: -h, --help help for run -i, --input string input data file path --output-type string result output type: json, lineprotocol (default \"json\") -s, --script string script name -t, --type string data source type: text, lineprotocol (default \"text\") -w, --workspace string ppl workspace directory (default \"/path/to/ppl-process-working-dir\") Edit the First PPL Script Built-in functions document: pkg/inimpl/guancecloud/funcs/md/fn.md Grok document: docs/grok.md Creat nginx_access_log.data and input the following logs: 207.46.13.28 - - [19/Oct/2022:02:25:59 +0000] \"GET / HTTP/2.0\" 200 5 \"-\" \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\" Creat nginx_access_log.ppl and input the following logs: # access log add_pattern(\"access_common\", \"%{NOTSPACE:client_ip} %{NOTSPACE:http_ident} %{NOTSPACE:http_auth} \\\\[%{HTTPDATE:time}\\\\] \\\"%{DATA:http_method} %{GREEDYDATA:http_url} HTTP/%{NUMBER:http_version}\\\" %{INT:status_code:int} %{INT:bytes:int}\") grok(_, '%{access_common} \"%{NOTSPACE:referrer}\" \"%{GREEDYDATA:agent}\"') user_agent(agent) group_between(status_code, [200,299], \"OK\", status) group_between(status_code, [300,399], \"notice\", status) group_between(status_code, [400,499], \"warning\", status) group_between(status_code, [500,599], \"error\", status) nullif(http_ident, \"-\") nullif(http_auth, \"-\") nullif(upstream, \"\") default_time(time) Execute ppl tools: ppl@GuanceCloud:~/go/src/github.com/GuanceCloud/ppl/scripts/test_nginx_access_log$ ppl run -s nginx_access_log.ppl -i nginx_access_log.data { \"fields\": { \"agent\": \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\", \"browser\": \"bingbot\", \"browserVer\": \"2.0\", \"bytes\": 5, \"client_ip\": \"207.46.13.28\", \"engine\": \"\", \"engineVer\": \"\", \"http_method\": \"GET\", \"http_url\": \"/\", \"http_version\": \"2.0\", \"isBot\": true, \"isMobile\": false, \"message\": \"207.46.13.28 - - [19/Oct/2022:02:25:59 +0000] \\\"GET / HTTP/2.0\\\" 200 5 \\\"-\\\" \\\"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\\\"\", \"os\": \"\", \"referrer\": \"-\", \"status\": \"OK\", \"status_code\": 200, \"ua\": \"\" }, \"measurement\": \"default_name\", \"tags\": {}, \"time\": \"2022-10-19T10:25:59+08:00\" } PPL Syntax For more information of syntax, see docs/pipeline.md .","title":"Overview"},{"location":"#overview","text":"Guance Cloud PPL (Pipeline Processor Language) is a domain-specific language for data processing, mainly for text and semi-structured data processing. PPL can be used for large-scale log parsing and feature extraction at the edge. Multiple extraction methods such as Grok, JSON and XML are supported. As a data processing language, PPL greatly improves the programmability of text and semi-structured processing.","title":"Overview"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#construction-of-ppl-tools","text":"Use go build to construct PPL command lines and copy them to the directory /usr/local/bin. go build cmd/ppl/ppl.go sudo cp ppl /usr/local/bin","title":"Construction of PPL Tools"},{"location":"#instructions-of-ppl","text":"Since ppl supports inter-script introductions, it is necessary to specify the working directory, which by default is the directory of the ppl command lines when it is started. In addition, the parameter -s is a mandatory parameter and only checks if the script is legal when no entry is specified. The input data protocol supported by the ppl tool: lineprotocol : for more information about the protocol, check influxdb line-protocol . text : text data, such as log and json, would be input as a message field in the field of line protocol. The output data protocol: lineprotocol json : representing line protocol data in json. Usage: ppl run [flags] Flags: -h, --help help for run -i, --input string input data file path --output-type string result output type: json, lineprotocol (default \"json\") -s, --script string script name -t, --type string data source type: text, lineprotocol (default \"text\") -w, --workspace string ppl workspace directory (default \"/path/to/ppl-process-working-dir\")","title":"Instructions of PPL"},{"location":"#edit-the-first-ppl-script","text":"Built-in functions document: pkg/inimpl/guancecloud/funcs/md/fn.md Grok document: docs/grok.md Creat nginx_access_log.data and input the following logs: 207.46.13.28 - - [19/Oct/2022:02:25:59 +0000] \"GET / HTTP/2.0\" 200 5 \"-\" \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\" Creat nginx_access_log.ppl and input the following logs: # access log add_pattern(\"access_common\", \"%{NOTSPACE:client_ip} %{NOTSPACE:http_ident} %{NOTSPACE:http_auth} \\\\[%{HTTPDATE:time}\\\\] \\\"%{DATA:http_method} %{GREEDYDATA:http_url} HTTP/%{NUMBER:http_version}\\\" %{INT:status_code:int} %{INT:bytes:int}\") grok(_, '%{access_common} \"%{NOTSPACE:referrer}\" \"%{GREEDYDATA:agent}\"') user_agent(agent) group_between(status_code, [200,299], \"OK\", status) group_between(status_code, [300,399], \"notice\", status) group_between(status_code, [400,499], \"warning\", status) group_between(status_code, [500,599], \"error\", status) nullif(http_ident, \"-\") nullif(http_auth, \"-\") nullif(upstream, \"\") default_time(time) Execute ppl tools: ppl@GuanceCloud:~/go/src/github.com/GuanceCloud/ppl/scripts/test_nginx_access_log$ ppl run -s nginx_access_log.ppl -i nginx_access_log.data { \"fields\": { \"agent\": \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\", \"browser\": \"bingbot\", \"browserVer\": \"2.0\", \"bytes\": 5, \"client_ip\": \"207.46.13.28\", \"engine\": \"\", \"engineVer\": \"\", \"http_method\": \"GET\", \"http_url\": \"/\", \"http_version\": \"2.0\", \"isBot\": true, \"isMobile\": false, \"message\": \"207.46.13.28 - - [19/Oct/2022:02:25:59 +0000] \\\"GET / HTTP/2.0\\\" 200 5 \\\"-\\\" \\\"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\\\"\", \"os\": \"\", \"referrer\": \"-\", \"status\": \"OK\", \"status_code\": 200, \"ua\": \"\" }, \"measurement\": \"default_name\", \"tags\": {}, \"time\": \"2022-10-19T10:25:59+08:00\" }","title":"Edit the First PPL Script"},{"location":"#ppl-syntax","text":"For more information of syntax, see docs/pipeline.md .","title":"PPL Syntax"},{"location":"explaination/","text":"Overview","title":"Overview"},{"location":"explaination/#overview","text":"","title":"Overview"},{"location":"how-tos/","text":"Overview","title":"Overview"},{"location":"how-tos/#overview","text":"","title":"Overview"},{"location":"references/grok/","text":"Grok Grok Pattern Grok pattern in PPL can be divided into two types: Built-in mode: Built-in pattern, which can be used by all pipeline scripts Local mode: The new mode in the ppl script through add_pattern () function is a local mode, which is only valid for the current pipeline script Take Nginx access-log as an example, the following explains how to write the corresponding grok, the original nginx access log is as follows: 127.0.0.1 - - [26/May/2022:20:53:52 +0800] \"GET /server_status HTTP/1.1\" 404 134 \"-\" \"Go-http-client/1.1\" Assuming we need to get client_ip, time (request), http_method, http_url, http_version and status_code from the access log, the grok pattern can be written as: # access log add_pattern(\"access_common\", \"%{NOTSPACE:client_ip} %{NOTSPACE:http_ident} %{NOTSPACE:http_auth} \\\\[%{HTTPDATE:time}\\\\] \\\"%{DATA:http_method} %{GREEDYDATA:http_url} HTTP/%{NUMBER:http_version}\\\" %{INT:status_code:int} %{INT:bytes:int}\") grok(_, '%{access_common} \"%{NOTSPACE:referrer}\" \"%{GREEDYDATA:agent}\"') user_agent(agent) group_between(status_code, [200,299], \"OK\", status) group_between(status_code, [300,399], \"notice\", status) group_between(status_code, [400,499], \"warning\", status) group_between(status_code, [500,599], \"error\", status) nullif(http_ident, \"-\") nullif(http_auth, \"-\") nullif(upstream, \"\") default_time(time) Grok Conbination The essence of grok is to predefine some regular expressions for text matching extraction and name the predefined regular expressions, which is convenient to use and expand countless new patterns with nested references. For example, PPL has three built-in modes as follows: _second (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?) # matching seconds, _second as the name of the mode _minute (?:[0-5][0-9]) # matching minutes, _minute as the name of the mode _hour (?:2[0123]|[01]?[0-9]) # matching hours, _hour as the name of the mode Based on the above three built-in patterns, you can extend your own built-in pattern and name it as time : # Add time to the file in the pattern directory. This mode is a global mode and time can be referenced anywhere time ([^0-9]?)%{hour:hour}:%{minute:minute}(?::%{second:second})([^0-9]?) # It can also be added to the pipeline file through add_pattern (), then this mode becomes a local mode and only the current pipeline script can use time add_pattern(time, \"([^0-9]?)%{HOUR:hour}:%{MINUTE:minute}(?::%{SECOND:second})([^0-9]?)\") # Extract the time field in the original input through grok. Assuming the input is 12:30:59, the {\"hour\": 12, \"minute\": 30, \"second\": 59} is extracted grok(_, %{time}) Notes: If a pattern with the same name occurs, the local pattern takes precedence (that is, the local pattern overrides the global pattern) In pipeline script, add_pattern function needs to be called before grok , otherwise the first data fetch would fail Build-in Pattern List When we use Grok cutting, we could use the built-in Grok Pattern directly: USERNAME : [a-zA-Z0-9._-]+ USER : %{USERNAME} EMAILLOCALPART : [a-zA-Z][a-zA-Z0-9_.+-=:]+ EMAILADDRESS : %{EMAILLOCALPART}@%{HOSTNAME} HTTPDUSER : %{EMAILADDRESS}|%{USER} INT : (?:[+-]?(?:[0-9]+)) BASE10NUM : (?:[+-]?(?:[0-9]+(?:\\.[0-9]+)?)|\\.[0-9]+) NUMBER : (?:%{BASE10NUM}) BASE16NUM : (?:0[xX]?[0-9a-fA-F]+) POSINT : \\b(?:[1-9][0-9]*)\\b NONNEGINT : \\b(?:[0-9]+)\\b WORD : \\b\\w+\\b NOTSPACE : \\S+ SPACE : \\s* DATA : .*? GREEDYDATA : .* GREEDYLINES : (?s).* QUOTEDSTRING : \"(?:[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|\\'(?:[^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\' UUID : [A-Fa-f0-9]{8}-(?:[A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12} MAC : (?:%{CISCOMAC}|%{WINDOWSMAC}|%{COMMONMAC}) CISCOMAC : (?:(?:[A-Fa-f0-9]{4}\\.){2}[A-Fa-f0-9]{4}) WINDOWSMAC : (?:(?:[A-Fa-f0-9]{2}-){5}[A-Fa-f0-9]{2}) COMMONMAC : (?:(?:[A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2}) IPV6 : (?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)? IPV4 : (?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?) IP : (?:%{IPV6}|%{IPV4}) HOSTNAME : \\b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(?:\\.?|\\b) HOST : %{HOSTNAME} IPORHOST : (?:%{IP}|%{HOSTNAME}) HOSTPORT : %{IPORHOST}:%{POSINT} PATH : (?:%{UNIXPATH}|%{WINPATH}) UNIXPATH : (?:/[\\w_%!$@:.,-]?/?)(?:\\S+)? TTY : (?:/dev/(?:pts|tty(?:[pq])?)(?:\\w+)?/?(?:[0-9]+)) WINPATH : (?:[A-Za-z]:|\\\\)(?:\\\\[^\\\\?*]*)+ URIPROTO : [A-Za-z]+(?:\\+[A-Za-z+]+)? URIHOST : %{IPORHOST}(?::%{POSINT:port})? URIPATH : (?:/[A-Za-z0-9$.+!*'(){},~:;=@#%_\\-]*)+ URIPARAM : \\?[A-Za-z0-9$.+!*'|(){},~@#%&/=:;_?\\-\\[\\]<>]* URIPATHPARAM : %{URIPATH}(?:%{URIPARAM})? URI : %{URIPROTO}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST})?(?:%{URIPATHPARAM})? MONTH : \\b(?:Jan(?:uary|uar)?|Feb(?:ruary|ruar)?|M(?:a|\u00e4)?r(?:ch|z)?|Apr(?:il)?|Ma(?:y|i)?|Jun(?:e|i)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|O(?:c|k)?t(?:ober)?|Nov(?:ember)?|De(?:c|z)(?:ember)?)\\b MONTHNUM : (?:0?[1-9]|1[0-2]) MONTHNUM2 : (?:0[1-9]|1[0-2]) MONTHDAY : (?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) DAY : (?:Mon(?:day)?|Tue(?:sday)?|Wed(?:nesday)?|Thu(?:rsday)?|Fri(?:day)?|Sat(?:urday)?|Sun(?:day)?) YEAR : (\\d\\d){1,2} HOUR : (?:2[0123]|[01]?[0-9]) MINUTE : (?:[0-5][0-9]) SECOND : (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?) TIME : (?:[^0-9]?)%{HOUR}:%{MINUTE}(?::%{SECOND})(?:[^0-9]?) DATE_US : %{MONTHNUM}[/-]%{MONTHDAY}[/-]%{YEAR} DATE_EU : %{MONTHDAY}[./-]%{MONTHNUM}[./-]%{YEAR} ISO8601_TIMEZONE : (?:Z|[+-]%{HOUR}(?::?%{MINUTE})) ISO8601_SECOND : (?:%{SECOND}|60) TIMESTAMP_ISO8601 : %{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}? DATE : %{DATE_US}|%{DATE_EU} DATESTAMP : %{DATE}[- ]%{TIME} TZ : (?:[PMCE][SD]T|UTC) DATESTAMP_RFC822 : %{DAY} %{MONTH} %{MONTHDAY} %{YEAR} %{TIME} %{TZ} DATESTAMP_RFC2822 : %{DAY}, %{MONTHDAY} %{MONTH} %{YEAR} %{TIME} %{ISO8601_TIMEZONE} DATESTAMP_OTHER : %{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{TZ} %{YEAR} DATESTAMP_EVENTLOG : %{YEAR}%{MONTHNUM2}%{MONTHDAY}%{HOUR}%{MINUTE}%{SECOND} HTTPDERROR_DATE : %{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} SYSLOGTIMESTAMP : %{MONTH} +%{MONTHDAY} %{TIME} PROG : [\\x21-\\x5a\\x5c\\x5e-\\x7e]+ SYSLOGPROG : %{PROG:program}(?:\\[%{POSINT:pid}\\])? SYSLOGHOST : %{IPORHOST} SYSLOGFACILITY : <%{NONNEGINT:facility}.%{NONNEGINT:priority}> HTTPDATE : %{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME} %{INT} QS : %{QUOTEDSTRING} SYSLOGBASE : %{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: COMMONAPACHELOG : %{IPORHOST:clientip} %{HTTPDUSER:ident} %{USER:auth} \\[%{HTTPDATE:timestamp}\\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) COMBINEDAPACHELOG : %{COMMONAPACHELOG} %{QS:referrer} %{QS:agent} HTTPD20_ERRORLOG : \\[%{HTTPDERROR_DATE:timestamp}\\] \\[%{LOGLEVEL:loglevel}\\] (?:\\[client %{IPORHOST:clientip}\\] ){0,1}%{GREEDYDATA:errormsg} HTTPD24_ERRORLOG : \\[%{HTTPDERROR_DATE:timestamp}\\] \\[%{WORD:module}:%{LOGLEVEL:loglevel}\\] \\[pid %{POSINT:pid}:tid %{NUMBER:tid}\\]( \\(%{POSINT:proxy_errorcode}\\)%{DATA:proxy_errormessage}:)?( \\[client %{IPORHOST:client}:%{POSINT:clientport}\\])? %{DATA:errorcode}: %{GREEDYDATA:message} HTTPD_ERRORLOG : %{HTTPD20_ERRORLOG}|%{HTTPD24_ERRORLOG} LOGLEVEL : (?:[Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?) COMMONENVOYACCESSLOG : \\[%{TIMESTAMP_ISO8601:timestamp}\\] \\\"%{DATA:method} (?:%{URIPATH:uri_path}(?:%{URIPARAM:uri_param})?|%{DATA:}) %{DATA:protocol}\\\" %{NUMBER:status_code} %{DATA:response_flags} %{NUMBER:bytes_received} %{NUMBER:bytes_sent} %{NUMBER:duration} (?:%{NUMBER:upstream_service_time}|%{DATA:tcp_service_time}) \\\"%{DATA:forwarded_for}\\\" \\\"%{DATA:user_agent}\\\" \\\"%{DATA:request_id}\\\" \\\"%{DATA:authority}\\\" \\\"%{DATA:upstream_service}\\\"","title":"Grok"},{"location":"references/grok/#grok","text":"","title":"Grok"},{"location":"references/grok/#grok-pattern","text":"Grok pattern in PPL can be divided into two types: Built-in mode: Built-in pattern, which can be used by all pipeline scripts Local mode: The new mode in the ppl script through add_pattern () function is a local mode, which is only valid for the current pipeline script Take Nginx access-log as an example, the following explains how to write the corresponding grok, the original nginx access log is as follows: 127.0.0.1 - - [26/May/2022:20:53:52 +0800] \"GET /server_status HTTP/1.1\" 404 134 \"-\" \"Go-http-client/1.1\" Assuming we need to get client_ip, time (request), http_method, http_url, http_version and status_code from the access log, the grok pattern can be written as: # access log add_pattern(\"access_common\", \"%{NOTSPACE:client_ip} %{NOTSPACE:http_ident} %{NOTSPACE:http_auth} \\\\[%{HTTPDATE:time}\\\\] \\\"%{DATA:http_method} %{GREEDYDATA:http_url} HTTP/%{NUMBER:http_version}\\\" %{INT:status_code:int} %{INT:bytes:int}\") grok(_, '%{access_common} \"%{NOTSPACE:referrer}\" \"%{GREEDYDATA:agent}\"') user_agent(agent) group_between(status_code, [200,299], \"OK\", status) group_between(status_code, [300,399], \"notice\", status) group_between(status_code, [400,499], \"warning\", status) group_between(status_code, [500,599], \"error\", status) nullif(http_ident, \"-\") nullif(http_auth, \"-\") nullif(upstream, \"\") default_time(time)","title":"Grok Pattern"},{"location":"references/grok/#grok-conbination","text":"The essence of grok is to predefine some regular expressions for text matching extraction and name the predefined regular expressions, which is convenient to use and expand countless new patterns with nested references. For example, PPL has three built-in modes as follows: _second (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?) # matching seconds, _second as the name of the mode _minute (?:[0-5][0-9]) # matching minutes, _minute as the name of the mode _hour (?:2[0123]|[01]?[0-9]) # matching hours, _hour as the name of the mode Based on the above three built-in patterns, you can extend your own built-in pattern and name it as time : # Add time to the file in the pattern directory. This mode is a global mode and time can be referenced anywhere time ([^0-9]?)%{hour:hour}:%{minute:minute}(?::%{second:second})([^0-9]?) # It can also be added to the pipeline file through add_pattern (), then this mode becomes a local mode and only the current pipeline script can use time add_pattern(time, \"([^0-9]?)%{HOUR:hour}:%{MINUTE:minute}(?::%{SECOND:second})([^0-9]?)\") # Extract the time field in the original input through grok. Assuming the input is 12:30:59, the {\"hour\": 12, \"minute\": 30, \"second\": 59} is extracted grok(_, %{time}) Notes: If a pattern with the same name occurs, the local pattern takes precedence (that is, the local pattern overrides the global pattern) In pipeline script, add_pattern function needs to be called before grok , otherwise the first data fetch would fail","title":"Grok Conbination"},{"location":"references/grok/#build-in-pattern-list","text":"When we use Grok cutting, we could use the built-in Grok Pattern directly: USERNAME : [a-zA-Z0-9._-]+ USER : %{USERNAME} EMAILLOCALPART : [a-zA-Z][a-zA-Z0-9_.+-=:]+ EMAILADDRESS : %{EMAILLOCALPART}@%{HOSTNAME} HTTPDUSER : %{EMAILADDRESS}|%{USER} INT : (?:[+-]?(?:[0-9]+)) BASE10NUM : (?:[+-]?(?:[0-9]+(?:\\.[0-9]+)?)|\\.[0-9]+) NUMBER : (?:%{BASE10NUM}) BASE16NUM : (?:0[xX]?[0-9a-fA-F]+) POSINT : \\b(?:[1-9][0-9]*)\\b NONNEGINT : \\b(?:[0-9]+)\\b WORD : \\b\\w+\\b NOTSPACE : \\S+ SPACE : \\s* DATA : .*? GREEDYDATA : .* GREEDYLINES : (?s).* QUOTEDSTRING : \"(?:[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|\\'(?:[^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\' UUID : [A-Fa-f0-9]{8}-(?:[A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12} MAC : (?:%{CISCOMAC}|%{WINDOWSMAC}|%{COMMONMAC}) CISCOMAC : (?:(?:[A-Fa-f0-9]{4}\\.){2}[A-Fa-f0-9]{4}) WINDOWSMAC : (?:(?:[A-Fa-f0-9]{2}-){5}[A-Fa-f0-9]{2}) COMMONMAC : (?:(?:[A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2}) IPV6 : (?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)? IPV4 : (?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?) IP : (?:%{IPV6}|%{IPV4}) HOSTNAME : \\b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(?:\\.?|\\b) HOST : %{HOSTNAME} IPORHOST : (?:%{IP}|%{HOSTNAME}) HOSTPORT : %{IPORHOST}:%{POSINT} PATH : (?:%{UNIXPATH}|%{WINPATH}) UNIXPATH : (?:/[\\w_%!$@:.,-]?/?)(?:\\S+)? TTY : (?:/dev/(?:pts|tty(?:[pq])?)(?:\\w+)?/?(?:[0-9]+)) WINPATH : (?:[A-Za-z]:|\\\\)(?:\\\\[^\\\\?*]*)+ URIPROTO : [A-Za-z]+(?:\\+[A-Za-z+]+)? URIHOST : %{IPORHOST}(?::%{POSINT:port})? URIPATH : (?:/[A-Za-z0-9$.+!*'(){},~:;=@#%_\\-]*)+ URIPARAM : \\?[A-Za-z0-9$.+!*'|(){},~@#%&/=:;_?\\-\\[\\]<>]* URIPATHPARAM : %{URIPATH}(?:%{URIPARAM})? URI : %{URIPROTO}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST})?(?:%{URIPATHPARAM})? MONTH : \\b(?:Jan(?:uary|uar)?|Feb(?:ruary|ruar)?|M(?:a|\u00e4)?r(?:ch|z)?|Apr(?:il)?|Ma(?:y|i)?|Jun(?:e|i)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|O(?:c|k)?t(?:ober)?|Nov(?:ember)?|De(?:c|z)(?:ember)?)\\b MONTHNUM : (?:0?[1-9]|1[0-2]) MONTHNUM2 : (?:0[1-9]|1[0-2]) MONTHDAY : (?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) DAY : (?:Mon(?:day)?|Tue(?:sday)?|Wed(?:nesday)?|Thu(?:rsday)?|Fri(?:day)?|Sat(?:urday)?|Sun(?:day)?) YEAR : (\\d\\d){1,2} HOUR : (?:2[0123]|[01]?[0-9]) MINUTE : (?:[0-5][0-9]) SECOND : (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?) TIME : (?:[^0-9]?)%{HOUR}:%{MINUTE}(?::%{SECOND})(?:[^0-9]?) DATE_US : %{MONTHNUM}[/-]%{MONTHDAY}[/-]%{YEAR} DATE_EU : %{MONTHDAY}[./-]%{MONTHNUM}[./-]%{YEAR} ISO8601_TIMEZONE : (?:Z|[+-]%{HOUR}(?::?%{MINUTE})) ISO8601_SECOND : (?:%{SECOND}|60) TIMESTAMP_ISO8601 : %{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}? DATE : %{DATE_US}|%{DATE_EU} DATESTAMP : %{DATE}[- ]%{TIME} TZ : (?:[PMCE][SD]T|UTC) DATESTAMP_RFC822 : %{DAY} %{MONTH} %{MONTHDAY} %{YEAR} %{TIME} %{TZ} DATESTAMP_RFC2822 : %{DAY}, %{MONTHDAY} %{MONTH} %{YEAR} %{TIME} %{ISO8601_TIMEZONE} DATESTAMP_OTHER : %{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{TZ} %{YEAR} DATESTAMP_EVENTLOG : %{YEAR}%{MONTHNUM2}%{MONTHDAY}%{HOUR}%{MINUTE}%{SECOND} HTTPDERROR_DATE : %{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} SYSLOGTIMESTAMP : %{MONTH} +%{MONTHDAY} %{TIME} PROG : [\\x21-\\x5a\\x5c\\x5e-\\x7e]+ SYSLOGPROG : %{PROG:program}(?:\\[%{POSINT:pid}\\])? SYSLOGHOST : %{IPORHOST} SYSLOGFACILITY : <%{NONNEGINT:facility}.%{NONNEGINT:priority}> HTTPDATE : %{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME} %{INT} QS : %{QUOTEDSTRING} SYSLOGBASE : %{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: COMMONAPACHELOG : %{IPORHOST:clientip} %{HTTPDUSER:ident} %{USER:auth} \\[%{HTTPDATE:timestamp}\\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) COMBINEDAPACHELOG : %{COMMONAPACHELOG} %{QS:referrer} %{QS:agent} HTTPD20_ERRORLOG : \\[%{HTTPDERROR_DATE:timestamp}\\] \\[%{LOGLEVEL:loglevel}\\] (?:\\[client %{IPORHOST:clientip}\\] ){0,1}%{GREEDYDATA:errormsg} HTTPD24_ERRORLOG : \\[%{HTTPDERROR_DATE:timestamp}\\] \\[%{WORD:module}:%{LOGLEVEL:loglevel}\\] \\[pid %{POSINT:pid}:tid %{NUMBER:tid}\\]( \\(%{POSINT:proxy_errorcode}\\)%{DATA:proxy_errormessage}:)?( \\[client %{IPORHOST:client}:%{POSINT:clientport}\\])? %{DATA:errorcode}: %{GREEDYDATA:message} HTTPD_ERRORLOG : %{HTTPD20_ERRORLOG}|%{HTTPD24_ERRORLOG} LOGLEVEL : (?:[Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?) COMMONENVOYACCESSLOG : \\[%{TIMESTAMP_ISO8601:timestamp}\\] \\\"%{DATA:method} (?:%{URIPATH:uri_path}(?:%{URIPARAM:uri_param})?|%{DATA:}) %{DATA:protocol}\\\" %{NUMBER:status_code} %{DATA:response_flags} %{NUMBER:bytes_received} %{NUMBER:bytes_sent} %{NUMBER:duration} (?:%{NUMBER:upstream_service_time}|%{DATA:tcp_service_time}) \\\"%{DATA:forwarded_for}\\\" \\\"%{DATA:user_agent}\\\" \\\"%{DATA:request_id}\\\" \\\"%{DATA:authority}\\\" \\\"%{DATA:upstream_service}\\\"","title":"Build-in Pattern List"},{"location":"references/grok_zh/","text":"Grok Grok Pattern PPL \u4e2d grok pattern \u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a \u5185\u7f6e\u6a21\u5f0f\uff1a\u5185\u7f6e pattern\uff0c\u6240\u6709 pipeline \u811a\u672c\u90fd\u53ef\u4f7f\u7528 \u5c40\u90e8\u6a21\u5f0f\uff1a\u5728 ppl \u811a\u672c\u4e2d\u901a\u8fc7 add_pattern() \u51fd\u6570\u65b0\u589e\u7684\u6a21\u5f0f\u4e3a\u5c40\u90e8\u6a21\u5f0f\uff0c\u53ea\u9488\u5bf9\u5f53\u524d pipeline \u811a\u672c\u6709\u6548 \u4ee5\u4e0b\u4ee5 Nginx access-log \u4e3a\u4f8b\uff0c\u8bf4\u660e\u4e00\u4e0b\u5982\u4f55\u7f16\u5199\u5bf9\u5e94\u7684 grok\uff0c\u539f\u59cb nginx access log \u5982\u4e0b\uff1a 127.0.0.1 - - [26/May/2022:20:53:52 +0800] \"GET /server_status HTTP/1.1\" 404 134 \"-\" \"Go-http-client/1.1\" \u5047\u8bbe\u6211\u4eec\u9700\u8981\u4ece\u8be5\u8bbf\u95ee\u65e5\u5fd7\u4e2d\u83b7\u53d6 client_ip\u3001time (request)\u3001http_method\u3001http_url\u3001http_version\u3001status_code \u8fd9\u4e9b\u5185\u5bb9\uff0c\u90a3\u4e48 grok pattern \u53ef\u4ee5\u5199\u6210: # access log add_pattern(\"access_common\", \"%{NOTSPACE:client_ip} %{NOTSPACE:http_ident} %{NOTSPACE:http_auth} \\\\[%{HTTPDATE:time}\\\\] \\\"%{DATA:http_method} %{GREEDYDATA:http_url} HTTP/%{NUMBER:http_version}\\\" %{INT:status_code:int} %{INT:bytes:int}\") grok(_, '%{access_common} \"%{NOTSPACE:referrer}\" \"%{GREEDYDATA:agent}\"') user_agent(agent) group_between(status_code, [200,299], \"OK\", status) group_between(status_code, [300,399], \"notice\", status) group_between(status_code, [400,499], \"warning\", status) group_between(status_code, [500,599], \"error\", status) nullif(http_ident, \"-\") nullif(http_auth, \"-\") nullif(upstream, \"\") default_time(time) Grok \u7ec4\u5408 grok \u672c\u8d28\u662f\u9884\u5b9a\u4e49\u4e00\u4e9b\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u8fdb\u884c\u6587\u672c\u5339\u914d\u63d0\u53d6\uff0c\u5e76\u4e14\u7ed9\u9884\u5b9a\u4e49\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u547d\u540d\uff0c\u65b9\u4fbf\u4f7f\u7528\u4e0e\u5d4c\u5957\u5f15\u7528\u6269\u5c55\u51fa\u65e0\u6570\u4e2a\u65b0\u6a21\u5f0f\u3002\u6bd4\u5982 PPL \u6709 3 \u4e2a\u5982\u4e0b\u5185\u7f6e\u6a21\u5f0f\uff1a _second (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?) # \u5339\u914d\u79d2\u6570\uff0c_second\u4e3a\u6a21\u5f0f\u540d _minute (?:[0-5][0-9]) # \u5339\u914d\u5206\u949f\u6570\uff0c_minute\u4e3a\u6a21\u5f0f\u540d _hour (?:2[0123]|[01]?[0-9]) # \u5339\u914d\u5c0f\u65f6\u6570\uff0c_hour\u4e3a\u6a21\u5f0f\u540d \u57fa\u4e8e\u4e0a\u9762\u4e09\u4e2a\u5185\u7f6e\u6a21\u5f0f\uff0c\u53ef\u4ee5\u6269\u5c55\u51fa\u81ea\u5df1\u5185\u7f6e\u6a21\u5f0f\u4e14\u547d\u540d\u4e3a time : # \u628a time \u52a0\u5230 pattern \u76ee\u5f55\u4e0b\u6587\u4ef6\u4e2d\uff0c\u6b64\u6a21\u5f0f\u4e3a\u5168\u5c40\u6a21\u5f0f\uff0c\u4efb\u4f55\u5730\u65b9\u90fd\u80fd\u5f15\u7528 time time ([^0-9]?)%{hour:hour}:%{minute:minute}(?::%{second:second})([^0-9]?) # \u4e5f\u53ef\u4ee5\u901a\u8fc7 add_pattern() \u6dfb\u52a0\u5230 pipeline \u6587\u4ef6\u4e2d\uff0c\u5219\u6b64\u6a21\u5f0f\u53d8\u4e3a\u5c40\u90e8\u6a21\u5f0f\uff0c\u53ea\u6709\u5f53\u524d pipeline \u811a\u672c\u80fd\u4f7f\u7528 time add_pattern(time, \"([^0-9]?)%{HOUR:hour}:%{MINUTE:minute}(?::%{SECOND:second})([^0-9]?)\") # \u901a\u8fc7 grok \u63d0\u53d6\u539f\u59cb\u8f93\u5165\u4e2d\u7684\u65f6\u95f4\u5b57\u6bb5\u3002\u5047\u5b9a\u8f93\u5165\u4e3a 12:30:59\uff0c\u5219\u63d0\u53d6\u5230 {\"hour\": 12, \"minute\": 30, \"second\": 59} grok(_, %{time}) \u6ce8\u610f\u4e8b\u9879\uff1a \u5982\u679c\u51fa\u73b0\u540c\u540d\u6a21\u5f0f\uff0c\u5219\u4ee5\u5c40\u90e8\u6a21\u5f0f\u4f18\u5148\uff08\u5373\u5c40\u90e8\u6a21\u5f0f\u8986\u76d6\u5168\u5c40\u6a21\u5f0f\uff09 pipeline \u811a\u672c\u4e2d\uff0c add_pattern \u51fd\u6570\u9700\u5728 grok \u51fd\u6570\u524d\u9762\u8c03\u7528\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u7b2c\u4e00\u6761\u6570\u636e\u63d0\u53d6\u5931\u8d25 \u5185\u7f6e\u7684 Pattern \u5217\u8868 \u6211\u4eec\u5728\u4f7f\u7528 Grok \u5207\u5272\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5185\u7f6e\u7684 Grok Pattern\uff1a USERNAME : [a-zA-Z0-9._-]+ USER : %{USERNAME} EMAILLOCALPART : [a-zA-Z][a-zA-Z0-9_.+-=:]+ EMAILADDRESS : %{EMAILLOCALPART}@%{HOSTNAME} HTTPDUSER : %{EMAILADDRESS}|%{USER} INT : (?:[+-]?(?:[0-9]+)) BASE10NUM : (?:[+-]?(?:[0-9]+(?:\\.[0-9]+)?)|\\.[0-9]+) NUMBER : (?:%{BASE10NUM}) BASE16NUM : (?:0[xX]?[0-9a-fA-F]+) POSINT : \\b(?:[1-9][0-9]*)\\b NONNEGINT : \\b(?:[0-9]+)\\b WORD : \\b\\w+\\b NOTSPACE : \\S+ SPACE : \\s* DATA : .*? GREEDYDATA : .* GREEDYLINES : (?s).* QUOTEDSTRING : \"(?:[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|\\'(?:[^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\' UUID : [A-Fa-f0-9]{8}-(?:[A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12} MAC : (?:%{CISCOMAC}|%{WINDOWSMAC}|%{COMMONMAC}) CISCOMAC : (?:(?:[A-Fa-f0-9]{4}\\.){2}[A-Fa-f0-9]{4}) WINDOWSMAC : (?:(?:[A-Fa-f0-9]{2}-){5}[A-Fa-f0-9]{2}) COMMONMAC : (?:(?:[A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2}) IPV6 : (?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)? IPV4 : (?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?) IP : (?:%{IPV6}|%{IPV4}) HOSTNAME : \\b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(?:\\.?|\\b) HOST : %{HOSTNAME} IPORHOST : (?:%{IP}|%{HOSTNAME}) HOSTPORT : %{IPORHOST}:%{POSINT} PATH : (?:%{UNIXPATH}|%{WINPATH}) UNIXPATH : (?:/[\\w_%!$@:.,-]?/?)(?:\\S+)? TTY : (?:/dev/(?:pts|tty(?:[pq])?)(?:\\w+)?/?(?:[0-9]+)) WINPATH : (?:[A-Za-z]:|\\\\)(?:\\\\[^\\\\?*]*)+ URIPROTO : [A-Za-z]+(?:\\+[A-Za-z+]+)? URIHOST : %{IPORHOST}(?::%{POSINT:port})? URIPATH : (?:/[A-Za-z0-9$.+!*'(){},~:;=@#%_\\-]*)+ URIPARAM : \\?[A-Za-z0-9$.+!*'|(){},~@#%&/=:;_?\\-\\[\\]<>]* URIPATHPARAM : %{URIPATH}(?:%{URIPARAM})? URI : %{URIPROTO}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST})?(?:%{URIPATHPARAM})? MONTH : \\b(?:Jan(?:uary|uar)?|Feb(?:ruary|ruar)?|M(?:a|\u00e4)?r(?:ch|z)?|Apr(?:il)?|Ma(?:y|i)?|Jun(?:e|i)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|O(?:c|k)?t(?:ober)?|Nov(?:ember)?|De(?:c|z)(?:ember)?)\\b MONTHNUM : (?:0?[1-9]|1[0-2]) MONTHNUM2 : (?:0[1-9]|1[0-2]) MONTHDAY : (?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) DAY : (?:Mon(?:day)?|Tue(?:sday)?|Wed(?:nesday)?|Thu(?:rsday)?|Fri(?:day)?|Sat(?:urday)?|Sun(?:day)?) YEAR : (\\d\\d){1,2} HOUR : (?:2[0123]|[01]?[0-9]) MINUTE : (?:[0-5][0-9]) SECOND : (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?) TIME : (?:[^0-9]?)%{HOUR}:%{MINUTE}(?::%{SECOND})(?:[^0-9]?) DATE_US : %{MONTHNUM}[/-]%{MONTHDAY}[/-]%{YEAR} DATE_EU : %{MONTHDAY}[./-]%{MONTHNUM}[./-]%{YEAR} ISO8601_TIMEZONE : (?:Z|[+-]%{HOUR}(?::?%{MINUTE})) ISO8601_SECOND : (?:%{SECOND}|60) TIMESTAMP_ISO8601 : %{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}? DATE : %{DATE_US}|%{DATE_EU} DATESTAMP : %{DATE}[- ]%{TIME} TZ : (?:[PMCE][SD]T|UTC) DATESTAMP_RFC822 : %{DAY} %{MONTH} %{MONTHDAY} %{YEAR} %{TIME} %{TZ} DATESTAMP_RFC2822 : %{DAY}, %{MONTHDAY} %{MONTH} %{YEAR} %{TIME} %{ISO8601_TIMEZONE} DATESTAMP_OTHER : %{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{TZ} %{YEAR} DATESTAMP_EVENTLOG : %{YEAR}%{MONTHNUM2}%{MONTHDAY}%{HOUR}%{MINUTE}%{SECOND} HTTPDERROR_DATE : %{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} SYSLOGTIMESTAMP : %{MONTH} +%{MONTHDAY} %{TIME} PROG : [\\x21-\\x5a\\x5c\\x5e-\\x7e]+ SYSLOGPROG : %{PROG:program}(?:\\[%{POSINT:pid}\\])? SYSLOGHOST : %{IPORHOST} SYSLOGFACILITY : <%{NONNEGINT:facility}.%{NONNEGINT:priority}> HTTPDATE : %{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME} %{INT} QS : %{QUOTEDSTRING} SYSLOGBASE : %{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: COMMONAPACHELOG : %{IPORHOST:clientip} %{HTTPDUSER:ident} %{USER:auth} \\[%{HTTPDATE:timestamp}\\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) COMBINEDAPACHELOG : %{COMMONAPACHELOG} %{QS:referrer} %{QS:agent} HTTPD20_ERRORLOG : \\[%{HTTPDERROR_DATE:timestamp}\\] \\[%{LOGLEVEL:loglevel}\\] (?:\\[client %{IPORHOST:clientip}\\] ){0,1}%{GREEDYDATA:errormsg} HTTPD24_ERRORLOG : \\[%{HTTPDERROR_DATE:timestamp}\\] \\[%{WORD:module}:%{LOGLEVEL:loglevel}\\] \\[pid %{POSINT:pid}:tid %{NUMBER:tid}\\]( \\(%{POSINT:proxy_errorcode}\\)%{DATA:proxy_errormessage}:)?( \\[client %{IPORHOST:client}:%{POSINT:clientport}\\])? %{DATA:errorcode}: %{GREEDYDATA:message} HTTPD_ERRORLOG : %{HTTPD20_ERRORLOG}|%{HTTPD24_ERRORLOG} LOGLEVEL : (?:[Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?) COMMONENVOYACCESSLOG : \\[%{TIMESTAMP_ISO8601:timestamp}\\] \\\"%{DATA:method} (?:%{URIPATH:uri_path}(?:%{URIPARAM:uri_param})?|%{DATA:}) %{DATA:protocol}\\\" %{NUMBER:status_code} %{DATA:response_flags} %{NUMBER:bytes_received} %{NUMBER:bytes_sent} %{NUMBER:duration} (?:%{NUMBER:upstream_service_time}|%{DATA:tcp_service_time}) \\\"%{DATA:forwarded_for}\\\" \\\"%{DATA:user_agent}\\\" \\\"%{DATA:request_id}\\\" \\\"%{DATA:authority}\\\" \\\"%{DATA:upstream_service}\\\"","title":"Grok"},{"location":"references/grok_zh/#grok","text":"","title":"Grok"},{"location":"references/grok_zh/#grok-pattern","text":"PPL \u4e2d grok pattern \u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a \u5185\u7f6e\u6a21\u5f0f\uff1a\u5185\u7f6e pattern\uff0c\u6240\u6709 pipeline \u811a\u672c\u90fd\u53ef\u4f7f\u7528 \u5c40\u90e8\u6a21\u5f0f\uff1a\u5728 ppl \u811a\u672c\u4e2d\u901a\u8fc7 add_pattern() \u51fd\u6570\u65b0\u589e\u7684\u6a21\u5f0f\u4e3a\u5c40\u90e8\u6a21\u5f0f\uff0c\u53ea\u9488\u5bf9\u5f53\u524d pipeline \u811a\u672c\u6709\u6548 \u4ee5\u4e0b\u4ee5 Nginx access-log \u4e3a\u4f8b\uff0c\u8bf4\u660e\u4e00\u4e0b\u5982\u4f55\u7f16\u5199\u5bf9\u5e94\u7684 grok\uff0c\u539f\u59cb nginx access log \u5982\u4e0b\uff1a 127.0.0.1 - - [26/May/2022:20:53:52 +0800] \"GET /server_status HTTP/1.1\" 404 134 \"-\" \"Go-http-client/1.1\" \u5047\u8bbe\u6211\u4eec\u9700\u8981\u4ece\u8be5\u8bbf\u95ee\u65e5\u5fd7\u4e2d\u83b7\u53d6 client_ip\u3001time (request)\u3001http_method\u3001http_url\u3001http_version\u3001status_code \u8fd9\u4e9b\u5185\u5bb9\uff0c\u90a3\u4e48 grok pattern \u53ef\u4ee5\u5199\u6210: # access log add_pattern(\"access_common\", \"%{NOTSPACE:client_ip} %{NOTSPACE:http_ident} %{NOTSPACE:http_auth} \\\\[%{HTTPDATE:time}\\\\] \\\"%{DATA:http_method} %{GREEDYDATA:http_url} HTTP/%{NUMBER:http_version}\\\" %{INT:status_code:int} %{INT:bytes:int}\") grok(_, '%{access_common} \"%{NOTSPACE:referrer}\" \"%{GREEDYDATA:agent}\"') user_agent(agent) group_between(status_code, [200,299], \"OK\", status) group_between(status_code, [300,399], \"notice\", status) group_between(status_code, [400,499], \"warning\", status) group_between(status_code, [500,599], \"error\", status) nullif(http_ident, \"-\") nullif(http_auth, \"-\") nullif(upstream, \"\") default_time(time)","title":"Grok Pattern"},{"location":"references/grok_zh/#grok_1","text":"grok \u672c\u8d28\u662f\u9884\u5b9a\u4e49\u4e00\u4e9b\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u8fdb\u884c\u6587\u672c\u5339\u914d\u63d0\u53d6\uff0c\u5e76\u4e14\u7ed9\u9884\u5b9a\u4e49\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u547d\u540d\uff0c\u65b9\u4fbf\u4f7f\u7528\u4e0e\u5d4c\u5957\u5f15\u7528\u6269\u5c55\u51fa\u65e0\u6570\u4e2a\u65b0\u6a21\u5f0f\u3002\u6bd4\u5982 PPL \u6709 3 \u4e2a\u5982\u4e0b\u5185\u7f6e\u6a21\u5f0f\uff1a _second (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?) # \u5339\u914d\u79d2\u6570\uff0c_second\u4e3a\u6a21\u5f0f\u540d _minute (?:[0-5][0-9]) # \u5339\u914d\u5206\u949f\u6570\uff0c_minute\u4e3a\u6a21\u5f0f\u540d _hour (?:2[0123]|[01]?[0-9]) # \u5339\u914d\u5c0f\u65f6\u6570\uff0c_hour\u4e3a\u6a21\u5f0f\u540d \u57fa\u4e8e\u4e0a\u9762\u4e09\u4e2a\u5185\u7f6e\u6a21\u5f0f\uff0c\u53ef\u4ee5\u6269\u5c55\u51fa\u81ea\u5df1\u5185\u7f6e\u6a21\u5f0f\u4e14\u547d\u540d\u4e3a time : # \u628a time \u52a0\u5230 pattern \u76ee\u5f55\u4e0b\u6587\u4ef6\u4e2d\uff0c\u6b64\u6a21\u5f0f\u4e3a\u5168\u5c40\u6a21\u5f0f\uff0c\u4efb\u4f55\u5730\u65b9\u90fd\u80fd\u5f15\u7528 time time ([^0-9]?)%{hour:hour}:%{minute:minute}(?::%{second:second})([^0-9]?) # \u4e5f\u53ef\u4ee5\u901a\u8fc7 add_pattern() \u6dfb\u52a0\u5230 pipeline \u6587\u4ef6\u4e2d\uff0c\u5219\u6b64\u6a21\u5f0f\u53d8\u4e3a\u5c40\u90e8\u6a21\u5f0f\uff0c\u53ea\u6709\u5f53\u524d pipeline \u811a\u672c\u80fd\u4f7f\u7528 time add_pattern(time, \"([^0-9]?)%{HOUR:hour}:%{MINUTE:minute}(?::%{SECOND:second})([^0-9]?)\") # \u901a\u8fc7 grok \u63d0\u53d6\u539f\u59cb\u8f93\u5165\u4e2d\u7684\u65f6\u95f4\u5b57\u6bb5\u3002\u5047\u5b9a\u8f93\u5165\u4e3a 12:30:59\uff0c\u5219\u63d0\u53d6\u5230 {\"hour\": 12, \"minute\": 30, \"second\": 59} grok(_, %{time}) \u6ce8\u610f\u4e8b\u9879\uff1a \u5982\u679c\u51fa\u73b0\u540c\u540d\u6a21\u5f0f\uff0c\u5219\u4ee5\u5c40\u90e8\u6a21\u5f0f\u4f18\u5148\uff08\u5373\u5c40\u90e8\u6a21\u5f0f\u8986\u76d6\u5168\u5c40\u6a21\u5f0f\uff09 pipeline \u811a\u672c\u4e2d\uff0c add_pattern \u51fd\u6570\u9700\u5728 grok \u51fd\u6570\u524d\u9762\u8c03\u7528\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u7b2c\u4e00\u6761\u6570\u636e\u63d0\u53d6\u5931\u8d25","title":"Grok \u7ec4\u5408"},{"location":"references/grok_zh/#pattern","text":"\u6211\u4eec\u5728\u4f7f\u7528 Grok \u5207\u5272\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5185\u7f6e\u7684 Grok Pattern\uff1a USERNAME : [a-zA-Z0-9._-]+ USER : %{USERNAME} EMAILLOCALPART : [a-zA-Z][a-zA-Z0-9_.+-=:]+ EMAILADDRESS : %{EMAILLOCALPART}@%{HOSTNAME} HTTPDUSER : %{EMAILADDRESS}|%{USER} INT : (?:[+-]?(?:[0-9]+)) BASE10NUM : (?:[+-]?(?:[0-9]+(?:\\.[0-9]+)?)|\\.[0-9]+) NUMBER : (?:%{BASE10NUM}) BASE16NUM : (?:0[xX]?[0-9a-fA-F]+) POSINT : \\b(?:[1-9][0-9]*)\\b NONNEGINT : \\b(?:[0-9]+)\\b WORD : \\b\\w+\\b NOTSPACE : \\S+ SPACE : \\s* DATA : .*? GREEDYDATA : .* GREEDYLINES : (?s).* QUOTEDSTRING : \"(?:[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|\\'(?:[^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\' UUID : [A-Fa-f0-9]{8}-(?:[A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12} MAC : (?:%{CISCOMAC}|%{WINDOWSMAC}|%{COMMONMAC}) CISCOMAC : (?:(?:[A-Fa-f0-9]{4}\\.){2}[A-Fa-f0-9]{4}) WINDOWSMAC : (?:(?:[A-Fa-f0-9]{2}-){5}[A-Fa-f0-9]{2}) COMMONMAC : (?:(?:[A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2}) IPV6 : (?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)? IPV4 : (?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?) IP : (?:%{IPV6}|%{IPV4}) HOSTNAME : \\b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(?:\\.?|\\b) HOST : %{HOSTNAME} IPORHOST : (?:%{IP}|%{HOSTNAME}) HOSTPORT : %{IPORHOST}:%{POSINT} PATH : (?:%{UNIXPATH}|%{WINPATH}) UNIXPATH : (?:/[\\w_%!$@:.,-]?/?)(?:\\S+)? TTY : (?:/dev/(?:pts|tty(?:[pq])?)(?:\\w+)?/?(?:[0-9]+)) WINPATH : (?:[A-Za-z]:|\\\\)(?:\\\\[^\\\\?*]*)+ URIPROTO : [A-Za-z]+(?:\\+[A-Za-z+]+)? URIHOST : %{IPORHOST}(?::%{POSINT:port})? URIPATH : (?:/[A-Za-z0-9$.+!*'(){},~:;=@#%_\\-]*)+ URIPARAM : \\?[A-Za-z0-9$.+!*'|(){},~@#%&/=:;_?\\-\\[\\]<>]* URIPATHPARAM : %{URIPATH}(?:%{URIPARAM})? URI : %{URIPROTO}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST})?(?:%{URIPATHPARAM})? MONTH : \\b(?:Jan(?:uary|uar)?|Feb(?:ruary|ruar)?|M(?:a|\u00e4)?r(?:ch|z)?|Apr(?:il)?|Ma(?:y|i)?|Jun(?:e|i)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|O(?:c|k)?t(?:ober)?|Nov(?:ember)?|De(?:c|z)(?:ember)?)\\b MONTHNUM : (?:0?[1-9]|1[0-2]) MONTHNUM2 : (?:0[1-9]|1[0-2]) MONTHDAY : (?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) DAY : (?:Mon(?:day)?|Tue(?:sday)?|Wed(?:nesday)?|Thu(?:rsday)?|Fri(?:day)?|Sat(?:urday)?|Sun(?:day)?) YEAR : (\\d\\d){1,2} HOUR : (?:2[0123]|[01]?[0-9]) MINUTE : (?:[0-5][0-9]) SECOND : (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?) TIME : (?:[^0-9]?)%{HOUR}:%{MINUTE}(?::%{SECOND})(?:[^0-9]?) DATE_US : %{MONTHNUM}[/-]%{MONTHDAY}[/-]%{YEAR} DATE_EU : %{MONTHDAY}[./-]%{MONTHNUM}[./-]%{YEAR} ISO8601_TIMEZONE : (?:Z|[+-]%{HOUR}(?::?%{MINUTE})) ISO8601_SECOND : (?:%{SECOND}|60) TIMESTAMP_ISO8601 : %{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}? DATE : %{DATE_US}|%{DATE_EU} DATESTAMP : %{DATE}[- ]%{TIME} TZ : (?:[PMCE][SD]T|UTC) DATESTAMP_RFC822 : %{DAY} %{MONTH} %{MONTHDAY} %{YEAR} %{TIME} %{TZ} DATESTAMP_RFC2822 : %{DAY}, %{MONTHDAY} %{MONTH} %{YEAR} %{TIME} %{ISO8601_TIMEZONE} DATESTAMP_OTHER : %{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{TZ} %{YEAR} DATESTAMP_EVENTLOG : %{YEAR}%{MONTHNUM2}%{MONTHDAY}%{HOUR}%{MINUTE}%{SECOND} HTTPDERROR_DATE : %{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} SYSLOGTIMESTAMP : %{MONTH} +%{MONTHDAY} %{TIME} PROG : [\\x21-\\x5a\\x5c\\x5e-\\x7e]+ SYSLOGPROG : %{PROG:program}(?:\\[%{POSINT:pid}\\])? SYSLOGHOST : %{IPORHOST} SYSLOGFACILITY : <%{NONNEGINT:facility}.%{NONNEGINT:priority}> HTTPDATE : %{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME} %{INT} QS : %{QUOTEDSTRING} SYSLOGBASE : %{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: COMMONAPACHELOG : %{IPORHOST:clientip} %{HTTPDUSER:ident} %{USER:auth} \\[%{HTTPDATE:timestamp}\\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) COMBINEDAPACHELOG : %{COMMONAPACHELOG} %{QS:referrer} %{QS:agent} HTTPD20_ERRORLOG : \\[%{HTTPDERROR_DATE:timestamp}\\] \\[%{LOGLEVEL:loglevel}\\] (?:\\[client %{IPORHOST:clientip}\\] ){0,1}%{GREEDYDATA:errormsg} HTTPD24_ERRORLOG : \\[%{HTTPDERROR_DATE:timestamp}\\] \\[%{WORD:module}:%{LOGLEVEL:loglevel}\\] \\[pid %{POSINT:pid}:tid %{NUMBER:tid}\\]( \\(%{POSINT:proxy_errorcode}\\)%{DATA:proxy_errormessage}:)?( \\[client %{IPORHOST:client}:%{POSINT:clientport}\\])? %{DATA:errorcode}: %{GREEDYDATA:message} HTTPD_ERRORLOG : %{HTTPD20_ERRORLOG}|%{HTTPD24_ERRORLOG} LOGLEVEL : (?:[Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?) COMMONENVOYACCESSLOG : \\[%{TIMESTAMP_ISO8601:timestamp}\\] \\\"%{DATA:method} (?:%{URIPATH:uri_path}(?:%{URIPARAM:uri_param})?|%{DATA:}) %{DATA:protocol}\\\" %{NUMBER:status_code} %{DATA:response_flags} %{NUMBER:bytes_received} %{NUMBER:bytes_sent} %{NUMBER:duration} (?:%{NUMBER:upstream_service_time}|%{DATA:tcp_service_time}) \\\"%{DATA:forwarded_for}\\\" \\\"%{DATA:user_agent}\\\" \\\"%{DATA:request_id}\\\" \\\"%{DATA:authority}\\\" \\\"%{DATA:upstream_service}\\\"","title":"\u5185\u7f6e\u7684 Pattern \u5217\u8868"},{"location":"references/pipeline/","text":"Pipeline Processor Language The following is the definition of Pipeline processor language. Being supported by increasing syntax, the document would be adjusted to varying degrees. Identifiers and Keywords Identifiers Identifiers, used to identify objects, can be used to represent a variable and function. Identifiers contain keywords. Customized identifiers cannot duplicate keywords of Pipeline data processor language. Identifiers consist of numbers ( 0-9 ), letters ( A-Z a-z ) and underscores ( _ ), but the first character cannot be a number and case sensitive: _abc abc abc1 abc_1_ If you need to start with a letter or use the above characters in the identifier, you need to use reverse quotation marks: `1abc` `@some-variable` `an emoticon variable\ud83d\udc4d` Special Identifiers The special identifier\uff08 _ \uff09represents the external raw input data when the ppl script is triggered, and this parameter may be implicitly passed to some functions. In some functions, _ is treated as an alias for message for forward compatibility. Keywords Keywords have special meanings, such as if , elif , else , for , in , break and continue . Notes With # as a line comment character, inline comment is not supported. # this is a line comment a = 1 # this is a line comment \"\"\" This is a (multi-line) string instead of a comment \"\"\" a = 2 \"alphabetic string\" a = 3 Built-in Data Type In the Pipeline data processor language, the type of the value of a variable can change dynamically. But each value has its data type, which can be one of the primitive types or a compound types . Basic Types Integer Type Integers have a type length of 64bits with symbols. Currently, it is only supported to write integer literals in decimal form, such as -1 , 0 , 1 , +19 . Float Type Float types are 64bit long with symbols, and currently only support writing floating numeric quantities in decimal form, such as -1.00001 , 0.0 , 1.0 , +19.0 . Boolean Type Literals in boolean types only include true \u548c false . String Type String literals can be written in double or single quotation marks, and multi-line strings can be written in triple double or triple quotation marks. \"hello world\" 'hello world' \"\"\"hello world\"\"\" ''' hello world ''' Nil Type Nil is a special data type that means no value. The literal of this type is nil , When a variable is used without assignment, its value is nil. Compound Type Map type and list type are different from the base type. Multiple variables can point to the same map or list object. When assigning values, they do not make a memory copy of list or map but refer to it. Map Type Map type is key-value structure, only string type can be used as key, and the data type of value is not limited. It can read and write elements in the map through index expressions. a = { \"1\": [1, \"2\", 3, nil], \"2\": 1.1, \"abc\": nil, \"def\": true } # as a[\"1\"] is the object of list\uff0cb just refers to the value of a[\"1\"]. b = a[\"1\"] \"\"\" \u6b64\u65f6 a[\"1\"][0] == 1.1 \"\"\" b[0] = 1.1 List Type The list type can store any number and any type of value in the list. It can read and write elements in the list through index expressions. a = [1, \"2\", 3.0, false, nil, {\"a\": 1}] a = a[0] # a == 1 Operator The followings are the operators currently supported by PPL. The higher the value, the higher the priority. Priority Symbol Combinability Description 1 = Right Assignment; Named parameter; the lowest priority 2 \\|\\| Left or 3 && Left and 4 >= Left greater than or equal 4 > Left greater than 4 != Left not equal 4 == Left equal 4 <= Left less than or equal 4 < Left less than 5 + Left plus 5 - Left subtract 6 * Left multiply 6 / Left divide 6 % Left remainder 7 [] Left Use the list subscript or the key value of map 7 () None Operator priority can be changed; function call Expression PPL uses the symbol comma , as the expression separator, such as the separation of expressions when passing parameters to invoke expressions and initializing maps and lists. Call Expression The following is a function call to take the number of elements in the list: len([1, 3, \"5\"]) Binary Expression An assignment expression belongs to a binary expression with a return value. # 0 2 / 5 # 0.4\uff0craise the type of left operand to float number during calculation 2 / 5.0 # true 1 + 2 * 3 == 7 && 1 <= 2 # b == 3; # as `=` right associativity of operators, a = (b = 3), a == 3 a = b = 3 List Initialization Expression [1, true, \"1\", nil] Map Initialization Expression { \"a\": 1, \"b\": \"2\", } Parenthesized Expression Parenthesized expressions can change the precedence of operands in binary expressions, but they cannot change the combinability. # 1 + 2 * 3 == 7 (1 + 2) * 3 # == 9 Statement All expressions in the PPL can be treated as value statements when expressions are ended by list seperators ; or \\n , it would be treated as one statement, such as the following script content containing four statements. len(\"abc\") 1 a = 2; a + 2 * 3 % 2 Value Statement (Expression Statement) An expression can be treated as a value statement when it is followed by a statement separator. Here are four legal statements. a = 1; b = 2; d = [1, 2] len(d) Select Statement PPL supports the syntax of if/elif/else . if condition { } if condition { } else { } if condition_1 { } elif condition_2 { } ... elif condition_n { } else { } Like most programming languages, enter the corresponding statement block according to whether the condition of if/elif holds or not, and enter the else branch if none holds. The current condition can be any expression as long as its value is one of the built-in data types. Here are the criteria: When the condition is int type value, if it is 0 the condition is false , otherwise true When the condition is float type value, if it is 0.0 the condition is false , otherwise true When the condition is string type value, it is an empty string \"\" the condition is false , otherwise true When the condition is bool type value, the condition is the current value When the condition is nil type value, the condition is false When the condition is map type value, the length is 0, and the condition is false , otherwise true When the condition is list type value, the length is 0, and the condition is false , otherwise true Loop Statement PPL supports the syntax of for and for in . The following are two statements that are only allowed in loop statement blocks: cotinue statement, no further statements are executed, and the next loop continues break statement, loop ends The use of for statement can cause an infinite loop and should be used with caution, or use the statement for in instead when possible. for init-expr; condition; loop-expr { } for varb_name in map_value/list_value/string_value { } Examples: Use for to run 10 loops. for a = 0; a < 10; a = a + 1 { } Using for in traverses all elements of a list. b = \"2\" for a in [\"1\", \"a\" ,\"2\"] { b = b + a if b == \"21a\" { break } } # b == \"21a\" Using for in traverses all the keys of the map. d = 0 map_a = {\"a\": 1, \"b\":2} for x in map_a { d = d + map_a[x] } Using for in traverses all characters of string. s = \"\" for c in \"abcdef\" { if s == \"abc\" { break } else { continue } s = s + \"a\" } # s == \"abc\"","title":"Pipeline Processor Language"},{"location":"references/pipeline/#pipeline-processor-language","text":"The following is the definition of Pipeline processor language. Being supported by increasing syntax, the document would be adjusted to varying degrees.","title":"Pipeline Processor Language"},{"location":"references/pipeline/#identifiers-and-keywords","text":"","title":"Identifiers and Keywords"},{"location":"references/pipeline/#identifiers","text":"Identifiers, used to identify objects, can be used to represent a variable and function. Identifiers contain keywords. Customized identifiers cannot duplicate keywords of Pipeline data processor language. Identifiers consist of numbers ( 0-9 ), letters ( A-Z a-z ) and underscores ( _ ), but the first character cannot be a number and case sensitive: _abc abc abc1 abc_1_ If you need to start with a letter or use the above characters in the identifier, you need to use reverse quotation marks: `1abc` `@some-variable` `an emoticon variable\ud83d\udc4d`","title":"Identifiers"},{"location":"references/pipeline/#special-identifiers","text":"The special identifier\uff08 _ \uff09represents the external raw input data when the ppl script is triggered, and this parameter may be implicitly passed to some functions. In some functions, _ is treated as an alias for message for forward compatibility.","title":"Special Identifiers"},{"location":"references/pipeline/#keywords","text":"Keywords have special meanings, such as if , elif , else , for , in , break and continue .","title":"Keywords"},{"location":"references/pipeline/#notes","text":"With # as a line comment character, inline comment is not supported. # this is a line comment a = 1 # this is a line comment \"\"\" This is a (multi-line) string instead of a comment \"\"\" a = 2 \"alphabetic string\" a = 3","title":"Notes"},{"location":"references/pipeline/#built-in-data-type","text":"In the Pipeline data processor language, the type of the value of a variable can change dynamically. But each value has its data type, which can be one of the primitive types or a compound types .","title":"Built-in Data Type"},{"location":"references/pipeline/#basic-types","text":"","title":"Basic Types"},{"location":"references/pipeline/#integer-type","text":"Integers have a type length of 64bits with symbols. Currently, it is only supported to write integer literals in decimal form, such as -1 , 0 , 1 , +19 .","title":"Integer Type"},{"location":"references/pipeline/#float-type","text":"Float types are 64bit long with symbols, and currently only support writing floating numeric quantities in decimal form, such as -1.00001 , 0.0 , 1.0 , +19.0 .","title":"Float Type"},{"location":"references/pipeline/#boolean-type","text":"Literals in boolean types only include true \u548c false .","title":"Boolean Type"},{"location":"references/pipeline/#string-type","text":"String literals can be written in double or single quotation marks, and multi-line strings can be written in triple double or triple quotation marks. \"hello world\" 'hello world' \"\"\"hello world\"\"\" ''' hello world '''","title":"String Type"},{"location":"references/pipeline/#nil-type","text":"Nil is a special data type that means no value. The literal of this type is nil , When a variable is used without assignment, its value is nil.","title":"Nil Type"},{"location":"references/pipeline/#compound-type","text":"Map type and list type are different from the base type. Multiple variables can point to the same map or list object. When assigning values, they do not make a memory copy of list or map but refer to it.","title":"Compound Type"},{"location":"references/pipeline/#map-type","text":"Map type is key-value structure, only string type can be used as key, and the data type of value is not limited. It can read and write elements in the map through index expressions. a = { \"1\": [1, \"2\", 3, nil], \"2\": 1.1, \"abc\": nil, \"def\": true } # as a[\"1\"] is the object of list\uff0cb just refers to the value of a[\"1\"]. b = a[\"1\"] \"\"\" \u6b64\u65f6 a[\"1\"][0] == 1.1 \"\"\" b[0] = 1.1","title":"Map Type"},{"location":"references/pipeline/#list-type","text":"The list type can store any number and any type of value in the list. It can read and write elements in the list through index expressions. a = [1, \"2\", 3.0, false, nil, {\"a\": 1}] a = a[0] # a == 1","title":"List Type"},{"location":"references/pipeline/#operator","text":"The followings are the operators currently supported by PPL. The higher the value, the higher the priority. Priority Symbol Combinability Description 1 = Right Assignment; Named parameter; the lowest priority 2 \\|\\| Left or 3 && Left and 4 >= Left greater than or equal 4 > Left greater than 4 != Left not equal 4 == Left equal 4 <= Left less than or equal 4 < Left less than 5 + Left plus 5 - Left subtract 6 * Left multiply 6 / Left divide 6 % Left remainder 7 [] Left Use the list subscript or the key value of map 7 () None Operator priority can be changed; function call","title":"Operator"},{"location":"references/pipeline/#expression","text":"PPL uses the symbol comma , as the expression separator, such as the separation of expressions when passing parameters to invoke expressions and initializing maps and lists.","title":"Expression"},{"location":"references/pipeline/#call-expression","text":"The following is a function call to take the number of elements in the list: len([1, 3, \"5\"])","title":"Call Expression"},{"location":"references/pipeline/#binary-expression","text":"An assignment expression belongs to a binary expression with a return value. # 0 2 / 5 # 0.4\uff0craise the type of left operand to float number during calculation 2 / 5.0 # true 1 + 2 * 3 == 7 && 1 <= 2 # b == 3; # as `=` right associativity of operators, a = (b = 3), a == 3 a = b = 3","title":"Binary Expression"},{"location":"references/pipeline/#list-initialization-expression","text":"[1, true, \"1\", nil]","title":"List Initialization Expression"},{"location":"references/pipeline/#map-initialization-expression","text":"{ \"a\": 1, \"b\": \"2\", }","title":"Map Initialization Expression"},{"location":"references/pipeline/#parenthesized-expression","text":"Parenthesized expressions can change the precedence of operands in binary expressions, but they cannot change the combinability. # 1 + 2 * 3 == 7 (1 + 2) * 3 # == 9","title":"Parenthesized Expression"},{"location":"references/pipeline/#statement","text":"All expressions in the PPL can be treated as value statements when expressions are ended by list seperators ; or \\n , it would be treated as one statement, such as the following script content containing four statements. len(\"abc\") 1 a = 2; a + 2 * 3 % 2","title":"Statement"},{"location":"references/pipeline/#value-statement-expression-statement","text":"An expression can be treated as a value statement when it is followed by a statement separator. Here are four legal statements. a = 1; b = 2; d = [1, 2] len(d)","title":"Value Statement (Expression Statement)"},{"location":"references/pipeline/#select-statement","text":"PPL supports the syntax of if/elif/else . if condition { } if condition { } else { } if condition_1 { } elif condition_2 { } ... elif condition_n { } else { } Like most programming languages, enter the corresponding statement block according to whether the condition of if/elif holds or not, and enter the else branch if none holds. The current condition can be any expression as long as its value is one of the built-in data types. Here are the criteria: When the condition is int type value, if it is 0 the condition is false , otherwise true When the condition is float type value, if it is 0.0 the condition is false , otherwise true When the condition is string type value, it is an empty string \"\" the condition is false , otherwise true When the condition is bool type value, the condition is the current value When the condition is nil type value, the condition is false When the condition is map type value, the length is 0, and the condition is false , otherwise true When the condition is list type value, the length is 0, and the condition is false , otherwise true","title":"Select Statement"},{"location":"references/pipeline/#loop-statement","text":"PPL supports the syntax of for and for in . The following are two statements that are only allowed in loop statement blocks: cotinue statement, no further statements are executed, and the next loop continues break statement, loop ends The use of for statement can cause an infinite loop and should be used with caution, or use the statement for in instead when possible. for init-expr; condition; loop-expr { } for varb_name in map_value/list_value/string_value { } Examples: Use for to run 10 loops. for a = 0; a < 10; a = a + 1 { } Using for in traverses all elements of a list. b = \"2\" for a in [\"1\", \"a\" ,\"2\"] { b = b + a if b == \"21a\" { break } } # b == \"21a\" Using for in traverses all the keys of the map. d = 0 map_a = {\"a\": 1, \"b\":2} for x in map_a { d = d + map_a[x] } Using for in traverses all characters of string. s = \"\" for c in \"abcdef\" { if s == \"abc\" { break } else { continue } s = s + \"a\" } # s == \"abc\"","title":"Loop Statement"},{"location":"references/pipeline_zh/","text":"Pipeline \u5904\u7406\u5668\u8bed\u8a00 \u4ee5\u4e0b\u662f Pipeline \u5904\u7406\u5668\u8bed\u8a00\u5b9a\u4e49\u3002\u968f\u7740\u4e0d\u540c\u8bed\u6cd5\u7684\u9010\u6b65\u652f\u6301\uff0c\u8be5\u6587\u6863\u4f1a\u505a\u4e0d\u540c\u7a0b\u5ea6\u7684\u8c03\u6574\u548c\u589e\u5220\u3002 \u6807\u8bc6\u7b26\u4e0e\u5173\u952e\u5b57 \u6807\u8bc6\u7b26 \u6807\u8bc6\u7b26\u7528\u4e8e\u6807\u8bc6\u5bf9\u8c61\uff0c\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e2a\u53d8\u91cf\u3001\u51fd\u6570\u7b49\uff0c\u6807\u8bc6\u7b26\u5305\u542b\u5173\u952e\u5b57 \u81ea\u5b9a\u4e49\u7684\u6807\u8bc6\u7b26\u4e0d\u80fd\u4e0e Pipeline \u6570\u636e\u5904\u7406\u5668\u8bed\u8a00\u7684\u5173\u952e\u5b57\u91cd\u590d \u6807\u8bc6\u7b26\u53ef\u4ee5\u7531\u6570\u5b57( 0-9 )\u3001\u5b57\u6bcd( A-Z a-z )\u3001\u4e0b\u5212\u7ebf( _ ) \u6784\u6210\uff0c\u4f46\u9996\u5b57\u7b26\u4e0d\u80fd\u662f\u6570\u5b57\u4e14\u533a\u5206\u5927\u5c0f\u5199: _abc abc abc1 abc_1_ \u5982\u679c\u9700\u8981\u4ee5\u5b57\u6bcd\u5f00\u5934\u6216\u5728\u6807\u8bc6\u7b26\u4e2d\u4f7f\u7528\u4e0a\u8ff0\u5b57\u7b26\u5916\u9700\u8981\u4f7f\u7528\u53cd\u5f15\u53f7: `1abc` `@some-variable` `\u8fd9\u662f\u4e00\u4e2a\u8868\u60c5\u5305\u53d8\u91cf\ud83d\udc4d` \u7279\u6b8a\u6807\u8bc6\u7b26 \u7279\u6b8a\u6807\u8bc6\u7b26\uff08 _ \uff09\u8868\u793a ppl \u811a\u672c\u89e6\u53d1\u65f6\u7684\u5916\u90e8\u539f\u59cb\u8f93\u5165\u6570\u636e\uff0c\u8fd9\u4e00\u53c2\u6570\u53ef\u80fd\u9690\u5f0f\u4f20\u9012\u7ed9\u90e8\u5206\u51fd\u6570 \u5728\u90e8\u5206\u51fd\u6570\u4e2d\uff0c\u4e3a\u4fdd\u6301\u524d\u5411\u517c\u5bb9\uff0c _ \u5c06\u88ab\u89c6\u4e3a message \u7684\u522b\u540d\u3002 \u5173\u952e\u5b57 \u5173\u952e\u5b57\u662f\u5177\u6709\u7279\u6b8a\u610f\u4e49\u7684\u5355\u8bcd\uff0c\u5982 if , elif , else , for , in , break , continue \u7b49 \u6ce8\u91ca \u4ee5 # \u4e3a\u884c\u6ce8\u91ca\u5b57\u7b26\uff0c\u4e0d\u652f\u6301\u884c\u5185\u6ce8\u91ca # \u8fd9\u662f\u4e00\u884c\u6ce8\u91ca a = 1 # \u8fd9\u662f\u4e00\u884c\u6ce8\u91ca \"\"\" \u8fd9\u662f\u4e00\u4e2a\uff08\u591a\u884c\uff09\u5b57\u7b26\u4e32\uff0c\u66ff\u4ee3\u6ce8\u91ca \"\"\" a = 2 \"\u5b57\u7b26\u4e32\" a = 3 \u5185\u7f6e\u6570\u636e\u7c7b\u578b \u5728 Pipeline \u6570\u636e\u5904\u7406\u5668\u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u7684\u503c\u7684\u7c7b\u578b\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\uff0c\u4f46\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u5176\u6570\u636e\u7c7b\u578b\uff0c\u5176\u53ef\u4ee5\u662f \u57fa\u672c\u7c7b\u578b \u7684\u5176\u4e2d\u4e00\u79cd\uff0c\u4e5f\u53ef\u4ee5\u662f \u590d\u5408\u7c7b\u578b \u57fa\u672c\u7c7b\u578b \u6574\u6570(int)\u7c7b\u578b \u6574\u578b\u7684\u7c7b\u578b\u957f\u5ea6\u4e3a 64bit\uff0c\u6709\u7b26\u53f7\uff0c\u5f53\u524d\u4ec5\u652f\u6301\u4ee5\u5341\u8fdb\u5236\u7684\u65b9\u5f0f\u7f16\u5199\u6574\u6570\u5b57\u9762\u91cf,\u5982 -1 , 0 , 1 , +19 \u6d6e\u70b9(float)\u7c7b\u578b \u6d6e\u70b9\u578b\u7684\u7c7b\u578b\u957f\u5ea6\u4e3a 64bit\uff0c\u6709\u7b26\u53f7\uff0c\u5f53\u524d\u4ec5\u652f\u6301\u4ee5\u5341\u8fdb\u5236\u7684\u65b9\u5f0f\u7f16\u5199\u6d6e\u70b9\u6570\u5b57\u9762\u91cf,\u5982 -1.00001 , 0.0 , 1.0 , +19.0 \u5e03\u5c14(bool)\u7c7b\u578b \u5e03\u5c14\u7c7b\u578b\u5b57\u9762\u91cf\u4ec5\u6709 true \u548c false \u4e24\u79cd \u5b57\u7b26(str)\u4e32\u7c7b\u578b \u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u53ef\u7528\u53cc\u5f15\u53f7\u6216\u5355\u5f15\u53f7\uff0c\u591a\u884c\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f7f\u7528\u4e09\u53cc\u5f15\u53f7\u6216\u4e09\u5355\u5f15\u53f7\u5c06\u5185\u5bb9\u62ec\u8d77\u6765\u8fdb\u884c\u7f16\u5199 \"hello world\" 'hello world' \"\"\"hello world\"\"\" ''' hello world ''' Nil \u7c7b\u578b nil \u4e3a\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8868\u793a\u65e0\u503c\uff0c\u8be5\u7c7b\u578b\u5b57\u9762\u91cf\u4e3a nil \uff0c\u5f53\u4e00\u4e2a\u53d8\u91cf\u672a\u8d4b\u503c\u5c31\u4f7f\u7528\u65f6\uff0c\u5176\u503c\u4e3a nil \u590d\u5408\u7c7b\u578b map \u7c7b\u578b\u4e0e list \u7c7b\u578b\u4e0e\u57fa\u672c\u7c7b\u578b\u4e0d\u540c\uff0c\u591a\u4e2a\u53d8\u91cf\u53ef\u4ee5\u6307\u5411\u540c\u4e00\u4e2a map \u6216 list \u5bf9\u8c61\uff0c\u5728\u8d4b\u503c\u65f6\u5e76\u4e0d\u4f1a\u8fdb\u884c list \u6216 map \u7684\u5185\u5b58\u62f7\u8d1d\uff0c\u800c\u662f\u8fdb\u884c\u5f15\u7528 Map \u7c7b\u578b map \u7c7b\u578b\u4e3a key-value \u7ed3\u6784\uff0c\u53ea\u6709\u5b57\u7b26\u4e32\u7c7b\u578b\u624d\u80fd\u4f5c\u4e3a key\uff0c\u4e0d\u9650\u5236 value \u7684\u6570\u636e\u7c7b\u578b \u5176\u53ef\u901a\u8fc7\u7d22\u5f15\u8868\u8fbe\u5f0f\u8bfb\u5199 map \u4e2d\u7684\u5143\u7d20 a = { \"1\": [1, \"2\", 3, nil], \"2\": 1.1, \"abc\": nil, \"def\": true } # \u7531\u4e8e a[\"1\"] \u662f list \u5bf9\u8c61\uff0c\u6b64\u65f6 b \u53ea\u662f\u5f15\u7528\u4e86 a[\"1\"] \u7684\u503c b = a[\"1\"] \"\"\" \u6b64\u65f6 a[\"1\"][0] == 1.1 \"\"\" b[0] = 1.1 List \u7c7b\u578b list \u7c7b\u578b\u53ef\u4ee5\u5728 list \u4e2d\u5b58\u50a8\u4efb\u610f\u6570\u91cf\u3001\u4efb\u610f\u7c7b\u578b\u7684\u503c \u5176\u53ef\u901a\u8fc7\u7d22\u5f15\u8868\u8fbe\u5f0f\u8bfb\u5199 list \u4e2d\u7684\u5143\u7d20 a = [1, \"2\", 3.0, false, nil, {\"a\": 1}] a = a[0] # a == 1 \u8fd0\u7b97\u7b26 \u4ee5\u4e0b\u4e3a PPL \u5f53\u524d\u652f\u6301\u7684\u8fd0\u7b97\u7b26\uff0c\u6570\u503c\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8 \u4f18\u5148\u7ea7 \u7b26\u53f7 \u7ed3\u5408\u6027 \u63cf\u8ff0 1 = \u53f3 \u8d4b\u503c\uff1b\u547d\u540d\u53c2\u6570\uff1b\u4f18\u5148\u7ea7\u6700\u4f4e 2 \\|\\| \u5de6 \u903b\u8f91\"\u6216\" 3 && \u5de6 \u903b\u8f91\"\u4e0e\" 4 >= \u5de6 \u6761\u4ef6\"\u5927\u4e8e\u7b49\u4e8e\" 4 > \u5de6 \u6761\u4ef6\"\u5927\u4e8e\" 4 != \u5de6 \u6761\u4ef6\"\u4e0d\u7b49\u4e8e\" 4 == \u5de6 \u6761\u4ef6\"\u7b49\u4e8e\" 4 <= \u5de6 \u6761\u4ef6\"\u5c0f\u4e8e\u7b49\u4e8e\" 4 < \u5de6 \u6761\u4ef6\"\u5c0f\u4e8e\" 5 + \u5de6 \u7b97\u672f\"\u52a0\" 5 - \u5de6 \u7b97\u672f\"\u51cf\" 6 * \u5de6 \u7b97\u672f\"\u4e58\" 6 / \u5de6 \u7b97\u672f\"\u9664\" 6 % \u5de6 \u7b97\u672f\"\u53d6\u4f59\u6570\" 7 [] \u5de6 \u4f7f\u7528 list \u4e0b\u6807\u6216 map \u7684\u952e\u53d6\u503c 7 () \u65e0 \u53ef\u6539\u53d8\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\uff1b\u51fd\u6570\u8c03\u7528 \u8868\u8fbe\u5f0f PPL \u4f7f\u7528\u7b26\u53f7\u9017\u53f7 , \u4f5c\u4e3a\u8868\u8fbe\u5f0f\u5206\u9694\u7b26\u53f7\uff0c\u5982\u7528\u4e8e\u8c03\u7528\u8868\u8fbe\u5f0f\u7684\u53c2\u6570\u4f20\u9012\u548c map\u3001list \u7684\u521d\u59cb\u5316\u65f6\u7684\u8868\u8fbe\u5f0f\u7684\u5206\u9694 \u8c03\u7528\u8868\u8fbe\u5f0f \u4ee5\u4e0b\u4e3a\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff0c\u7528\u4e8e\u53d6\u5217\u8868\u5143\u7d20\u4e2a\u6570\uff1a len([1, 3, \"5\"]) \u4e8c\u5143\u8868\u8fbe\u5f0f \u8d4b\u503c\u8868\u8fbe\u5f0f\u5c5e\u4e8e\u4e8c\u5143\u8868\u8fbe\u5f0f\uff0c\u5176\u6709\u8fd4\u56de\u503c # 0 2 / 5 # 0.4\uff0c\u8ba1\u7b97\u65f6\u5c06\u5de6\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\u63d0\u5347\u81f3\u6d6e\u70b9\u6570 2 / 5.0 # true 1 + 2 * 3 == 7 && 1 <= 2 # b == 3; # \u7531\u4e8e `=` \u8fd0\u7b97\u7b26\u7684\u53f3\u7ed3\u5408\u6027, a = (b = 3), a == 3 a = b = 3 List \u521d\u59cb\u5316\u8868\u8fbe\u5f0f [1, true, \"1\", nil] Map \u521d\u59cb\u5316\u8868\u8fbe\u5f0f { \"a\": 1, \"b\": \"2\", } \u62ec\u53f7\u8868\u8fbe\u5f0f \u62ec\u53f7\u8868\u8fbe\u5f0f\u53ef\u4ee5\u6539\u53d8\u4e8c\u5143\u8868\u8fbe\u5f0f\u4e2d\u7684\u64cd\u4f5c\u6570\u8fd0\u7b97\u4f18\u5148\u7ea7\uff0c\u4f46\u4e0d\u80fd\u6539\u53d8\u7ed3\u5408\u6027 # 1 + 2 * 3 == 7 (1 + 2) * 3 # == 9 \u8bed\u53e5 PPL \u6240\u6709\u7684\u8868\u8fbe\u5f0f\u53ef\u4ee5\u89c6\u4e3a\u503c\u8bed\u53e5\uff0c\u5f53\u8868\u8fbe\u5f0f\u4ee5\u8bed\u53e5\u5206\u9694\u7b26\u53f7 ; \u6216 \\n \u7ed3\u675f\u65f6\uff0c\u5176\u5c06\u88ab\u89c6\u4e3a\u4e00\u4e2a\u8bed\u53e5\uff0c\u5982\u4ee5\u4e0b\u811a\u672c\u5185\u5bb9\u5305\u542b\u56db\u4e2a\u8bed\u53e5 len(\"abc\") 1 a = 2; a + 2 * 3 % 2 \u503c\u8bed\u53e5\uff08\u8868\u8fbe\u5f0f\u8bed\u53e5\uff09 \u8868\u8fbe\u5f0f\u540e\u9762\u8ddf\u8bed\u53e5\u5206\u9694\u7b26\u53f7\u65f6\u53ef\u89c6\u4e3a\u503c\u8bed\u53e5\uff0c\u4ee5\u4e0b\u4e3a\u56db\u4e2a\u5408\u6cd5\u7684\u8bed\u53e5 a = 1; b = 2; d = [1, 2] len(d) \u9009\u62e9\u8bed\u53e5 PPL \u652f\u6301 if/elif/else \u8bed\u6cd5: if condition { } if condition { } else { } if condition_1 { } elif condition_2 { } ... elif condition_n { } else { } \u4e0e\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u76f8\u540c\uff0c\u6839\u636e if/elif \u7684\u6761\u4ef6\u662f\u5426\u6210\u7acb\uff0c\u8fdb\u5165\u5bf9\u5e94\u7684\u8bed\u53e5\u5757\u4e2d\uff0c\u82e5\u90fd\u4e0d\u6210\u7acb\u5219\u8fdb\u5165 else \u5206\u652f\u3002 \u5f53\u524d condition \u53ef\u4ee5\u662f\u4efb\u610f\u8868\u8fbe\u5f0f\uff0c\u53ea\u8981\u5176\u503c\u4e3a\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u4e4b\u4e00\uff0c\u4ee5\u4e0b\u4e3a\u5224\u5b9a\u6761\u4ef6\uff1a \u5f53\u6761\u4ef6\u4e3a int \u7c7b\u578b\u503c\u65f6\uff0c\u5176\u4e3a 0 \u5219\u6761\u4ef6\u4e3a false \uff0c\u5426\u5219\u4e3a true \u5f53\u6761\u4ef6\u4e3a float \u7c7b\u578b\u503c\u65f6\uff0c\u5176\u4e3a 0.0 \u5219\u6761\u4ef6\u4e3a false \uff0c\u5426\u5219\u4e3a true \u5f53\u6761\u4ef6\u4e3a string \u7c7b\u578b\u503c\u65f6\uff0c\u5176\u4e3a\u7a7a\u5b57\u7b26\u4e32 \"\" \u5219\u6761\u4ef6\u4e3a false \uff0c\u5426\u5219\u4e3a true \u5f53\u6761\u4ef6\u4e3a bool \u7c7b\u578b\u503c\u65f6\uff0c\u6761\u4ef6\u4e3a\u5f53\u524d\u503c \u5f53\u6761\u4ef6\u4e3a nil \u7c7b\u578b\u503c\u65f6\uff0c\u6761\u4ef6\u4e3a false \u5f53\u6761\u4ef6\u4e3a map \u7c7b\u578b\u503c\u65f6\uff0c\u5176\u957f\u5ea6\u4e3a 0 \u5219\u6761\u4ef6\u4e3a false \uff0c\u5426\u5219\u4e3a true \u5f53\u6761\u4ef6\u4e3a list \u7c7b\u578b\u503c\u65f6\uff0c\u5176\u957f\u5ea6\u4e3a 0 \u5219\u6761\u4ef6\u4e3a false \uff0c\u5426\u5219\u4e3a true \u5faa\u73af\u8bed\u53e5 PPL \u652f\u6301 for \u8bed\u53e5\u548c for in \u8bed\u53e5 \u4ee5\u4e0b\u4e3a\u4e24\u4e2a\u53ea\u5141\u8bb8\u5728\u5faa\u73af\u8bed\u53e5\u5757\u4e2d\u4f7f\u7528\u7684\u8bed\u53e5\uff1a cotinue \u8bed\u53e5\uff0c\u4e0d\u518d\u6267\u884c\u540e\u7eed\u8bed\u53e5\uff0c\u7ee7\u7eed\u5f00\u59cb\u4e0b\u4e00\u6b21\u5faa\u73af break \u8bed\u53e5\uff0c\u7ed3\u675f\u5faa\u73af \u4f7f\u7528 for \u8bed\u53e5\u65f6\u53ef\u80fd\u9020\u6210\u65e0\u9650\u5faa\u73af\uff0c\u5e94\u8c28\u614e\u4f7f\u7528\uff0c\u6216\u5c3d\u53ef\u80fd\u4f7f\u7528 for in \u8bed\u53e5\u66ff\u4ee3 for init-expr; condition; loop-expr { } for varb_name in map_value/list_value/string_value { } \u4f7f\u7528\u793a\u4f8b\uff1a \u4f7f\u7528 for \u6267\u884c 10 \u6b21\u5faa\u73af for a = 0; a < 10; a = a + 1 { } \u4f7f\u7528 for in \u904d\u5386 list \u7684\u6240\u6709\u5143\u7d20 b = \"2\" for a in [\"1\", \"a\" ,\"2\"] { b = b + a if b == \"21a\" { break } } # b == \"21a\" \u4f7f\u7528 for in \u904d\u5386 map \u7684\u6240\u6709\u952e d = 0 map_a = {\"a\": 1, \"b\":2} for x in map_a { d = d + map_a[x] } \u4f7f\u7528 for in \u904d\u5386 string \u7684\u6240\u6709\u5b57\u7b26 s = \"\" for c in \"abcdef\" { if s == \"abc\" { break } else { continue } s = s + \"a\" } # s == \"abc\"","title":"Pipeline \u5904\u7406\u5668\u8bed\u8a00"},{"location":"references/pipeline_zh/#pipeline","text":"\u4ee5\u4e0b\u662f Pipeline \u5904\u7406\u5668\u8bed\u8a00\u5b9a\u4e49\u3002\u968f\u7740\u4e0d\u540c\u8bed\u6cd5\u7684\u9010\u6b65\u652f\u6301\uff0c\u8be5\u6587\u6863\u4f1a\u505a\u4e0d\u540c\u7a0b\u5ea6\u7684\u8c03\u6574\u548c\u589e\u5220\u3002","title":"Pipeline \u5904\u7406\u5668\u8bed\u8a00"},{"location":"references/pipeline_zh/#_1","text":"","title":"\u6807\u8bc6\u7b26\u4e0e\u5173\u952e\u5b57"},{"location":"references/pipeline_zh/#_2","text":"\u6807\u8bc6\u7b26\u7528\u4e8e\u6807\u8bc6\u5bf9\u8c61\uff0c\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e2a\u53d8\u91cf\u3001\u51fd\u6570\u7b49\uff0c\u6807\u8bc6\u7b26\u5305\u542b\u5173\u952e\u5b57 \u81ea\u5b9a\u4e49\u7684\u6807\u8bc6\u7b26\u4e0d\u80fd\u4e0e Pipeline \u6570\u636e\u5904\u7406\u5668\u8bed\u8a00\u7684\u5173\u952e\u5b57\u91cd\u590d \u6807\u8bc6\u7b26\u53ef\u4ee5\u7531\u6570\u5b57( 0-9 )\u3001\u5b57\u6bcd( A-Z a-z )\u3001\u4e0b\u5212\u7ebf( _ ) \u6784\u6210\uff0c\u4f46\u9996\u5b57\u7b26\u4e0d\u80fd\u662f\u6570\u5b57\u4e14\u533a\u5206\u5927\u5c0f\u5199: _abc abc abc1 abc_1_ \u5982\u679c\u9700\u8981\u4ee5\u5b57\u6bcd\u5f00\u5934\u6216\u5728\u6807\u8bc6\u7b26\u4e2d\u4f7f\u7528\u4e0a\u8ff0\u5b57\u7b26\u5916\u9700\u8981\u4f7f\u7528\u53cd\u5f15\u53f7: `1abc` `@some-variable` `\u8fd9\u662f\u4e00\u4e2a\u8868\u60c5\u5305\u53d8\u91cf\ud83d\udc4d`","title":"\u6807\u8bc6\u7b26"},{"location":"references/pipeline_zh/#_3","text":"\u7279\u6b8a\u6807\u8bc6\u7b26\uff08 _ \uff09\u8868\u793a ppl \u811a\u672c\u89e6\u53d1\u65f6\u7684\u5916\u90e8\u539f\u59cb\u8f93\u5165\u6570\u636e\uff0c\u8fd9\u4e00\u53c2\u6570\u53ef\u80fd\u9690\u5f0f\u4f20\u9012\u7ed9\u90e8\u5206\u51fd\u6570 \u5728\u90e8\u5206\u51fd\u6570\u4e2d\uff0c\u4e3a\u4fdd\u6301\u524d\u5411\u517c\u5bb9\uff0c _ \u5c06\u88ab\u89c6\u4e3a message \u7684\u522b\u540d\u3002","title":"\u7279\u6b8a\u6807\u8bc6\u7b26"},{"location":"references/pipeline_zh/#_4","text":"\u5173\u952e\u5b57\u662f\u5177\u6709\u7279\u6b8a\u610f\u4e49\u7684\u5355\u8bcd\uff0c\u5982 if , elif , else , for , in , break , continue \u7b49","title":"\u5173\u952e\u5b57"},{"location":"references/pipeline_zh/#_5","text":"\u4ee5 # \u4e3a\u884c\u6ce8\u91ca\u5b57\u7b26\uff0c\u4e0d\u652f\u6301\u884c\u5185\u6ce8\u91ca # \u8fd9\u662f\u4e00\u884c\u6ce8\u91ca a = 1 # \u8fd9\u662f\u4e00\u884c\u6ce8\u91ca \"\"\" \u8fd9\u662f\u4e00\u4e2a\uff08\u591a\u884c\uff09\u5b57\u7b26\u4e32\uff0c\u66ff\u4ee3\u6ce8\u91ca \"\"\" a = 2 \"\u5b57\u7b26\u4e32\" a = 3","title":"\u6ce8\u91ca"},{"location":"references/pipeline_zh/#_6","text":"\u5728 Pipeline \u6570\u636e\u5904\u7406\u5668\u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u7684\u503c\u7684\u7c7b\u578b\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\uff0c\u4f46\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u5176\u6570\u636e\u7c7b\u578b\uff0c\u5176\u53ef\u4ee5\u662f \u57fa\u672c\u7c7b\u578b \u7684\u5176\u4e2d\u4e00\u79cd\uff0c\u4e5f\u53ef\u4ee5\u662f \u590d\u5408\u7c7b\u578b","title":"\u5185\u7f6e\u6570\u636e\u7c7b\u578b"},{"location":"references/pipeline_zh/#_7","text":"","title":"\u57fa\u672c\u7c7b\u578b"},{"location":"references/pipeline_zh/#int","text":"\u6574\u578b\u7684\u7c7b\u578b\u957f\u5ea6\u4e3a 64bit\uff0c\u6709\u7b26\u53f7\uff0c\u5f53\u524d\u4ec5\u652f\u6301\u4ee5\u5341\u8fdb\u5236\u7684\u65b9\u5f0f\u7f16\u5199\u6574\u6570\u5b57\u9762\u91cf,\u5982 -1 , 0 , 1 , +19","title":"\u6574\u6570(int)\u7c7b\u578b"},{"location":"references/pipeline_zh/#float","text":"\u6d6e\u70b9\u578b\u7684\u7c7b\u578b\u957f\u5ea6\u4e3a 64bit\uff0c\u6709\u7b26\u53f7\uff0c\u5f53\u524d\u4ec5\u652f\u6301\u4ee5\u5341\u8fdb\u5236\u7684\u65b9\u5f0f\u7f16\u5199\u6d6e\u70b9\u6570\u5b57\u9762\u91cf,\u5982 -1.00001 , 0.0 , 1.0 , +19.0","title":"\u6d6e\u70b9(float)\u7c7b\u578b"},{"location":"references/pipeline_zh/#bool","text":"\u5e03\u5c14\u7c7b\u578b\u5b57\u9762\u91cf\u4ec5\u6709 true \u548c false \u4e24\u79cd","title":"\u5e03\u5c14(bool)\u7c7b\u578b"},{"location":"references/pipeline_zh/#str","text":"\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u53ef\u7528\u53cc\u5f15\u53f7\u6216\u5355\u5f15\u53f7\uff0c\u591a\u884c\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f7f\u7528\u4e09\u53cc\u5f15\u53f7\u6216\u4e09\u5355\u5f15\u53f7\u5c06\u5185\u5bb9\u62ec\u8d77\u6765\u8fdb\u884c\u7f16\u5199 \"hello world\" 'hello world' \"\"\"hello world\"\"\" ''' hello world '''","title":"\u5b57\u7b26(str)\u4e32\u7c7b\u578b"},{"location":"references/pipeline_zh/#nil","text":"nil \u4e3a\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8868\u793a\u65e0\u503c\uff0c\u8be5\u7c7b\u578b\u5b57\u9762\u91cf\u4e3a nil \uff0c\u5f53\u4e00\u4e2a\u53d8\u91cf\u672a\u8d4b\u503c\u5c31\u4f7f\u7528\u65f6\uff0c\u5176\u503c\u4e3a nil","title":"Nil \u7c7b\u578b"},{"location":"references/pipeline_zh/#_8","text":"map \u7c7b\u578b\u4e0e list \u7c7b\u578b\u4e0e\u57fa\u672c\u7c7b\u578b\u4e0d\u540c\uff0c\u591a\u4e2a\u53d8\u91cf\u53ef\u4ee5\u6307\u5411\u540c\u4e00\u4e2a map \u6216 list \u5bf9\u8c61\uff0c\u5728\u8d4b\u503c\u65f6\u5e76\u4e0d\u4f1a\u8fdb\u884c list \u6216 map \u7684\u5185\u5b58\u62f7\u8d1d\uff0c\u800c\u662f\u8fdb\u884c\u5f15\u7528","title":"\u590d\u5408\u7c7b\u578b"},{"location":"references/pipeline_zh/#map","text":"map \u7c7b\u578b\u4e3a key-value \u7ed3\u6784\uff0c\u53ea\u6709\u5b57\u7b26\u4e32\u7c7b\u578b\u624d\u80fd\u4f5c\u4e3a key\uff0c\u4e0d\u9650\u5236 value \u7684\u6570\u636e\u7c7b\u578b \u5176\u53ef\u901a\u8fc7\u7d22\u5f15\u8868\u8fbe\u5f0f\u8bfb\u5199 map \u4e2d\u7684\u5143\u7d20 a = { \"1\": [1, \"2\", 3, nil], \"2\": 1.1, \"abc\": nil, \"def\": true } # \u7531\u4e8e a[\"1\"] \u662f list \u5bf9\u8c61\uff0c\u6b64\u65f6 b \u53ea\u662f\u5f15\u7528\u4e86 a[\"1\"] \u7684\u503c b = a[\"1\"] \"\"\" \u6b64\u65f6 a[\"1\"][0] == 1.1 \"\"\" b[0] = 1.1","title":"Map \u7c7b\u578b"},{"location":"references/pipeline_zh/#list","text":"list \u7c7b\u578b\u53ef\u4ee5\u5728 list \u4e2d\u5b58\u50a8\u4efb\u610f\u6570\u91cf\u3001\u4efb\u610f\u7c7b\u578b\u7684\u503c \u5176\u53ef\u901a\u8fc7\u7d22\u5f15\u8868\u8fbe\u5f0f\u8bfb\u5199 list \u4e2d\u7684\u5143\u7d20 a = [1, \"2\", 3.0, false, nil, {\"a\": 1}] a = a[0] # a == 1","title":"List \u7c7b\u578b"},{"location":"references/pipeline_zh/#_9","text":"\u4ee5\u4e0b\u4e3a PPL \u5f53\u524d\u652f\u6301\u7684\u8fd0\u7b97\u7b26\uff0c\u6570\u503c\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8 \u4f18\u5148\u7ea7 \u7b26\u53f7 \u7ed3\u5408\u6027 \u63cf\u8ff0 1 = \u53f3 \u8d4b\u503c\uff1b\u547d\u540d\u53c2\u6570\uff1b\u4f18\u5148\u7ea7\u6700\u4f4e 2 \\|\\| \u5de6 \u903b\u8f91\"\u6216\" 3 && \u5de6 \u903b\u8f91\"\u4e0e\" 4 >= \u5de6 \u6761\u4ef6\"\u5927\u4e8e\u7b49\u4e8e\" 4 > \u5de6 \u6761\u4ef6\"\u5927\u4e8e\" 4 != \u5de6 \u6761\u4ef6\"\u4e0d\u7b49\u4e8e\" 4 == \u5de6 \u6761\u4ef6\"\u7b49\u4e8e\" 4 <= \u5de6 \u6761\u4ef6\"\u5c0f\u4e8e\u7b49\u4e8e\" 4 < \u5de6 \u6761\u4ef6\"\u5c0f\u4e8e\" 5 + \u5de6 \u7b97\u672f\"\u52a0\" 5 - \u5de6 \u7b97\u672f\"\u51cf\" 6 * \u5de6 \u7b97\u672f\"\u4e58\" 6 / \u5de6 \u7b97\u672f\"\u9664\" 6 % \u5de6 \u7b97\u672f\"\u53d6\u4f59\u6570\" 7 [] \u5de6 \u4f7f\u7528 list \u4e0b\u6807\u6216 map \u7684\u952e\u53d6\u503c 7 () \u65e0 \u53ef\u6539\u53d8\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\uff1b\u51fd\u6570\u8c03\u7528","title":"\u8fd0\u7b97\u7b26"},{"location":"references/pipeline_zh/#_10","text":"PPL \u4f7f\u7528\u7b26\u53f7\u9017\u53f7 , \u4f5c\u4e3a\u8868\u8fbe\u5f0f\u5206\u9694\u7b26\u53f7\uff0c\u5982\u7528\u4e8e\u8c03\u7528\u8868\u8fbe\u5f0f\u7684\u53c2\u6570\u4f20\u9012\u548c map\u3001list \u7684\u521d\u59cb\u5316\u65f6\u7684\u8868\u8fbe\u5f0f\u7684\u5206\u9694","title":"\u8868\u8fbe\u5f0f"},{"location":"references/pipeline_zh/#_11","text":"\u4ee5\u4e0b\u4e3a\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff0c\u7528\u4e8e\u53d6\u5217\u8868\u5143\u7d20\u4e2a\u6570\uff1a len([1, 3, \"5\"])","title":"\u8c03\u7528\u8868\u8fbe\u5f0f"},{"location":"references/pipeline_zh/#_12","text":"\u8d4b\u503c\u8868\u8fbe\u5f0f\u5c5e\u4e8e\u4e8c\u5143\u8868\u8fbe\u5f0f\uff0c\u5176\u6709\u8fd4\u56de\u503c # 0 2 / 5 # 0.4\uff0c\u8ba1\u7b97\u65f6\u5c06\u5de6\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\u63d0\u5347\u81f3\u6d6e\u70b9\u6570 2 / 5.0 # true 1 + 2 * 3 == 7 && 1 <= 2 # b == 3; # \u7531\u4e8e `=` \u8fd0\u7b97\u7b26\u7684\u53f3\u7ed3\u5408\u6027, a = (b = 3), a == 3 a = b = 3","title":"\u4e8c\u5143\u8868\u8fbe\u5f0f"},{"location":"references/pipeline_zh/#list_1","text":"[1, true, \"1\", nil]","title":"List \u521d\u59cb\u5316\u8868\u8fbe\u5f0f"},{"location":"references/pipeline_zh/#map_1","text":"{ \"a\": 1, \"b\": \"2\", }","title":"Map \u521d\u59cb\u5316\u8868\u8fbe\u5f0f"},{"location":"references/pipeline_zh/#_13","text":"\u62ec\u53f7\u8868\u8fbe\u5f0f\u53ef\u4ee5\u6539\u53d8\u4e8c\u5143\u8868\u8fbe\u5f0f\u4e2d\u7684\u64cd\u4f5c\u6570\u8fd0\u7b97\u4f18\u5148\u7ea7\uff0c\u4f46\u4e0d\u80fd\u6539\u53d8\u7ed3\u5408\u6027 # 1 + 2 * 3 == 7 (1 + 2) * 3 # == 9","title":"\u62ec\u53f7\u8868\u8fbe\u5f0f"},{"location":"references/pipeline_zh/#_14","text":"PPL \u6240\u6709\u7684\u8868\u8fbe\u5f0f\u53ef\u4ee5\u89c6\u4e3a\u503c\u8bed\u53e5\uff0c\u5f53\u8868\u8fbe\u5f0f\u4ee5\u8bed\u53e5\u5206\u9694\u7b26\u53f7 ; \u6216 \\n \u7ed3\u675f\u65f6\uff0c\u5176\u5c06\u88ab\u89c6\u4e3a\u4e00\u4e2a\u8bed\u53e5\uff0c\u5982\u4ee5\u4e0b\u811a\u672c\u5185\u5bb9\u5305\u542b\u56db\u4e2a\u8bed\u53e5 len(\"abc\") 1 a = 2; a + 2 * 3 % 2","title":"\u8bed\u53e5"},{"location":"references/pipeline_zh/#_15","text":"\u8868\u8fbe\u5f0f\u540e\u9762\u8ddf\u8bed\u53e5\u5206\u9694\u7b26\u53f7\u65f6\u53ef\u89c6\u4e3a\u503c\u8bed\u53e5\uff0c\u4ee5\u4e0b\u4e3a\u56db\u4e2a\u5408\u6cd5\u7684\u8bed\u53e5 a = 1; b = 2; d = [1, 2] len(d)","title":"\u503c\u8bed\u53e5\uff08\u8868\u8fbe\u5f0f\u8bed\u53e5\uff09"},{"location":"references/pipeline_zh/#_16","text":"PPL \u652f\u6301 if/elif/else \u8bed\u6cd5: if condition { } if condition { } else { } if condition_1 { } elif condition_2 { } ... elif condition_n { } else { } \u4e0e\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u76f8\u540c\uff0c\u6839\u636e if/elif \u7684\u6761\u4ef6\u662f\u5426\u6210\u7acb\uff0c\u8fdb\u5165\u5bf9\u5e94\u7684\u8bed\u53e5\u5757\u4e2d\uff0c\u82e5\u90fd\u4e0d\u6210\u7acb\u5219\u8fdb\u5165 else \u5206\u652f\u3002 \u5f53\u524d condition \u53ef\u4ee5\u662f\u4efb\u610f\u8868\u8fbe\u5f0f\uff0c\u53ea\u8981\u5176\u503c\u4e3a\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u4e4b\u4e00\uff0c\u4ee5\u4e0b\u4e3a\u5224\u5b9a\u6761\u4ef6\uff1a \u5f53\u6761\u4ef6\u4e3a int \u7c7b\u578b\u503c\u65f6\uff0c\u5176\u4e3a 0 \u5219\u6761\u4ef6\u4e3a false \uff0c\u5426\u5219\u4e3a true \u5f53\u6761\u4ef6\u4e3a float \u7c7b\u578b\u503c\u65f6\uff0c\u5176\u4e3a 0.0 \u5219\u6761\u4ef6\u4e3a false \uff0c\u5426\u5219\u4e3a true \u5f53\u6761\u4ef6\u4e3a string \u7c7b\u578b\u503c\u65f6\uff0c\u5176\u4e3a\u7a7a\u5b57\u7b26\u4e32 \"\" \u5219\u6761\u4ef6\u4e3a false \uff0c\u5426\u5219\u4e3a true \u5f53\u6761\u4ef6\u4e3a bool \u7c7b\u578b\u503c\u65f6\uff0c\u6761\u4ef6\u4e3a\u5f53\u524d\u503c \u5f53\u6761\u4ef6\u4e3a nil \u7c7b\u578b\u503c\u65f6\uff0c\u6761\u4ef6\u4e3a false \u5f53\u6761\u4ef6\u4e3a map \u7c7b\u578b\u503c\u65f6\uff0c\u5176\u957f\u5ea6\u4e3a 0 \u5219\u6761\u4ef6\u4e3a false \uff0c\u5426\u5219\u4e3a true \u5f53\u6761\u4ef6\u4e3a list \u7c7b\u578b\u503c\u65f6\uff0c\u5176\u957f\u5ea6\u4e3a 0 \u5219\u6761\u4ef6\u4e3a false \uff0c\u5426\u5219\u4e3a true","title":"\u9009\u62e9\u8bed\u53e5"},{"location":"references/pipeline_zh/#_17","text":"PPL \u652f\u6301 for \u8bed\u53e5\u548c for in \u8bed\u53e5 \u4ee5\u4e0b\u4e3a\u4e24\u4e2a\u53ea\u5141\u8bb8\u5728\u5faa\u73af\u8bed\u53e5\u5757\u4e2d\u4f7f\u7528\u7684\u8bed\u53e5\uff1a cotinue \u8bed\u53e5\uff0c\u4e0d\u518d\u6267\u884c\u540e\u7eed\u8bed\u53e5\uff0c\u7ee7\u7eed\u5f00\u59cb\u4e0b\u4e00\u6b21\u5faa\u73af break \u8bed\u53e5\uff0c\u7ed3\u675f\u5faa\u73af \u4f7f\u7528 for \u8bed\u53e5\u65f6\u53ef\u80fd\u9020\u6210\u65e0\u9650\u5faa\u73af\uff0c\u5e94\u8c28\u614e\u4f7f\u7528\uff0c\u6216\u5c3d\u53ef\u80fd\u4f7f\u7528 for in \u8bed\u53e5\u66ff\u4ee3 for init-expr; condition; loop-expr { } for varb_name in map_value/list_value/string_value { } \u4f7f\u7528\u793a\u4f8b\uff1a \u4f7f\u7528 for \u6267\u884c 10 \u6b21\u5faa\u73af for a = 0; a < 10; a = a + 1 { } \u4f7f\u7528 for in \u904d\u5386 list \u7684\u6240\u6709\u5143\u7d20 b = \"2\" for a in [\"1\", \"a\" ,\"2\"] { b = b + a if b == \"21a\" { break } } # b == \"21a\" \u4f7f\u7528 for in \u904d\u5386 map \u7684\u6240\u6709\u952e d = 0 map_a = {\"a\": 1, \"b\":2} for x in map_a { d = d + map_a[x] } \u4f7f\u7528 for in \u904d\u5386 string \u7684\u6240\u6709\u5b57\u7b26 s = \"\" for c in \"abcdef\" { if s == \"abc\" { break } else { continue } s = s + \"a\" } # s == \"abc\"","title":"\u5faa\u73af\u8bed\u53e5"},{"location":"zh/","text":"\u6982\u8ff0 \u4ec0\u4e48\u662f PPL Guance Cloud PPL\uff08Pipeline Processor Language\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u6570\u636e\u5904\u7406\u7684\u9886\u57df\u7279\u5b9a\u8bed\u8a00\uff0c\u4e3b\u8981\u7528\u4e8e\u6587\u672c\u548c\u534a\u7ed3\u6784\u5316\u6570\u636e\u5904\u7406\u3002 PPL \u53ef\u5728\u8fb9\u7f18\u8282\u70b9\u8fdb\u884c\u5927\u89c4\u6a21\u6570\u636e\u89e3\u6790\u548c\u7279\u5f81\u63d0\u53d6\u3002 \u652f\u6301 Grok\u3001JSON \u548c XML \u7b49\u591a\u79cd\u63d0\u53d6\u65b9\u6cd5\u3002 PPL\u4f5c\u4e3a\u4e00\u79cd\u6570\u636e\u5904\u7406\u8bed\u8a00\uff0c\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u6587\u672c\u548c\u534a\u7ed3\u6784\u5316\u6570\u636e\u5904\u7406\u7684\u53ef\u7f16\u7a0b\u6027\u3002 \u5feb\u901f\u5f00\u59cb \u6784\u5efa PPL \u5de5\u5177 \u4f7f\u7528 go build \u6784\u5efa ppl \u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5e76\u5c06 ppl \u5de5\u5177\u62f7\u8d1d\u81f3 /usr/local/bin \u76ee\u5f55\u4e0b go build cmd/ppl/ppl.go sudo cp ppl /usr/local/bin PPL \u5de5\u5177\u4f7f\u7528\u65b9\u6cd5 \u7531\u4e8e ppl \u652f\u6301\u811a\u672c\u95f4\u7684\u5f15\u7528\uff0c\u6240\u4ee5\u9700\u8981\u6307\u5b9a\u5de5\u4f5c\u76ee\u5f55\uff0c\u9ed8\u8ba4\u4e3a\u542f\u52a8 ppl \u547d\u4ee4\u65f6\u7684\u76ee\u5f55\u4f5c\u4e3a\u5176\u5de5\u4f5c\u76ee\u5f55 \u5176\u4e2d -s \u53c2\u6570\u4e3a\u5fc5\u987b\u4f20\u5165\u7684\u53c2\u6570\uff0c\u5728\u672a\u6307\u5b9a\u8f93\u5165\u65f6\uff0c\u4ec5\u68c0\u67e5\u811a\u672c\u662f\u5426\u5408\u6cd5 ppl \u5de5\u5177\u652f\u6301\u7684\u8f93\u5165\u7684\u6570\u636e\u534f\u8bae: lineprotocol \u66f4\u591a\u5173\u4e8e\u884c\u534f\u8bae\u4fe1\u606f\u89c1\uff1a influxdb line-protocol text \u6587\u672c\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u65e5\u5fd7\uff0cjson \u7b49\uff0c\u5c06\u4f5c\u4e3a\u884c\u534f\u8bae field \u90e8\u5206\u7684 message \u5b57\u6bb5\u4f5c\u4e3a\u8f93\u5165 \u8f93\u51fa\u7684\u6570\u636e\u534f\u8bae: lineprotocol json \u884c\u534f\u8bae\u7684 json \u8868\u793a Usage: ppl run [flags] Flags: -h, --help help for run -i, --input string input data file path --output-type string result output type: json, lineprotocol (default \"json\") -s, --script string script name -t, --type string data source type: text, lineprotocol (default \"text\") -w, --workspace string ppl workspace directory (default \"/path/to/ppl-process-working-dir\") \u7f16\u5199\u7b2c\u4e00\u4e2a PPL \u811a\u672c \u5185\u7f6e\u51fd\u6570\u6587\u6863\uff1a pkg/engine/funcs/md grok \u6587\u6863\uff1a docs/grok.md \u521b\u5efa\u4e00\u4e2a nginx_access_log.data \uff0c\u5e76\u5199\u5165\u4ee5\u4e0b\u65e5\u5fd7\u5185\u5bb9\uff1a 207.46.13.28 - - [19/Oct/2022:02:25:59 +0000] \"GET / HTTP/2.0\" 200 5 \"-\" \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\" \u521b\u5efa\u4e00\u4e2a nginx_access_log.ppl \uff0c\u5e76\u5c06\u4ee5\u4e0b\u5185\u5bb9\u5199\u5165\u811a\u672c\u4e2d\uff1a # access log add_pattern(\"access_common\", \"%{NOTSPACE:client_ip} %{NOTSPACE:http_ident} %{NOTSPACE:http_auth} \\\\[%{HTTPDATE:time}\\\\] \\\"%{DATA:http_method} %{GREEDYDATA:http_url} HTTP/%{NUMBER:http_version}\\\" %{INT:status_code:int} %{INT:bytes:int}\") grok(_, '%{access_common} \"%{NOTSPACE:referrer}\" \"%{GREEDYDATA:agent}\"') user_agent(agent) group_between(status_code, [200,299], \"OK\", status) group_between(status_code, [300,399], \"notice\", status) group_between(status_code, [400,499], \"warning\", status) group_between(status_code, [500,599], \"error\", status) nullif(http_ident, \"-\") nullif(http_auth, \"-\") nullif(upstream, \"\") default_time(time) \u6267\u884c ppl \u5de5\u5177\uff1a ppl@GuanceCloud:~/go/src/github.com/GuanceCloud/ppl/scripts/test_nginx_access_log$ ppl run -s nginx_access_log.ppl -i nginx_access_log.data { \"fields\": { \"agent\": \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\", \"browser\": \"bingbot\", \"browserVer\": \"2.0\", \"bytes\": 5, \"client_ip\": \"207.46.13.28\", \"engine\": \"\", \"engineVer\": \"\", \"http_method\": \"GET\", \"http_url\": \"/\", \"http_version\": \"2.0\", \"isBot\": true, \"isMobile\": false, \"message\": \"207.46.13.28 - - [19/Oct/2022:02:25:59 +0000] \\\"GET / HTTP/2.0\\\" 200 5 \\\"-\\\" \\\"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\\\"\", \"os\": \"\", \"referrer\": \"-\", \"status\": \"OK\", \"status_code\": 200, \"ua\": \"\" }, \"measurement\": \"default_name\", \"tags\": {}, \"time\": \"2022-10-19T10:25:59+08:00\" } PPL \u8bed\u6cd5 \u8bed\u6cd5\u6587\u6863\u89c1 docs/pipeline.md","title":"\u6982\u8ff0"},{"location":"zh/#_1","text":"","title":"\u6982\u8ff0"},{"location":"zh/#ppl","text":"Guance Cloud PPL\uff08Pipeline Processor Language\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u6570\u636e\u5904\u7406\u7684\u9886\u57df\u7279\u5b9a\u8bed\u8a00\uff0c\u4e3b\u8981\u7528\u4e8e\u6587\u672c\u548c\u534a\u7ed3\u6784\u5316\u6570\u636e\u5904\u7406\u3002 PPL \u53ef\u5728\u8fb9\u7f18\u8282\u70b9\u8fdb\u884c\u5927\u89c4\u6a21\u6570\u636e\u89e3\u6790\u548c\u7279\u5f81\u63d0\u53d6\u3002 \u652f\u6301 Grok\u3001JSON \u548c XML \u7b49\u591a\u79cd\u63d0\u53d6\u65b9\u6cd5\u3002 PPL\u4f5c\u4e3a\u4e00\u79cd\u6570\u636e\u5904\u7406\u8bed\u8a00\uff0c\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u6587\u672c\u548c\u534a\u7ed3\u6784\u5316\u6570\u636e\u5904\u7406\u7684\u53ef\u7f16\u7a0b\u6027\u3002","title":"\u4ec0\u4e48\u662f PPL"},{"location":"zh/#_2","text":"","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"zh/#ppl_1","text":"\u4f7f\u7528 go build \u6784\u5efa ppl \u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5e76\u5c06 ppl \u5de5\u5177\u62f7\u8d1d\u81f3 /usr/local/bin \u76ee\u5f55\u4e0b go build cmd/ppl/ppl.go sudo cp ppl /usr/local/bin","title":"\u6784\u5efa PPL \u5de5\u5177"},{"location":"zh/#ppl_2","text":"\u7531\u4e8e ppl \u652f\u6301\u811a\u672c\u95f4\u7684\u5f15\u7528\uff0c\u6240\u4ee5\u9700\u8981\u6307\u5b9a\u5de5\u4f5c\u76ee\u5f55\uff0c\u9ed8\u8ba4\u4e3a\u542f\u52a8 ppl \u547d\u4ee4\u65f6\u7684\u76ee\u5f55\u4f5c\u4e3a\u5176\u5de5\u4f5c\u76ee\u5f55 \u5176\u4e2d -s \u53c2\u6570\u4e3a\u5fc5\u987b\u4f20\u5165\u7684\u53c2\u6570\uff0c\u5728\u672a\u6307\u5b9a\u8f93\u5165\u65f6\uff0c\u4ec5\u68c0\u67e5\u811a\u672c\u662f\u5426\u5408\u6cd5 ppl \u5de5\u5177\u652f\u6301\u7684\u8f93\u5165\u7684\u6570\u636e\u534f\u8bae: lineprotocol \u66f4\u591a\u5173\u4e8e\u884c\u534f\u8bae\u4fe1\u606f\u89c1\uff1a influxdb line-protocol text \u6587\u672c\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u65e5\u5fd7\uff0cjson \u7b49\uff0c\u5c06\u4f5c\u4e3a\u884c\u534f\u8bae field \u90e8\u5206\u7684 message \u5b57\u6bb5\u4f5c\u4e3a\u8f93\u5165 \u8f93\u51fa\u7684\u6570\u636e\u534f\u8bae: lineprotocol json \u884c\u534f\u8bae\u7684 json \u8868\u793a Usage: ppl run [flags] Flags: -h, --help help for run -i, --input string input data file path --output-type string result output type: json, lineprotocol (default \"json\") -s, --script string script name -t, --type string data source type: text, lineprotocol (default \"text\") -w, --workspace string ppl workspace directory (default \"/path/to/ppl-process-working-dir\")","title":"PPL \u5de5\u5177\u4f7f\u7528\u65b9\u6cd5"},{"location":"zh/#ppl_3","text":"\u5185\u7f6e\u51fd\u6570\u6587\u6863\uff1a pkg/engine/funcs/md grok \u6587\u6863\uff1a docs/grok.md \u521b\u5efa\u4e00\u4e2a nginx_access_log.data \uff0c\u5e76\u5199\u5165\u4ee5\u4e0b\u65e5\u5fd7\u5185\u5bb9\uff1a 207.46.13.28 - - [19/Oct/2022:02:25:59 +0000] \"GET / HTTP/2.0\" 200 5 \"-\" \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\" \u521b\u5efa\u4e00\u4e2a nginx_access_log.ppl \uff0c\u5e76\u5c06\u4ee5\u4e0b\u5185\u5bb9\u5199\u5165\u811a\u672c\u4e2d\uff1a # access log add_pattern(\"access_common\", \"%{NOTSPACE:client_ip} %{NOTSPACE:http_ident} %{NOTSPACE:http_auth} \\\\[%{HTTPDATE:time}\\\\] \\\"%{DATA:http_method} %{GREEDYDATA:http_url} HTTP/%{NUMBER:http_version}\\\" %{INT:status_code:int} %{INT:bytes:int}\") grok(_, '%{access_common} \"%{NOTSPACE:referrer}\" \"%{GREEDYDATA:agent}\"') user_agent(agent) group_between(status_code, [200,299], \"OK\", status) group_between(status_code, [300,399], \"notice\", status) group_between(status_code, [400,499], \"warning\", status) group_between(status_code, [500,599], \"error\", status) nullif(http_ident, \"-\") nullif(http_auth, \"-\") nullif(upstream, \"\") default_time(time) \u6267\u884c ppl \u5de5\u5177\uff1a ppl@GuanceCloud:~/go/src/github.com/GuanceCloud/ppl/scripts/test_nginx_access_log$ ppl run -s nginx_access_log.ppl -i nginx_access_log.data { \"fields\": { \"agent\": \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\", \"browser\": \"bingbot\", \"browserVer\": \"2.0\", \"bytes\": 5, \"client_ip\": \"207.46.13.28\", \"engine\": \"\", \"engineVer\": \"\", \"http_method\": \"GET\", \"http_url\": \"/\", \"http_version\": \"2.0\", \"isBot\": true, \"isMobile\": false, \"message\": \"207.46.13.28 - - [19/Oct/2022:02:25:59 +0000] \\\"GET / HTTP/2.0\\\" 200 5 \\\"-\\\" \\\"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\\\"\", \"os\": \"\", \"referrer\": \"-\", \"status\": \"OK\", \"status_code\": 200, \"ua\": \"\" }, \"measurement\": \"default_name\", \"tags\": {}, \"time\": \"2022-10-19T10:25:59+08:00\" }","title":"\u7f16\u5199\u7b2c\u4e00\u4e2a PPL \u811a\u672c"},{"location":"zh/#ppl_4","text":"\u8bed\u6cd5\u6587\u6863\u89c1 docs/pipeline.md","title":"PPL \u8bed\u6cd5"},{"location":"zh/explaination/","text":"\u6982\u8ff0","title":"\u6982\u8ff0"},{"location":"zh/explaination/#_1","text":"","title":"\u6982\u8ff0"},{"location":"zh/how-tos/","text":"\u6982\u8ff0","title":"\u6982\u8ff0"},{"location":"zh/how-tos/#_1","text":"","title":"\u6982\u8ff0"}]}